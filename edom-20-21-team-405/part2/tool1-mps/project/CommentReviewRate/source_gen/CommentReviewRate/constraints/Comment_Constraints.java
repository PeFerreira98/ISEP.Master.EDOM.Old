package CommentReviewRate.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CommentReviewRate.behavior.Field__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class Comment_Constraints extends BaseConstraintsDescriptor {
  public Comment_Constraints() {
    super(CONCEPTS.Comment$jZ);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  public static class Name_Property extends BasePropertyConstraintsDescriptor {
    public Name_Property(ConstraintsDescriptor container) {
      super(PROPS.name$MnvL, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      return SPropertyOperations.getString(node, PROPS.name$MnvL).substring(0, 1).toUpperCase() + SPropertyOperations.getString(node, PROPS.name$MnvL).substring(1);
    }
    @Override
    public boolean hasOwnValidator() {
      return true;
    }
    private static final SNodePointer validatePropertyBreakingPoint = new SNodePointer("r:11366c19-b94f-436c-ad13-562eb496cee2(CommentReviewRate.constraints)", "7018486486196775489");
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(validatePropertyBreakingPoint);
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return !(propertyValue.isEmpty()) && propertyValue.length() >= 1;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.name$MnvL, new Name_Property(this));
    return properties;
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentNode), CONCEPTS.Comment$jZ)) && !(SPropertyOperations.getString(SNodeOperations.asNode(childConcept), PROPS.name$MnvL).equals(SPropertyOperations.getString(node, PROPS.name$MnvL)));
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    int existsDateAndtext = 0;

    for (SNode field : SLinkOperations.getChildren(node, LINKS.Fields$BGML)) {
      if (SPropertyOperations.getString(field, PROPS.name$MnvL).equals("Date") && Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(field).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62cfL, "CommentReviewRate.structure.FieldTypes"), 0x181a8ce2444b62d1L, "Date").toString())) {
        existsDateAndtext++;
      }

      if (SPropertyOperations.getString(field, PROPS.name$MnvL).equals("Text") && Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(field).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62cfL, "CommentReviewRate.structure.FieldTypes"), 0x181a8ce2444b62d0L, "String").toString())) {
        existsDateAndtext++;
      }
    }
    return existsDateAndtext == 2 && SLinkOperations.getChildren(node, LINKS.Fields$BGML).size() == 2;
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:11366c19-b94f-436c-ad13-562eb496cee2(CommentReviewRate.constraints)", "7018486486196875067");
  private static final SNodePointer canBeParentBreakingPoint = new SNodePointer("r:11366c19-b94f-436c-ad13-562eb496cee2(CommentReviewRate.constraints)", "7018486486197601674");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Comment$jZ = MetaAdapterFactory.getConcept(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c9L, "CommentReviewRate.structure.Comment");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Fields$BGML = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c9L, 0x6166ac460ee473c4L, "Fields");
  }
}
