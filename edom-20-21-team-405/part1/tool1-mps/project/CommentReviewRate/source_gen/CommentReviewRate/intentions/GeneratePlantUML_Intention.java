package CommentReviewRate.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CommentReviewRate.behavior.Field__BehaviorDescriptor;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class GeneratePlantUML_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private static final Logger LOG = LogManager.getLogger(GeneratePlantUML_Intention.class);
  private Collection<IntentionExecutable> myCachedExecutable;
  public GeneratePlantUML_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:346c5b37-022a-4159-b89f-dd35c2b8d4a8(CommentReviewRate.intentions)", "7018486486194049075"));
  }
  @Override
  public String getPresentation() {
    return "GeneratePlantUML";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Generate Language PlantUML";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      String plantUML = "\n@startuml\n";
      plantUML += "digraph " + "model " + " {\n";

      // For Model (root of language) 
      plantUML += SPropertyOperations.getString(node, PROPS.name$MnvL) + " [shape=box3d];\n";

      // Model concept Root with multiple Subjects 
      for (SNode subject : SLinkOperations.getChildren(node, LINKS.Subjects$nleT)) {

        plantUML += SPropertyOperations.getString(node, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(subject, PROPS.name$MnvL) + " [label=\"has subject\"];\n";

        // Comments 
        if (SLinkOperations.getChildren(subject, LINKS.Comments$em41).size() > 0) {

          for (SNode parentComment : SLinkOperations.getChildren(subject, LINKS.Comments$em41)) {
            plantUML += SPropertyOperations.getString(parentComment, PROPS.name$MnvL) + " [shape=oval];\n";

            if (SLinkOperations.getTarget(parentComment, LINKS.User$enf_) != null) {
              plantUML += SPropertyOperations.getString(SLinkOperations.getTarget(parentComment, LINKS.User$enf_), PROPS.name$MnvL) + " [shape=diamond];\n";
              plantUML += SPropertyOperations.getString(parentComment, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(SLinkOperations.getTarget(parentComment, LINKS.User$enf_), PROPS.name$MnvL) + " [label=\"from\"];\n";

              if (SLinkOperations.getChildren(SLinkOperations.getTarget(parentComment, LINKS.User$enf_), LINKS.Fields$etky).size() > 0) {

                for (SNode userField : SLinkOperations.getChildren(SLinkOperations.getTarget(parentComment, LINKS.User$enf_), LINKS.Fields$etky)) {
                  plantUML += SPropertyOperations.getString(userField, PROPS.name$MnvL) + " [shape=square];\n";
                  plantUML += Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(userField) + " [shape=Msquare];\n";
                  plantUML += SPropertyOperations.getString(SLinkOperations.getTarget(parentComment, LINKS.User$enf_), PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(userField, PROPS.name$MnvL) + " [label=\"has\"];\n";
                  plantUML += SPropertyOperations.getString(userField, PROPS.name$MnvL) + " -> " + Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(userField) + " [label=\"from type\"];\n";
                }
              }
            }

            if (SLinkOperations.getChildren(parentComment, LINKS.Comments$8KUH).size() > 0) {

              for (SNode comment : SLinkOperations.getChildren(parentComment, LINKS.Comments$8KUH)) {

                if (SLinkOperations.getTarget(comment, LINKS.User$enf_) != null) {
                  plantUML += SPropertyOperations.getString(SLinkOperations.getTarget(comment, LINKS.User$enf_), PROPS.name$MnvL) + " [shape=diamond];\n";
                  plantUML += SPropertyOperations.getString(comment, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(SLinkOperations.getTarget(comment, LINKS.User$enf_), PROPS.name$MnvL) + " [label=\"from\"];\n";
                  plantUML += SPropertyOperations.getString(parentComment, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(comment, PROPS.name$MnvL) + " [label=\"commented\"];\n";

                  if (SLinkOperations.getChildren(SLinkOperations.getTarget(comment, LINKS.User$enf_), LINKS.Fields$etky).size() > 0) {

                    for (SNode userField : SLinkOperations.getChildren(SLinkOperations.getTarget(comment, LINKS.User$enf_), LINKS.Fields$etky)) {
                      plantUML += SPropertyOperations.getString(userField, PROPS.name$MnvL) + " [shape=square];\n";
                      plantUML += Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(userField) + " [shape=Msquare];\n";
                      plantUML += SPropertyOperations.getString(SLinkOperations.getTarget(comment, LINKS.User$enf_), PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(userField, PROPS.name$MnvL) + " [label=\"has\"];\n";
                      plantUML += SPropertyOperations.getString(userField, PROPS.name$MnvL) + " -> " + Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(userField) + " [label=\"from type\"];\n";
                    }
                  }
                }
              }
            }

            plantUML += SPropertyOperations.getString(subject, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(parentComment, PROPS.name$MnvL) + " [label=\"has comment\"];\n";
          }
        }

        // For Subject Fields 
        if (SLinkOperations.getChildren(subject, LINKS.Fields$eu2z).size() > 0) {
          for (SNode field : SLinkOperations.getChildren(subject, LINKS.Fields$eu2z)) {
            plantUML += SPropertyOperations.getString(field, PROPS.name$MnvL) + " [shape=square];\n";
            plantUML += Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(field) + " [shape=Msquare];\n";

            plantUML += SPropertyOperations.getString(subject, PROPS.name$MnvL) + " -> " + SPropertyOperations.getString(field, PROPS.name$MnvL) + " [label=\"has\"];\n";
            plantUML += SPropertyOperations.getString(field, PROPS.name$MnvL) + " -> " + Field__BehaviorDescriptor.getType_id65AF4oeuX3D.invoke(field) + " [label=\"from type\"];\n";
          }
        }
        plantUML += "\n";
      }

      plantUML += "}\n@enduml";
      if (LOG.isInfoEnabled()) {
        LOG.info("### PlantUML ###");
      }
      if (LOG.isInfoEnabled()) {
        LOG.info(plantUML);
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return GeneratePlantUML_Intention.this;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink User$enf_ = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c9L, 0x181a8ce2444b62e3L, "User");
    /*package*/ static final SContainmentLink Fields$etky = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c6L, 0x181a8ce2444b62e8L, "Fields");
    /*package*/ static final SContainmentLink Comments$8KUH = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c9L, 0x6166ac460e79b4f5L, "Comments");
    /*package*/ static final SContainmentLink Comments$em41 = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62beL, 0x181a8ce2444b62dfL, "Comments");
    /*package*/ static final SContainmentLink Fields$eu2z = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62beL, 0x181a8ce2444b62ecL, "Fields");
    /*package*/ static final SContainmentLink Subjects$nleT = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x6166ac460e810705L, 0x6166ac460e810826L, "Subjects");
  }
}
