package CommentReviewRate.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Model_Constraints extends BaseConstraintsDescriptor {
  public Model_Constraints() {
    super(CONCEPTS.Model$So);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  public static class Name_Property extends BasePropertyConstraintsDescriptor {
    public Name_Property(ConstraintsDescriptor container) {
      super(PROPS.name$MnvL, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      String name = SPropertyOperations.getString(node, PROPS.name$MnvL).substring(0, 1).toUpperCase() + SPropertyOperations.getString(node, PROPS.name$MnvL).substring(1);
      return name;
    }
    @Override
    public boolean hasOwnValidator() {
      return true;
    }
    private static final SNodePointer validatePropertyBreakingPoint = new SNodePointer("r:11366c19-b94f-436c-ad13-562eb496cee2(CommentReviewRate.constraints)", "7018486486199405550");
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(validatePropertyBreakingPoint);
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return !(propertyValue.isEmpty()) && propertyValue.length() >= 1;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.name$MnvL, new Name_Property(this));
    return properties;
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    if (SLinkOperations.getChildren(node, LINKS.Subjects$nleT).size() > 1) {
      for (SNode subject1 : SLinkOperations.getChildren(node, LINKS.Subjects$nleT)) {
        for (SNode subject2 : SLinkOperations.getChildren(node, LINKS.Subjects$nleT)) {
          if (SPropertyOperations.getString(subject2, PROPS.name$MnvL).equals(SPropertyOperations.getString(subject1, PROPS.name$MnvL)) && SNodeOperations.getIndexInParent(subject1) != SNodeOperations.getIndexInParent(subject2)) {
            return false;
          }
        }
      }
    }
    return true;
  }
  private static final SNodePointer canBeParentBreakingPoint = new SNodePointer("r:11366c19-b94f-436c-ad13-562eb496cee2(CommentReviewRate.constraints)", "7018486486199410476");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Model$So = MetaAdapterFactory.getConcept(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x6166ac460e810705L, "CommentReviewRate.structure.Model");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Subjects$nleT = MetaAdapterFactory.getContainmentLink(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x6166ac460e810705L, 0x6166ac460e810826L, "Subjects");
  }
}
