package CommentReviewRate.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new Comment_Constraints();
      case 1:
        return new Field_Constraints();
      case 2:
        return new Model_Constraints();
      case 3:
        return new Subject_Constraints();
      case 4:
        return new User_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c9L), MetaIdFactory.conceptId(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62ccL), MetaIdFactory.conceptId(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x6166ac460e810705L), MetaIdFactory.conceptId(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62beL), MetaIdFactory.conceptId(0xf07b76fcfe824d2cL, 0x8d3502e79970824dL, 0x181a8ce2444b62c6L)).seal();
}
