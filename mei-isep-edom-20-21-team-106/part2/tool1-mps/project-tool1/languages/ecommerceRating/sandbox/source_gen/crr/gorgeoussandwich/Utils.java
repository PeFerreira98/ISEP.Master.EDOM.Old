package crr.gorgeoussandwich;

/*Generated by MPS */

import java.util.Scanner;
import java.util.List;
import java.util.Arrays;
import java.lang.reflect.Field;

public class Utils {
  public static void createComment(IUser user) {
    Scanner input = new Scanner(System.in);
    Comment comment = new Comment();

    System.out.println("Comment section");

    System.out.println("Select item id: ");
    String itemId = input.nextLine();

    Sandwich item = getSandwichById(Integer.parseInt(itemId));
    if (item == null) {
      System.out.println("Item not found!");
      return;
    }
    List<String> attributesNotToShow = Arrays.asList("Id", "Author", "Approved");

    for (int i = 0; i < comment.getClass().getDeclaredFields().length; i++) {
      Field attr = comment.getClass().getDeclaredFields()[i];
      if (attributesNotToShow.contains(attr.getName())) {
        continue;
      }

      setFieldValue(attr, comment);
    }

    comment.Author = user;
    item.Comments.add(comment);
  }

  public static void createRate(IUser user) {
    Scanner input = new Scanner(System.in);
    Rate rate = new Rate();

    System.out.println("Rate section");
    System.out.println("Select item id: ");
    String itemId = input.nextLine();

    Sandwich item = getSandwichById(Integer.parseInt(itemId));
    if (item == null) {
      System.out.println("Item not found!");
      return;
    }

    List<String> attributesNotToShow = Arrays.asList("Id", "Author", "Review", "Approved");

    for (int i = 0; i < rate.getClass().getDeclaredFields().length; i++) {
      Field attr = rate.getClass().getDeclaredFields()[i];
      if (attributesNotToShow.contains(attr.getName())) {
        continue;
      }

      setFieldValue(attr, rate);
    }

    System.out.println("You want to review too? [Y]es/No(Press any key)");
    String opt = input.nextLine();
    if (opt.equals("y") || opt.equals("Y")) {
      System.out.println("Review");
      Reviewv review = new Reviewv();

      try {
        for (int i = 0; i < review.getClass().getDeclaredFields().length; i++) {
          Field attr = review.getClass().getDeclaredFields()[i];

          if (attr.getName() == "Id") {
            continue;
          }

          System.out.println(attr.getName() + ": ");
          String attrvalue = input.nextLine();

          switch (attr.getType().getName()) {
            case "int":
              attr.set(review, Integer.parseInt(attrvalue));
              break;

            case "double":
              attr.set(review, Double.parseDouble(attrvalue));
              break;

            default:
              attr.set(review, attrvalue);
              break;
          }
        }
      } catch (Exception ex) {
        ex.printStackTrace();
      }

      rate.Review = review;
    }

    rate.Author = user;
    item.Rates.add(rate);
  }

  public static void displayItems() {
    for (int i = 0; i < GorgeousSandwich.Sandwichs.size(); i++) {
      System.out.println(GorgeousSandwich.Sandwichs.get(i));
      System.out.println("=======================");
    }
  }

  private static Sandwich getSandwichById(int id) {
    Sandwich itemSelected = null;

    for (int i = 0; i < GorgeousSandwich.Sandwichs.size(); i++) {
      if (GorgeousSandwich.Sandwichs.get(i).Id == id) {
        itemSelected = GorgeousSandwich.Sandwichs.get(i);
        break;
      }
    }

    return itemSelected;
  }

  private static void setFieldValue(Field field, Object obj) {
    System.out.println(field.getName() + ": ");
    Scanner input = new Scanner(System.in);
    String fieldValue = input.nextLine();

    try {
      switch (field.getType().getName()) {
        case "int":
          field.set(obj, Integer.parseInt(fieldValue));
          break;
        case "double":
          field.set(obj, Double.parseDouble(fieldValue));
          break;
        case "float":
          field.set(obj, Float.parseFloat(fieldValue));
          break;
        case "boolean":
          field.set(obj, Boolean.parseBoolean(fieldValue));
        default:
          field.set(obj, fieldValue);
          break;
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
