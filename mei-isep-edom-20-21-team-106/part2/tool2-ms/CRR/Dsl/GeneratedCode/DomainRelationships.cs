//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasItem
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasItem.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasItem.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("685354c4-f47c-4d0d-9e51-adc01315280d")]
	public partial class ModelHasItem : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x685354c4, 0xf47c, 0x4d0d, 0x9e, 0x51, 0xad, 0xc0, 0x13, 0x15, 0x28, 0x0d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasItem link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Item to use as the target of the relationship.</param>
		public ModelHasItem(Model source, Item target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasItem.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasItem.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasItem(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasItem(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasItem(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasItem(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x887ef8c6, 0x5645, 0x4229, 0xb9, 0x22, 0xbf, 0x54, 0xda, 0x76, 0x4d, 0xc0);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasItem/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasItem/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Item", PropertyDisplayNameKey="Edom.CRR.ModelHasItem/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("887ef8c6-5645-4229-b922-bf54da764dc0")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Item
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Item element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Item element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x57976f8b, 0x339b, 0x4f19, 0x96, 0xe1, 0x24, 0x55, 0x5a, 0xf4, 0x4b, 0x7b);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasItem/Element.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasItem/Element.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasItem/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("57976f8b-339b-4f19-96e1-24555af44b7b")]
		public virtual Item Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a Model
		/// <summary>
		/// Gets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Item GetItem(Model element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Item;
		}
		
		/// <summary>
		/// Sets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetItem(Model element, Item newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newElement);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasItem link to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasItem GetLinkToItem (global::Edom.CRR.Model modelInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasItem>(modelInstance, global::Edom.CRR.ModelHasItem.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelHasItem link to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasItem GetLinkToModel (global::Edom.CRR.Item elementInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasItem>(elementInstance, global::Edom.CRR.ModelHasItem.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasItem instance accessors
		
		/// <summary>
		/// Get any ModelHasItem links between a given Model and a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasItem> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.Item target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasItem> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasItem>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasItem>(source, global::Edom.CRR.ModelHasItem.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasItem link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasItem link between a given Modeland a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasItem GetLink( global::Edom.CRR.Model source, global::Edom.CRR.Item target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasItem>(source, global::Edom.CRR.ModelHasItem.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasItem link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasUsers
	/// Description for Edom.CRR.ModelHasUsers
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasUsers.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasUsers.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f8dc13a6-b52d-4916-ae43-a4e9ad5d81c7")]
	public partial class ModelHasUsers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasUsers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf8dc13a6, 0xb52d, 0x4916, 0xae, 0x43, 0xa4, 0xe9, 0xad, 0x5d, 0x81, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasUsers link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public ModelHasUsers(Model source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasUsers.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasUsers.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUsers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUsers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUsers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUsers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x8cb6e98a, 0xfa74, 0x4db7, 0x9e, 0x25, 0x61, 0x56, 0x82, 0xd1, 0x9e, 0x37);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasUsers.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasUsers/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasUsers/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Users", PropertyDisplayNameKey="Edom.CRR.ModelHasUsers/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("8cb6e98a-fa74-4db7-9e25-615682d19e37")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a User
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(User element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(User element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserDomainRoleId, newModel);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0x917d6743, 0x98f4, 0x4e78, 0xa5, 0xb8, 0xf0, 0x39, 0xac, 0xb8, 0x17, 0x51);
		
		/// <summary>
		/// DomainRole User
		/// Description for Edom.CRR.ModelHasUsers.User
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasUsers/User.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasUsers/User.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasUsers/User.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("917d6743-98f4-4e78-a5b8-f039acb81751")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Model
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasUsers links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasUsers> GetLinksToUsers ( global::Edom.CRR.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasUsers>(modelInstance, global::Edom.CRR.ModelHasUsers.ModelDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the ModelHasUsers link to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasUsers GetLinkToModel (global::Edom.CRR.User userInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasUsers>(userInstance, global::Edom.CRR.ModelHasUsers.UserDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of User not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasUsers instance accessors
		
		/// <summary>
		/// Get any ModelHasUsers links between a given Model and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasUsers> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasUsers> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasUsers>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasUsers>(source, global::Edom.CRR.ModelHasUsers.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasUsers link between a given Modeland a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasUsers GetLink( global::Edom.CRR.Model source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasUsers>(source, global::Edom.CRR.ModelHasUsers.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasDataTypes
	/// Description for Edom.CRR.ModelHasDataTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasDataTypes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasDataTypes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e0a832cc-dd23-46ea-9f9c-3c226817988f")]
	public partial class ModelHasDataTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasDataTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0a832cc, 0xdd23, 0x46ea, 0x9f, 0x9c, 0x3c, 0x22, 0x68, 0x17, 0x98, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasDataTypes link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public ModelHasDataTypes(Model source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasDataTypes.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasDataTypes.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x6dce0990, 0x79c4, 0x485f, 0xa5, 0xb2, 0xdc, 0xc6, 0xd6, 0x22, 0x2d, 0x80);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasDataTypes.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasDataTypes/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasDataTypes/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataTypes", PropertyDisplayNameKey="Edom.CRR.ModelHasDataTypes/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("6dce0990-79c4-485f-a5b2-dcc6d6222d80")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a DataType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(DataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataTypeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(DataType element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataTypeDomainRoleId, newModel);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0xc6ac6516, 0x5618, 0x441c, 0x9a, 0x78, 0xe0, 0x49, 0x05, 0x36, 0x64, 0x30);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for Edom.CRR.ModelHasDataTypes.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasDataTypes/DataType.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasDataTypes/DataType.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasDataTypes/DataType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c6ac6516-5618-441c-9a78-e04905366430")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataTypes of a Model
		/// <summary>
		/// Gets a list of DataTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataType> GetDataTypes(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataType>, DataType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasDataTypes links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasDataTypes> GetLinksToDataTypes ( global::Edom.CRR.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasDataTypes>(modelInstance, global::Edom.CRR.ModelHasDataTypes.ModelDomainRoleId);
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the ModelHasDataTypes link to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasDataTypes GetLinkToModel (global::Edom.CRR.DataType dataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasDataTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasDataTypes>(dataTypeInstance, global::Edom.CRR.ModelHasDataTypes.DataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasDataTypes instance accessors
		
		/// <summary>
		/// Get any ModelHasDataTypes links between a given Model and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasDataTypes> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.DataType target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasDataTypes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasDataTypes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasDataTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasDataTypes>(source, global::Edom.CRR.ModelHasDataTypes.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasDataTypes link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasDataTypes link between a given Modeland a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasDataTypes GetLink( global::Edom.CRR.Model source, global::Edom.CRR.DataType target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasDataTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasDataTypes>(source, global::Edom.CRR.ModelHasDataTypes.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasDataTypes link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasAttributes
	/// Description for Edom.CRR.ModelHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1d97f941-a640-422a-94b4-5d71cd90423f")]
	public partial class ModelHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d97f941, 0xa640, 0x422a, 0x94, 0xb4, 0x5d, 0x71, 0xcd, 0x90, 0x42, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasAttributes link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public ModelHasAttributes(Model source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasAttributes.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xe9465ac3, 0xe1f8, 0x4531, 0x89, 0xdc, 0xd3, 0x10, 0x45, 0x05, 0x3d, 0xf1);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasAttributes.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasAttributes/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasAttributes/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.ModelHasAttributes/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("e9465ac3-e1f8-4531-89dc-d31045053df1")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Attribute
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Attribute element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModel);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xb7ccdf89, 0x99ae, 0x4166, 0x8d, 0x68, 0xa5, 0x26, 0x49, 0xfe, 0x01, 0x4f);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.ModelHasAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b7ccdf89-99ae-4166-8d68-a52649fe014f")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Model
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasAttributes links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasAttributes> GetLinksToAttributes ( global::Edom.CRR.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasAttributes>(modelInstance, global::Edom.CRR.ModelHasAttributes.ModelDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ModelHasAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasAttributes GetLinkToModel (global::Edom.CRR.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasAttributes>(attributeInstance, global::Edom.CRR.ModelHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasAttributes instance accessors
		
		/// <summary>
		/// Get any ModelHasAttributes links between a given Model and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasAttributes> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasAttributes>(source, global::Edom.CRR.ModelHasAttributes.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasAttributes link between a given Modeland a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasAttributes GetLink( global::Edom.CRR.Model source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasAttributes>(source, global::Edom.CRR.ModelHasAttributes.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ItemReferencesAttributes
	/// Description for Edom.CRR.ItemReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8e5ad4e8-7eff-46a2-96ba-7141fc7e0c2a")]
	public partial class ItemReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8e5ad4e8, 0x7eff, 0x46a2, 0x96, 0xba, 0x71, 0x41, 0xfc, 0x7e, 0x0c, 0x2a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemReferencesAttributes link in the same Partition as the given Item
		/// </summary>
		/// <param name="source">Item to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public ItemReferencesAttributes(Item source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemReferencesAttributes.ItemDomainRoleId, source), new DslModeling::RoleAssignment(ItemReferencesAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0xd59f5cfc, 0x3caa, 0x4ef7, 0x8c, 0x88, 0x83, 0xa1, 0xb3, 0xd6, 0x90, 0x91);
		
		/// <summary>
		/// DomainRole Item
		/// Description for Edom.CRR.ItemReferencesAttributes.Item
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesAttributes/Item.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesAttributes/Item.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.ItemReferencesAttributes/Item.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("d59f5cfc-3caa-4ef7-8c88-83a1b3d69091")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Items of a Attribute
		/// <summary>
		/// Gets a list of Items.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Item> GetItems(Attribute element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(element, AttributeDomainRoleId);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x2737d863, 0xc7aa, 0x44a8, 0xa9, 0x89, 0xe3, 0xc0, 0x07, 0xc4, 0x4e, 0x85);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.ItemReferencesAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Items", PropertyDisplayNameKey="Edom.CRR.ItemReferencesAttributes/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2737d863-c7aa-44a8-a989-e3c007c44e85")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Item
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Item element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, ItemDomainRoleId);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the list of ItemReferencesAttributes links to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ItemReferencesAttributes> GetLinksToAttributes ( global::Edom.CRR.Item itemInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesAttributes>(itemInstance, global::Edom.CRR.ItemReferencesAttributes.ItemDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the list of ItemReferencesAttributes links to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ItemReferencesAttributes> GetLinksToItems ( global::Edom.CRR.Attribute attributeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesAttributes>(attributeInstance, global::Edom.CRR.ItemReferencesAttributes.AttributeDomainRoleId);
		}
		#endregion
		#region ItemReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any ItemReferencesAttributes links between a given Item and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ItemReferencesAttributes> GetLinks( global::Edom.CRR.Item source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesAttributes>(source, global::Edom.CRR.ItemReferencesAttributes.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemReferencesAttributes link between a given Itemand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesAttributes GetLink( global::Edom.CRR.Item source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesAttributes>(source, global::Edom.CRR.ItemReferencesAttributes.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship CommentReferencesAttributes
	/// Description for Edom.CRR.CommentReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d897e2b8-29c9-4d49-b97a-7aefeaa16690")]
	public partial class CommentReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd897e2b8, 0x29c9, 0x4d49, 0xb9, 0x7a, 0x7a, 0xef, 0xea, 0xa1, 0x66, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesAttributes link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public CommentReferencesAttributes(Comment source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesAttributes.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xfd4f87b0, 0x165c, 0x4952, 0xb6, 0x94, 0x11, 0xa4, 0x2a, 0xe5, 0x26, 0xe0);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Edom.CRR.CommentReferencesAttributes.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesAttributes/Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesAttributes/Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.CommentReferencesAttributes/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fd4f87b0-165c-4952-b694-11a42ae526e0")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Attribute
		/// <summary>
		/// Gets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetComment(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComment(Attribute element, Comment newComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newComment);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x0ac03587, 0xb0d1, 0x44ce, 0x92, 0x04, 0x5e, 0x59, 0x18, 0xa7, 0x9e, 0x88);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.CommentReferencesAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="Edom.CRR.CommentReferencesAttributes/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0ac03587-b0d1-44ce-9204-5e5918a79e88")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Comment
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesAttributes links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.CommentReferencesAttributes> GetLinksToAttributes ( global::Edom.CRR.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesAttributes>(commentInstance, global::Edom.CRR.CommentReferencesAttributes.CommentDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the CommentReferencesAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesAttributes GetLinkToComment (global::Edom.CRR.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesAttributes>(attributeInstance, global::Edom.CRR.CommentReferencesAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommentReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any CommentReferencesAttributes links between a given Comment and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.CommentReferencesAttributes> GetLinks( global::Edom.CRR.Comment source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesAttributes>(source, global::Edom.CRR.CommentReferencesAttributes.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesAttributes link between a given Commentand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesAttributes GetLink( global::Edom.CRR.Comment source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesAttributes>(source, global::Edom.CRR.CommentReferencesAttributes.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship RateReferencesAttributes
	/// Description for Edom.CRR.RateReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.RateReferencesAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("faabdf94-1875-4e36-9756-565f5cdb09a1")]
	public partial class RateReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RateReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfaabdf94, 0x1875, 0x4e36, 0x97, 0x56, 0x56, 0x5f, 0x5c, 0xdb, 0x09, 0xa1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RateReferencesAttributes link in the same Partition as the given Rate
		/// </summary>
		/// <param name="source">Rate to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public RateReferencesAttributes(Rate source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RateReferencesAttributes.RateDomainRoleId, source), new DslModeling::RoleAssignment(RateReferencesAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0xdcf22d6f, 0x6063, 0x44ba, 0xaf, 0xe3, 0x33, 0xfb, 0x2e, 0xff, 0x06, 0xb1);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.RateReferencesAttributes.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesAttributes/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesAttributes/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.RateReferencesAttributes/Rate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("dcf22d6f-6063-44ba-afe3-33fb2eff06b1")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a Attribute
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(Attribute element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newRate);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xaf854f5a, 0xf52d, 0x4fef, 0xa0, 0xd9, 0xa7, 0x1a, 0xbf, 0x2b, 0x3a, 0x72);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.RateReferencesAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.RateReferencesAttributes/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("af854f5a-f52d-4fef-a0d9-a71abf2b3a72")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Rate
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Rate element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, RateDomainRoleId);
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the list of RateReferencesAttributes links to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesAttributes> GetLinksToAttributes ( global::Edom.CRR.Rate rateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesAttributes>(rateInstance, global::Edom.CRR.RateReferencesAttributes.RateDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the RateReferencesAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesAttributes GetLinkToRate (global::Edom.CRR.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesAttributes>(attributeInstance, global::Edom.CRR.RateReferencesAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RateReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any RateReferencesAttributes links between a given Rate and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesAttributes> GetLinks( global::Edom.CRR.Rate source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesAttributes>(source, global::Edom.CRR.RateReferencesAttributes.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RateReferencesAttributes link between a given Rateand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesAttributes GetLink( global::Edom.CRR.Rate source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesAttributes>(source, global::Edom.CRR.RateReferencesAttributes.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship AttributeReferencesDataType
	/// Description for Edom.CRR.AttributeReferencesDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.AttributeReferencesDataType.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.AttributeReferencesDataType.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8875b40e-45e1-468a-808e-41aff2b3dccf")]
	public partial class AttributeReferencesDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributeReferencesDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8875b40e, 0x45e1, 0x468a, 0x80, 0x8e, 0x41, 0xaf, 0xf2, 0xb3, 0xdc, 0xcf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributeReferencesDataType link in the same Partition as the given Attribute
		/// </summary>
		/// <param name="source">Attribute to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public AttributeReferencesDataType(Attribute source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributeReferencesDataType.AttributeDomainRoleId, source), new DslModeling::RoleAssignment(AttributeReferencesDataType.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeReferencesDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeReferencesDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeReferencesDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeReferencesDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xf7c96cd5, 0x4ada, 0x44f4, 0xac, 0x28, 0xad, 0x80, 0x10, 0x9a, 0xbf, 0x30);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.AttributeReferencesDataType.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.AttributeReferencesDataType/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.AttributeReferencesDataType/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataType", PropertyDisplayNameKey="Edom.CRR.AttributeReferencesDataType/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f7c96cd5-4ada-44f4-ac28-ad80109abf30")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a DataType
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(DataType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, DataTypeDomainRoleId);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0x640e1451, 0xb617, 0x42d3, 0x9d, 0xe4, 0x1a, 0xa2, 0xf0, 0x0c, 0x1e, 0x9b);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for Edom.CRR.AttributeReferencesDataType.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.AttributeReferencesDataType/DataType.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.AttributeReferencesDataType/DataType.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.AttributeReferencesDataType/DataType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("640e1451-b617-42d3-9de4-1aa2f00c1e9b")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataType of a Attribute
		/// <summary>
		/// Gets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataType GetDataType(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as DataType;
		}
		
		/// <summary>
		/// Sets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataType(Attribute element, DataType newDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newDataType);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the AttributeReferencesDataType link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.AttributeReferencesDataType GetLinkToDataType (global::Edom.CRR.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.AttributeReferencesDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.AttributeReferencesDataType>(attributeInstance, global::Edom.CRR.AttributeReferencesDataType.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the list of AttributeReferencesDataType links to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.AttributeReferencesDataType> GetLinksToAttributes ( global::Edom.CRR.DataType dataTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.AttributeReferencesDataType>(dataTypeInstance, global::Edom.CRR.AttributeReferencesDataType.DataTypeDomainRoleId);
		}
		#endregion
		#region AttributeReferencesDataType instance accessors
		
		/// <summary>
		/// Get any AttributeReferencesDataType links between a given Attribute and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.AttributeReferencesDataType> GetLinks( global::Edom.CRR.Attribute source, global::Edom.CRR.DataType target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.AttributeReferencesDataType> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.AttributeReferencesDataType>();
			global::System.Collections.Generic.IList<global::Edom.CRR.AttributeReferencesDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.AttributeReferencesDataType>(source, global::Edom.CRR.AttributeReferencesDataType.AttributeDomainRoleId);
			foreach ( global::Edom.CRR.AttributeReferencesDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttributeReferencesDataType link between a given Attributeand a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.AttributeReferencesDataType GetLink( global::Edom.CRR.Attribute source, global::Edom.CRR.DataType target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.AttributeReferencesDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.AttributeReferencesDataType>(source, global::Edom.CRR.AttributeReferencesDataType.AttributeDomainRoleId);
			foreach ( global::Edom.CRR.AttributeReferencesDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasComment
	/// Description for Edom.CRR.ModelHasComment
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasComment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasComment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("62a496e0-e59f-423a-80db-dfddf7c2bdc5")]
	public partial class ModelHasComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62a496e0, 0xe59f, 0x423a, 0x80, 0xdb, 0xdf, 0xdd, 0xf7, 0xc2, 0xbd, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasComment link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelHasComment(Model source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasComment.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasComment.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x7d0d58aa, 0x6920, 0x4911, 0x9d, 0x06, 0x3e, 0xc3, 0xc1, 0xf7, 0x8b, 0xa2);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasComment.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasComment/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasComment/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comment", PropertyDisplayNameKey="Edom.CRR.ModelHasComment/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7d0d58aa-6920-4911-9d06-3ec3c1f78ba2")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Comment
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Comment element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x4cc6db57, 0xaba7, 0x42ae, 0x83, 0x89, 0xe3, 0x22, 0x43, 0xf6, 0x8e, 0x12);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Edom.CRR.ModelHasComment.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasComment/Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasComment/Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasComment/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4cc6db57-aba7-42ae-8389-e32243f68e12")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Model
		/// <summary>
		/// Gets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetComment(Model element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComment(Model element, Comment newComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newComment);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasComment link to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasComment GetLinkToComment (global::Edom.CRR.Model modelInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasComment>(modelInstance, global::Edom.CRR.ModelHasComment.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelHasComment link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasComment GetLinkToModel (global::Edom.CRR.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasComment>(commentInstance, global::Edom.CRR.ModelHasComment.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasComment instance accessors
		
		/// <summary>
		/// Get any ModelHasComment links between a given Model and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasComment> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.Comment target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasComment> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasComment>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasComment>(source, global::Edom.CRR.ModelHasComment.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasComment link between a given Modeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasComment GetLink( global::Edom.CRR.Model source, global::Edom.CRR.Comment target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasComment>(source, global::Edom.CRR.ModelHasComment.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasRate
	/// Description for Edom.CRR.ModelHasRate
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasRate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasRate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1e0b12e2-163a-49f1-ac40-2e05455d0f61")]
	public partial class ModelHasRate : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasRate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e0b12e2, 0x163a, 0x49f1, 0xac, 0x40, 0x2e, 0x05, 0x45, 0x5d, 0x0f, 0x61);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasRate link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Rate to use as the target of the relationship.</param>
		public ModelHasRate(Model source, Rate target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasRate.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasRate.RateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRate(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRate(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRate(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRate(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x4b73923b, 0x8f41, 0x40bf, 0xbb, 0xea, 0xbd, 0x67, 0x6e, 0x1f, 0x05, 0x41);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasRate.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasRate/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasRate/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.ModelHasRate/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4b73923b-8f41-40bf-bbea-bd676e1f0541")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Rate
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Rate element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RateDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Rate element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RateDomainRoleId, newModel);
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0xc795e140, 0x337b, 0x49db, 0xb8, 0x32, 0x52, 0x50, 0xe7, 0x0c, 0xb4, 0x7b);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.ModelHasRate.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasRate/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasRate/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasRate/Rate.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c795e140-337b-49db-b832-5250e70cb47b")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a Model
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(Model element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(Model element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newRate);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasRate link to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasRate GetLinkToRate (global::Edom.CRR.Model modelInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasRate>(modelInstance, global::Edom.CRR.ModelHasRate.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the ModelHasRate link to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasRate GetLinkToModel (global::Edom.CRR.Rate rateInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasRate>(rateInstance, global::Edom.CRR.ModelHasRate.RateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Rate not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasRate instance accessors
		
		/// <summary>
		/// Get any ModelHasRate links between a given Model and a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasRate> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.Rate target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasRate> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasRate>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasRate>(source, global::Edom.CRR.ModelHasRate.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasRate link in links )
			{
				if ( target.Equals(link.Rate) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasRate link between a given Modeland a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasRate GetLink( global::Edom.CRR.Model source, global::Edom.CRR.Rate target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasRate>(source, global::Edom.CRR.ModelHasRate.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasRate link in links )
			{
				if ( target.Equals(link.Rate) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasReview
	/// Description for Edom.CRR.ModelHasReview
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasReview.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasReview.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6342b718-9156-45cc-ab77-6e7f1eb7c3b9")]
	public partial class ModelHasReview : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasReview domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6342b718, 0x9156, 0x45cc, 0xab, 0x77, 0x6e, 0x7f, 0x1e, 0xb7, 0xc3, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasReview link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Review to use as the target of the relationship.</param>
		public ModelHasReview(Model source, Review target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasReview.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasReview.ReviewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReview(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReview(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReview(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReview(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xc088b797, 0x6b84, 0x403b, 0x9d, 0x6f, 0x9b, 0xc2, 0x78, 0x70, 0xde, 0x28);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasReview.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasReview/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasReview/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Review", PropertyDisplayNameKey="Edom.CRR.ModelHasReview/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c088b797-6b84-403b-9d6f-9bc27870de28")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Review
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Review element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReviewDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Review element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReviewDomainRoleId, newModel);
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x3c466c92, 0xe105, 0x4cb4, 0xaf, 0x1d, 0xc1, 0xb3, 0x3c, 0xe7, 0x2c, 0xd9);
		
		/// <summary>
		/// DomainRole Review
		/// Description for Edom.CRR.ModelHasReview.Review
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasReview/Review.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasReview/Review.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasReview/Review.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c466c92-e105-4cb4-af1d-c1b33ce72cd9")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a Model
		/// <summary>
		/// Gets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Review GetReview(Model element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Review;
		}
		
		/// <summary>
		/// Sets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReview(Model element, Review newReview)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newReview);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasReview link to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasReview GetLinkToReview (global::Edom.CRR.Model modelInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasReview>(modelInstance, global::Edom.CRR.ModelHasReview.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the ModelHasReview link to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasReview GetLinkToModel (global::Edom.CRR.Review reviewInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasReview>(reviewInstance, global::Edom.CRR.ModelHasReview.ReviewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Review not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasReview instance accessors
		
		/// <summary>
		/// Get any ModelHasReview links between a given Model and a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasReview> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.Review target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasReview> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasReview>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasReview>(source, global::Edom.CRR.ModelHasReview.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasReview link between a given Modeland a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasReview GetLink( global::Edom.CRR.Model source, global::Edom.CRR.Review target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasReview>(source, global::Edom.CRR.ModelHasReview.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship RateReferencesReview
	/// Description for Edom.CRR.RateReferencesReview
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesReview.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.RateReferencesReview.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d741d633-21e3-440f-a393-64c964f3f79d")]
	public partial class RateReferencesReview : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RateReferencesReview domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd741d633, 0x21e3, 0x440f, 0xa3, 0x93, 0x64, 0xc9, 0x64, 0xf3, 0xf7, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RateReferencesReview link in the same Partition as the given Rate
		/// </summary>
		/// <param name="source">Rate to use as the source of the relationship.</param>
		/// <param name="target">Review to use as the target of the relationship.</param>
		public RateReferencesReview(Rate source, Review target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RateReferencesReview.RateDomainRoleId, source), new DslModeling::RoleAssignment(RateReferencesReview.ReviewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesReview(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesReview(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesReview(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesReview(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0xb671708f, 0xc165, 0x4056, 0x95, 0x8b, 0x46, 0x34, 0xde, 0x38, 0xba, 0xbd);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.RateReferencesReview.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesReview/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesReview/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Review", PropertyDisplayNameKey="Edom.CRR.RateReferencesReview/Rate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b671708f-c165-4056-958b-4634de38babd")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a Review
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(Review element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReviewDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(Review element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReviewDomainRoleId, newRate);
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x3834b051, 0x2308, 0x4a76, 0xbf, 0x4a, 0x62, 0xff, 0x2b, 0x45, 0x22, 0xa7);
		
		/// <summary>
		/// DomainRole Review
		/// Description for Edom.CRR.RateReferencesReview.Review
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesReview/Review.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesReview/Review.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.RateReferencesReview/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3834b051-2308-4a76-bf4a-62ff2b4522a7")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a Rate
		/// <summary>
		/// Gets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Review GetReview(Rate element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RateDomainRoleId) as Review;
		}
		
		/// <summary>
		/// Sets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReview(Rate element, Review newReview)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RateDomainRoleId, newReview);
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the RateReferencesReview link to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesReview GetLinkToReview (global::Edom.CRR.Rate rateInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesReview>(rateInstance, global::Edom.CRR.RateReferencesReview.RateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Rate not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the RateReferencesReview link to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesReview GetLinkToRate (global::Edom.CRR.Review reviewInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesReview>(reviewInstance, global::Edom.CRR.RateReferencesReview.ReviewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Review not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RateReferencesReview instance accessors
		
		/// <summary>
		/// Get any RateReferencesReview links between a given Rate and a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesReview> GetLinks( global::Edom.CRR.Rate source, global::Edom.CRR.Review target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesReview> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesReview>();
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesReview>(source, global::Edom.CRR.RateReferencesReview.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RateReferencesReview link between a given Rateand a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesReview GetLink( global::Edom.CRR.Rate source, global::Edom.CRR.Review target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesReview>(source, global::Edom.CRR.RateReferencesReview.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ReviewReferencesAttributes
	/// Description for Edom.CRR.ReviewReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fdc078f2-064f-40e4-806b-ab5f8db5ccaa")]
	public partial class ReviewReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfdc078f2, 0x064f, 0x40e4, 0x80, 0x6b, 0xab, 0x5f, 0x8d, 0xb5, 0xcc, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewReferencesAttributes link in the same Partition as the given Review
		/// </summary>
		/// <param name="source">Review to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public ReviewReferencesAttributes(Review source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewReferencesAttributes.ReviewDomainRoleId, source), new DslModeling::RoleAssignment(ReviewReferencesAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0xce01b883, 0xdbd5, 0x47ed, 0x9a, 0x5a, 0xd2, 0x11, 0xd3, 0xb9, 0xb7, 0x79);
		
		/// <summary>
		/// DomainRole Review
		/// Description for Edom.CRR.ReviewReferencesAttributes.Review
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesAttributes/Review.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesAttributes/Review.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.ReviewReferencesAttributes/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("ce01b883-dbd5-47ed-9a5a-d211d3b9b779")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a Attribute
		/// <summary>
		/// Gets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Review GetReview(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as Review;
		}
		
		/// <summary>
		/// Sets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReview(Attribute element, Review newReview)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newReview);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x99d5f716, 0x6611, 0x4a5e, 0x85, 0xb5, 0x1e, 0x1a, 0x8e, 0xf7, 0x2c, 0x93);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.ReviewReferencesAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Review", PropertyDisplayNameKey="Edom.CRR.ReviewReferencesAttributes/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("99d5f716-6611-4a5e-85b5-1e1a8ef72c93")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Review
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Review element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, ReviewDomainRoleId);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the list of ReviewReferencesAttributes links to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ReviewReferencesAttributes> GetLinksToAttributes ( global::Edom.CRR.Review reviewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesAttributes>(reviewInstance, global::Edom.CRR.ReviewReferencesAttributes.ReviewDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ReviewReferencesAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ReviewReferencesAttributes GetLinkToReview (global::Edom.CRR.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesAttributes>(attributeInstance, global::Edom.CRR.ReviewReferencesAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReviewReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any ReviewReferencesAttributes links between a given Review and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ReviewReferencesAttributes> GetLinks( global::Edom.CRR.Review source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ReviewReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ReviewReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesAttributes>(source, global::Edom.CRR.ReviewReferencesAttributes.ReviewDomainRoleId);
			foreach ( global::Edom.CRR.ReviewReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewReferencesAttributes link between a given Reviewand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ReviewReferencesAttributes GetLink( global::Edom.CRR.Review source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesAttributes>(source, global::Edom.CRR.ReviewReferencesAttributes.ReviewDomainRoleId);
			foreach ( global::Edom.CRR.ReviewReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship UserReferencesAttributes
	/// Description for Edom.CRR.UserReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.UserReferencesAttributes.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.UserReferencesAttributes.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("95020e6a-9b2c-4921-9174-b86a1c7262ae")]
	public partial class UserReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x95020e6a, 0x9b2c, 0x4921, 0x91, 0x74, 0xb8, 0x6a, 0x1c, 0x72, 0x62, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserReferencesAttributes link in the same Partition as the given User
		/// </summary>
		/// <param name="source">User to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public UserReferencesAttributes(User source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserReferencesAttributes.UserDomainRoleId, source), new DslModeling::RoleAssignment(UserReferencesAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xcd6880a8, 0x9242, 0x4160, 0x87, 0xaf, 0xb5, 0xd7, 0x52, 0xf8, 0x63, 0x60);
		
		/// <summary>
		/// DomainRole User
		/// Description for Edom.CRR.UserReferencesAttributes.User
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.UserReferencesAttributes/User.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.UserReferencesAttributes/User.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Edom.CRR.UserReferencesAttributes/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("cd6880a8-9242-4160-87af-b5d752f86360")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Attribute
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Attribute element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, AttributeDomainRoleId);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x3105ef2f, 0x3548, 0x4b4d, 0xb7, 0xad, 0xf2, 0xf0, 0x5b, 0x27, 0x0a, 0x56);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Edom.CRR.UserReferencesAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.UserReferencesAttributes/Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.UserReferencesAttributes/Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Users", PropertyDisplayNameKey="Edom.CRR.UserReferencesAttributes/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3105ef2f-3548-4b4d-b7ad-f2f05b270a56")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a User
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, UserDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of UserReferencesAttributes links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.UserReferencesAttributes> GetLinksToAttributes ( global::Edom.CRR.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.UserReferencesAttributes>(userInstance, global::Edom.CRR.UserReferencesAttributes.UserDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the list of UserReferencesAttributes links to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.UserReferencesAttributes> GetLinksToUsers ( global::Edom.CRR.Attribute attributeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.UserReferencesAttributes>(attributeInstance, global::Edom.CRR.UserReferencesAttributes.AttributeDomainRoleId);
		}
		#endregion
		#region UserReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any UserReferencesAttributes links between a given User and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.UserReferencesAttributes> GetLinks( global::Edom.CRR.User source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.UserReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.UserReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Edom.CRR.UserReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.UserReferencesAttributes>(source, global::Edom.CRR.UserReferencesAttributes.UserDomainRoleId);
			foreach ( global::Edom.CRR.UserReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserReferencesAttributes link between a given Userand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.UserReferencesAttributes GetLink( global::Edom.CRR.User source, global::Edom.CRR.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.UserReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.UserReferencesAttributes>(source, global::Edom.CRR.UserReferencesAttributes.UserDomainRoleId);
			foreach ( global::Edom.CRR.UserReferencesAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ItemReferencesComment
	/// Description for Edom.CRR.ItemReferencesComment
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesComment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesComment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3d0f4c7f-586d-4a5c-8eb4-e876d4de5d87")]
	public partial class ItemReferencesComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemReferencesComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d0f4c7f, 0x586d, 0x4a5c, 0x8e, 0xb4, 0xe8, 0x76, 0xd4, 0xde, 0x5d, 0x87);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemReferencesComment link in the same Partition as the given Item
		/// </summary>
		/// <param name="source">Item to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ItemReferencesComment(Item source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemReferencesComment.ItemDomainRoleId, source), new DslModeling::RoleAssignment(ItemReferencesComment.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0xda010c41, 0x23bb, 0x4ee3, 0xa1, 0xa9, 0x1b, 0x1a, 0xdc, 0xf1, 0x38, 0xd9);
		
		/// <summary>
		/// DomainRole Item
		/// Description for Edom.CRR.ItemReferencesComment.Item
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesComment/Item.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesComment/Item.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comment", PropertyDisplayNameKey="Edom.CRR.ItemReferencesComment/Item.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("da010c41-23bb-4ee3-a1a9-1b1adcf138d9")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a Comment
		/// <summary>
		/// Gets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Item GetItem(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Item;
		}
		
		/// <summary>
		/// Sets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetItem(Comment element, Item newItem)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newItem);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xe276c3cb, 0x8848, 0x4715, 0xab, 0x99, 0xdb, 0x89, 0x02, 0x3e, 0x93, 0x35);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Edom.CRR.ItemReferencesComment.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesComment/Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesComment/Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Item", PropertyDisplayNameKey="Edom.CRR.ItemReferencesComment/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e276c3cb-8848-4715-ab99-db89023e9335")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Item
		/// <summary>
		/// Gets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetComment(Item element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComment(Item element, Comment newComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemDomainRoleId, newComment);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the ItemReferencesComment link to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesComment GetLinkToComment (global::Edom.CRR.Item itemInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesComment>(itemInstance, global::Edom.CRR.ItemReferencesComment.ItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Item not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ItemReferencesComment link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesComment GetLinkToItem (global::Edom.CRR.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesComment>(commentInstance, global::Edom.CRR.ItemReferencesComment.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ItemReferencesComment instance accessors
		
		/// <summary>
		/// Get any ItemReferencesComment links between a given Item and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ItemReferencesComment> GetLinks( global::Edom.CRR.Item source, global::Edom.CRR.Comment target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesComment> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesComment>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesComment>(source, global::Edom.CRR.ItemReferencesComment.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemReferencesComment link between a given Itemand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesComment GetLink( global::Edom.CRR.Item source, global::Edom.CRR.Comment target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesComment>(source, global::Edom.CRR.ItemReferencesComment.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ItemReferencesRate
	/// Description for Edom.CRR.ItemReferencesRate
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesRate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesRate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ee9b9f12-d9bb-45f0-8a8d-e54494116a2c")]
	public partial class ItemReferencesRate : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemReferencesRate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee9b9f12, 0xd9bb, 0x45f0, 0x8a, 0x8d, 0xe5, 0x44, 0x94, 0x11, 0x6a, 0x2c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemReferencesRate link in the same Partition as the given Item
		/// </summary>
		/// <param name="source">Item to use as the source of the relationship.</param>
		/// <param name="target">Rate to use as the target of the relationship.</param>
		public ItemReferencesRate(Item source, Rate target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemReferencesRate.ItemDomainRoleId, source), new DslModeling::RoleAssignment(ItemReferencesRate.RateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesRate(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesRate(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemReferencesRate(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemReferencesRate(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0xab88ef58, 0x44c2, 0x4bfe, 0xaa, 0x39, 0x47, 0x08, 0x46, 0xb4, 0xbc, 0x3a);
		
		/// <summary>
		/// DomainRole Item
		/// Description for Edom.CRR.ItemReferencesRate.Item
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesRate/Item.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesRate/Item.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.ItemReferencesRate/Item.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ab88ef58-44c2-4bfe-aa39-470846b4bc3a")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a Rate
		/// <summary>
		/// Gets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Item GetItem(Rate element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RateDomainRoleId) as Item;
		}
		
		/// <summary>
		/// Sets Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetItem(Rate element, Item newItem)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RateDomainRoleId, newItem);
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0x8e9e931e, 0xf144, 0x47b8, 0x8b, 0xe4, 0x58, 0xfd, 0x64, 0x9b, 0x94, 0xb3);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.ItemReferencesRate.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ItemReferencesRate/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ItemReferencesRate/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Item", PropertyDisplayNameKey="Edom.CRR.ItemReferencesRate/Rate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8e9e931e-f144-47b8-8be4-58fd649b94b3")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a Item
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(Item element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(Item element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemDomainRoleId, newRate);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the ItemReferencesRate link to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesRate GetLinkToRate (global::Edom.CRR.Item itemInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesRate>(itemInstance, global::Edom.CRR.ItemReferencesRate.ItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Item not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the ItemReferencesRate link to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesRate GetLinkToItem (global::Edom.CRR.Rate rateInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesRate>(rateInstance, global::Edom.CRR.ItemReferencesRate.RateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Rate not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ItemReferencesRate instance accessors
		
		/// <summary>
		/// Get any ItemReferencesRate links between a given Item and a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ItemReferencesRate> GetLinks( global::Edom.CRR.Item source, global::Edom.CRR.Rate target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesRate> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ItemReferencesRate>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesRate>(source, global::Edom.CRR.ItemReferencesRate.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesRate link in links )
			{
				if ( target.Equals(link.Rate) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemReferencesRate link between a given Itemand a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ItemReferencesRate GetLink( global::Edom.CRR.Item source, global::Edom.CRR.Rate target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ItemReferencesRate> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ItemReferencesRate>(source, global::Edom.CRR.ItemReferencesRate.ItemDomainRoleId);
			foreach ( global::Edom.CRR.ItemReferencesRate link in links )
			{
				if ( target.Equals(link.Rate) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship RateReferencesUsers
	/// Description for Edom.CRR.RateReferencesUsers
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesUsers.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.RateReferencesUsers.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("20846f0b-8dc5-4b67-80ac-f96326cab773")]
	public partial class RateReferencesUsers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RateReferencesUsers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20846f0b, 0x8dc5, 0x4b67, 0x80, 0xac, 0xf9, 0x63, 0x26, 0xca, 0xb7, 0x73);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RateReferencesUsers link in the same Partition as the given Rate
		/// </summary>
		/// <param name="source">Rate to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public RateReferencesUsers(Rate source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RateReferencesUsers.RateDomainRoleId, source), new DslModeling::RoleAssignment(RateReferencesUsers.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesUsers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesUsers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesUsers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesUsers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0x4fd2cf3b, 0x7a99, 0x48a0, 0x86, 0x12, 0x93, 0xd9, 0x25, 0x19, 0xda, 0xa0);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.RateReferencesUsers.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesUsers/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesUsers/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Users", PropertyDisplayNameKey="Edom.CRR.RateReferencesUsers/Rate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("4fd2cf3b-7a99-48a0-8612-93d92519daa0")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a User
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(User element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(User element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserDomainRoleId, newRate);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0x73ab9379, 0x2fc4, 0x45b0, 0xb7, 0xf4, 0x13, 0x43, 0x30, 0x18, 0x32, 0x6e);
		
		/// <summary>
		/// DomainRole User
		/// Description for Edom.CRR.RateReferencesUsers.User
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesUsers/User.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesUsers/User.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.RateReferencesUsers/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("73ab9379-2fc4-45b0-b7f4-13433018326e")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Rate
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Rate element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, RateDomainRoleId);
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the list of RateReferencesUsers links to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesUsers> GetLinksToUsers ( global::Edom.CRR.Rate rateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesUsers>(rateInstance, global::Edom.CRR.RateReferencesUsers.RateDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the RateReferencesUsers link to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesUsers GetLinkToRate (global::Edom.CRR.User userInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesUsers>(userInstance, global::Edom.CRR.RateReferencesUsers.UserDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of User not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RateReferencesUsers instance accessors
		
		/// <summary>
		/// Get any RateReferencesUsers links between a given Rate and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesUsers> GetLinks( global::Edom.CRR.Rate source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesUsers> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesUsers>();
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesUsers>(source, global::Edom.CRR.RateReferencesUsers.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RateReferencesUsers link between a given Rateand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesUsers GetLink( global::Edom.CRR.Rate source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesUsers>(source, global::Edom.CRR.RateReferencesUsers.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship CommentReferencesUsers
	/// Description for Edom.CRR.CommentReferencesUsers
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesUsers.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesUsers.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89978d76-0199-422f-8f7e-42e6908d86fc")]
	public partial class CommentReferencesUsers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesUsers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89978d76, 0x0199, 0x422f, 0x8f, 0x7e, 0x42, 0xe6, 0x90, 0x8d, 0x86, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesUsers link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public CommentReferencesUsers(Comment source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesUsers.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesUsers.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesUsers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesUsers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesUsers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesUsers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x367c2da9, 0x436e, 0x4939, 0x83, 0x9b, 0x06, 0xbe, 0x6c, 0xe3, 0x08, 0x5f);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Edom.CRR.CommentReferencesUsers.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesUsers/Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesUsers/Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Users", PropertyDisplayNameKey="Edom.CRR.CommentReferencesUsers/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("367c2da9-436e-4939-839b-06be6ce3085f")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a User
		/// <summary>
		/// Gets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetComment(User element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComment(User element, Comment newComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserDomainRoleId, newComment);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xe64c2064, 0x334b, 0x4ad2, 0x8e, 0x0a, 0x3d, 0x79, 0x9a, 0x9b, 0xeb, 0x19);
		
		/// <summary>
		/// DomainRole User
		/// Description for Edom.CRR.CommentReferencesUsers.User
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesUsers/User.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesUsers/User.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="Edom.CRR.CommentReferencesUsers/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e64c2064-334b-4ad2-8e0a-3d799a9beb19")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Comment
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesUsers links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.CommentReferencesUsers> GetLinksToUsers ( global::Edom.CRR.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesUsers>(commentInstance, global::Edom.CRR.CommentReferencesUsers.CommentDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the CommentReferencesUsers link to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesUsers GetLinkToComment (global::Edom.CRR.User userInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesUsers>(userInstance, global::Edom.CRR.CommentReferencesUsers.UserDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of User not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommentReferencesUsers instance accessors
		
		/// <summary>
		/// Get any CommentReferencesUsers links between a given Comment and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.CommentReferencesUsers> GetLinks( global::Edom.CRR.Comment source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesUsers> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesUsers>();
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesUsers>(source, global::Edom.CRR.CommentReferencesUsers.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesUsers link between a given Commentand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesUsers GetLink( global::Edom.CRR.Comment source, global::Edom.CRR.User target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesUsers>(source, global::Edom.CRR.CommentReferencesUsers.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ModelHasApprovalProcesses
	/// Description for Edom.CRR.ModelHasApprovalProcesses
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ModelHasApprovalProcesses.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ModelHasApprovalProcesses.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7b21f174-ec4d-4e27-97a1-2ce6391e1978")]
	public partial class ModelHasApprovalProcesses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasApprovalProcesses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b21f174, 0xec4d, 0x4e27, 0x97, 0xa1, 0x2c, 0xe6, 0x39, 0x1e, 0x19, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasApprovalProcesses link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">ApprovalProcess to use as the target of the relationship.</param>
		public ModelHasApprovalProcesses(Model source, ApprovalProcess target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasApprovalProcesses.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasApprovalProcesses.ApprovalProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasApprovalProcesses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasApprovalProcesses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasApprovalProcesses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasApprovalProcesses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xfb6cc057, 0xa6af, 0x40d7, 0x8a, 0x58, 0x28, 0xaf, 0xb9, 0xd6, 0x19, 0x79);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Edom.CRR.ModelHasApprovalProcesses.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasApprovalProcesses/Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasApprovalProcesses/Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ApprovalProcesses", PropertyDisplayNameKey="Edom.CRR.ModelHasApprovalProcesses/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fb6cc057-a6af-40d7-8a58-28afb9d61979")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ApprovalProcess
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(ApprovalProcess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalProcessDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ApprovalProcess element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalProcessDomainRoleId, newModel);
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0x8c169493, 0x9646, 0x41ef, 0xb0, 0x8d, 0x36, 0x1f, 0x8f, 0xa3, 0x5e, 0xf3);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.ModelHasApprovalProcesses.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ModelHasApprovalProcesses/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ModelHasApprovalProcesses/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Edom.CRR.ModelHasApprovalProcesses/ApprovalProcess.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8c169493-9646-41ef-b08d-361f8fa35ef3")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcesses of a Model
		/// <summary>
		/// Gets a list of ApprovalProcesses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ApprovalProcess> GetApprovalProcesses(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalProcess>, ApprovalProcess>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasApprovalProcesses links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasApprovalProcesses> GetLinksToApprovalProcesses ( global::Edom.CRR.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasApprovalProcesses>(modelInstance, global::Edom.CRR.ModelHasApprovalProcesses.ModelDomainRoleId);
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the ModelHasApprovalProcesses link to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasApprovalProcesses GetLinkToModel (global::Edom.CRR.ApprovalProcess approvalProcessInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasApprovalProcesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasApprovalProcesses>(approvalProcessInstance, global::Edom.CRR.ModelHasApprovalProcesses.ApprovalProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalProcess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasApprovalProcesses instance accessors
		
		/// <summary>
		/// Get any ModelHasApprovalProcesses links between a given Model and a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ModelHasApprovalProcesses> GetLinks( global::Edom.CRR.Model source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ModelHasApprovalProcesses> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ModelHasApprovalProcesses>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasApprovalProcesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasApprovalProcesses>(source, global::Edom.CRR.ModelHasApprovalProcesses.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasApprovalProcesses link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasApprovalProcesses link between a given Modeland a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ModelHasApprovalProcesses GetLink( global::Edom.CRR.Model source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ModelHasApprovalProcesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ModelHasApprovalProcesses>(source, global::Edom.CRR.ModelHasApprovalProcesses.ModelDomainRoleId);
			foreach ( global::Edom.CRR.ModelHasApprovalProcesses link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ApprovalStartReferencesStep
	/// Description for Edom.CRR.ApprovalStartReferencesStep
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStartReferencesStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalStartReferencesStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("30978e7b-fafd-4263-83af-be0cc822aa9d")]
	public partial class ApprovalStartReferencesStep : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApprovalStartReferencesStep domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30978e7b, 0xfafd, 0x4263, 0x83, 0xaf, 0xbe, 0x0c, 0xc8, 0x22, 0xaa, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApprovalStartReferencesStep link in the same Partition as the given ApprovalStart
		/// </summary>
		/// <param name="source">ApprovalStart to use as the source of the relationship.</param>
		/// <param name="target">ApprovalStep to use as the target of the relationship.</param>
		public ApprovalStartReferencesStep(ApprovalStart source, ApprovalStep target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApprovalStartReferencesStep.ApprovalStartDomainRoleId, source), new DslModeling::RoleAssignment(ApprovalStartReferencesStep.ApprovalStepDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStartReferencesStep(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStartReferencesStep(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStartReferencesStep(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStartReferencesStep(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApprovalStart domain role code
		
		/// <summary>
		/// ApprovalStart domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalStartDomainRoleId = new global::System.Guid(0x1b5ec043, 0x6598, 0x43ac, 0x8d, 0xe3, 0x91, 0xf8, 0x10, 0x8d, 0xed, 0xd0);
		
		/// <summary>
		/// DomainRole ApprovalStart
		/// Description for Edom.CRR.ApprovalStartReferencesStep.ApprovalStart
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStartReferencesStep/ApprovalStart.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStartReferencesStep/ApprovalStart.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Step", PropertyDisplayNameKey="Edom.CRR.ApprovalStartReferencesStep/ApprovalStart.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1b5ec043-6598-43ac-8de3-91f8108dedd0")]
		public virtual ApprovalStart ApprovalStart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStart)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalStartDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalStartDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Start of a ApprovalStep
		/// <summary>
		/// Gets Start.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalStart GetStart(ApprovalStep element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalStepDomainRoleId) as ApprovalStart;
		}
		
		/// <summary>
		/// Sets Start.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStart(ApprovalStep element, ApprovalStart newApprovalStart)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalStepDomainRoleId, newApprovalStart);
		}
		#endregion
		#region ApprovalStep domain role code
		
		/// <summary>
		/// ApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalStepDomainRoleId = new global::System.Guid(0x8c7f3a8f, 0xf98e, 0x4e3c, 0xbd, 0x7e, 0xdd, 0xab, 0xae, 0xb4, 0xd9, 0xee);
		
		/// <summary>
		/// DomainRole ApprovalStep
		/// Description for Edom.CRR.ApprovalStartReferencesStep.ApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStartReferencesStep/ApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStartReferencesStep/ApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Start", PropertyDisplayNameKey="Edom.CRR.ApprovalStartReferencesStep/ApprovalStep.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8c7f3a8f-f98e-4e3c-bd7e-ddabaeb4d9ee")]
		public virtual ApprovalStep ApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Step of a ApprovalStart
		/// <summary>
		/// Gets Step.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalStep GetStep(ApprovalStart element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalStartDomainRoleId) as ApprovalStep;
		}
		
		/// <summary>
		/// Sets Step.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStep(ApprovalStart element, ApprovalStep newApprovalStep)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalStartDomainRoleId, newApprovalStep);
		}
		#endregion
		#region ApprovalStart link accessor
		/// <summary>
		/// Get the ApprovalStartReferencesStep link to a ApprovalStart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStartReferencesStep GetLinkToStep (global::Edom.CRR.ApprovalStart approvalStartInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStartReferencesStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStartReferencesStep>(approvalStartInstance, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStartDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalStart not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalStep link accessor
		/// <summary>
		/// Get the ApprovalStartReferencesStep link to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStartReferencesStep GetLinkToStart (global::Edom.CRR.ApprovalStep approvalStepInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStartReferencesStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStartReferencesStep>(approvalStepInstance, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStepDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalStep not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalStartReferencesStep instance accessors
		
		/// <summary>
		/// Get any ApprovalStartReferencesStep links between a given ApprovalStart and a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalStartReferencesStep> GetLinks( global::Edom.CRR.ApprovalStart source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStartReferencesStep> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStartReferencesStep>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStartReferencesStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStartReferencesStep>(source, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStartDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStartReferencesStep link in links )
			{
				if ( target.Equals(link.ApprovalStep) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApprovalStartReferencesStep link between a given ApprovalStartand a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStartReferencesStep GetLink( global::Edom.CRR.ApprovalStart source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStartReferencesStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStartReferencesStep>(source, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStartDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStartReferencesStep link in links )
			{
				if ( target.Equals(link.ApprovalStep) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ApprovalStepReferencesTargetScucessStep
	/// Description for Edom.CRR.ApprovalStepReferencesTargetScucessStep
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b3dcab07-fdfe-4f1c-9877-f06d6432e360")]
	public partial class ApprovalStepReferencesTargetScucessStep : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApprovalStepReferencesTargetScucessStep domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3dcab07, 0xfdfe, 0x4f1c, 0x98, 0x77, 0xf0, 0x6d, 0x64, 0x32, 0xe3, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApprovalStepReferencesTargetScucessStep link in the same Partition as the given ApprovalStep
		/// </summary>
		/// <param name="source">ApprovalStep to use as the source of the relationship.</param>
		/// <param name="target">ApprovalStep to use as the target of the relationship.</param>
		public ApprovalStepReferencesTargetScucessStep(ApprovalStep source, ApprovalStep target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApprovalStepReferencesTargetScucessStep.SourceApprovalStepDomainRoleId, source), new DslModeling::RoleAssignment(ApprovalStepReferencesTargetScucessStep.TargetApprovalStepDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStepReferencesTargetScucessStep(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStepReferencesTargetScucessStep(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStepReferencesTargetScucessStep(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStepReferencesTargetScucessStep(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceApprovalStep domain role code
		
		/// <summary>
		/// SourceApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceApprovalStepDomainRoleId = new global::System.Guid(0xbf3168b7, 0xea1a, 0x4b05, 0xbb, 0x39, 0x1e, 0xd0, 0x36, 0x17, 0x22, 0xb3);
		
		/// <summary>
		/// DomainRole SourceApprovalStep
		/// Description for
		/// Edom.CRR.ApprovalStepReferencesTargetScucessStep.SourceApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep/SourceApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep/SourceApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetScucessStep", PropertyDisplayNameKey="Edom.CRR.ApprovalStepReferencesTargetScucessStep/SourceApprovalStep.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bf3168b7-ea1a-4b05-bb39-1ed0361722b3")]
		public virtual ApprovalStep SourceApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceSteps of a ApprovalStep
		/// <summary>
		/// Gets a list of SourceSteps.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ApprovalStep> GetSourceSteps(ApprovalStep element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(element, TargetApprovalStepDomainRoleId);
		}
		#endregion
		#region TargetApprovalStep domain role code
		
		/// <summary>
		/// TargetApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetApprovalStepDomainRoleId = new global::System.Guid(0xbcc2636e, 0x4f6d, 0x474e, 0x94, 0x12, 0xa8, 0xde, 0x5a, 0x55, 0x22, 0xa4);
		
		/// <summary>
		/// DomainRole TargetApprovalStep
		/// Description for
		/// Edom.CRR.ApprovalStepReferencesTargetScucessStep.TargetApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep/TargetApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetScucessStep/TargetApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceSteps", PropertyDisplayNameKey="Edom.CRR.ApprovalStepReferencesTargetScucessStep/TargetApprovalStep.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bcc2636e-4f6d-474e-9412-a8de5a5522a4")]
		public virtual ApprovalStep TargetApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetScucessStep of a ApprovalStep
		/// <summary>
		/// Gets TargetScucessStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalStep GetTargetScucessStep(ApprovalStep element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceApprovalStepDomainRoleId) as ApprovalStep;
		}
		
		/// <summary>
		/// Sets TargetScucessStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetScucessStep(ApprovalStep element, ApprovalStep newTargetApprovalStep)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceApprovalStepDomainRoleId, newTargetApprovalStep);
		}
		#endregion
		#region SourceApprovalStep link accessor
		/// <summary>
		/// Get the ApprovalStepReferencesTargetScucessStep link to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStepReferencesTargetScucessStep GetLinkToTargetScucessStep (global::Edom.CRR.ApprovalStep sourceApprovalStepInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep>(sourceApprovalStepInstance, global::Edom.CRR.ApprovalStepReferencesTargetScucessStep.SourceApprovalStepDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceApprovalStep not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetApprovalStep link accessor
		/// <summary>
		/// Get the list of ApprovalStepReferencesTargetScucessStep links to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> GetLinksToSourceSteps ( global::Edom.CRR.ApprovalStep targetApprovalStepInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep>(targetApprovalStepInstance, global::Edom.CRR.ApprovalStepReferencesTargetScucessStep.TargetApprovalStepDomainRoleId);
		}
		#endregion
		#region ApprovalStepReferencesTargetScucessStep instance accessors
		
		/// <summary>
		/// Get any ApprovalStepReferencesTargetScucessStep links between a given ApprovalStep and a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> GetLinks( global::Edom.CRR.ApprovalStep source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep>(source, global::Edom.CRR.ApprovalStepReferencesTargetScucessStep.SourceApprovalStepDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStepReferencesTargetScucessStep link in links )
			{
				if ( target.Equals(link.TargetApprovalStep) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApprovalStepReferencesTargetScucessStep link between a given ApprovalStepand a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStepReferencesTargetScucessStep GetLink( global::Edom.CRR.ApprovalStep source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetScucessStep>(source, global::Edom.CRR.ApprovalStepReferencesTargetScucessStep.SourceApprovalStepDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStepReferencesTargetScucessStep link in links )
			{
				if ( target.Equals(link.TargetApprovalStep) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ApprovalProcessHasSteps
	/// Description for Edom.CRR.ApprovalProcessHasSteps
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasSteps.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasSteps.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e2d0bb0b-a0f1-4cee-9009-4b53b986b812")]
	public partial class ApprovalProcessHasSteps : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApprovalProcessHasSteps domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2d0bb0b, 0xa0f1, 0x4cee, 0x90, 0x09, 0x4b, 0x53, 0xb9, 0x86, 0xb8, 0x12);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApprovalProcessHasSteps link in the same Partition as the given ApprovalProcess
		/// </summary>
		/// <param name="source">ApprovalProcess to use as the source of the relationship.</param>
		/// <param name="target">ApprovalStep to use as the target of the relationship.</param>
		public ApprovalProcessHasSteps(ApprovalProcess source, ApprovalStep target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApprovalProcessHasSteps.ApprovalProcessDomainRoleId, source), new DslModeling::RoleAssignment(ApprovalProcessHasSteps.ApprovalStepDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalProcessHasSteps(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalProcessHasSteps(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalProcessHasSteps(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalProcessHasSteps(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0x0dedb22a, 0xd113, 0x4530, 0x9b, 0x83, 0x93, 0xb3, 0x80, 0xcc, 0xae, 0x53);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.ApprovalProcessHasSteps.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasSteps/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasSteps/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Steps", PropertyDisplayNameKey="Edom.CRR.ApprovalProcessHasSteps/ApprovalProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0dedb22a-d113-4530-9b83-93b380ccae53")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcess of a ApprovalStep
		/// <summary>
		/// Gets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalProcess GetApprovalProcess(ApprovalStep element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalStepDomainRoleId) as ApprovalProcess;
		}
		
		/// <summary>
		/// Sets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApprovalProcess(ApprovalStep element, ApprovalProcess newApprovalProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalStepDomainRoleId, newApprovalProcess);
		}
		#endregion
		#region ApprovalStep domain role code
		
		/// <summary>
		/// ApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalStepDomainRoleId = new global::System.Guid(0x503b3322, 0xe302, 0x450b, 0x81, 0xf2, 0x97, 0xdf, 0x4b, 0x76, 0x45, 0xae);
		
		/// <summary>
		/// DomainRole ApprovalStep
		/// Description for Edom.CRR.ApprovalProcessHasSteps.ApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasSteps/ApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasSteps/ApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ApprovalProcess", PropertyDisplayNameKey="Edom.CRR.ApprovalProcessHasSteps/ApprovalStep.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("503b3322-e302-450b-81f2-97df4b7645ae")]
		public virtual ApprovalStep ApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Steps of a ApprovalProcess
		/// <summary>
		/// Gets a list of Steps.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ApprovalStep> GetSteps(ApprovalProcess element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(element, ApprovalProcessDomainRoleId);
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the list of ApprovalProcessHasSteps links to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalProcessHasSteps> GetLinksToSteps ( global::Edom.CRR.ApprovalProcess approvalProcessInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasSteps>(approvalProcessInstance, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalProcessDomainRoleId);
		}
		#endregion
		#region ApprovalStep link accessor
		/// <summary>
		/// Get the ApprovalProcessHasSteps link to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalProcessHasSteps GetLinkToApprovalProcess (global::Edom.CRR.ApprovalStep approvalStepInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasSteps> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasSteps>(approvalStepInstance, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalStepDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalStep not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalProcessHasSteps instance accessors
		
		/// <summary>
		/// Get any ApprovalProcessHasSteps links between a given ApprovalProcess and a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalProcessHasSteps> GetLinks( global::Edom.CRR.ApprovalProcess source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ApprovalProcessHasSteps> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ApprovalProcessHasSteps>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasSteps> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasSteps>(source, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalProcessDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalProcessHasSteps link in links )
			{
				if ( target.Equals(link.ApprovalStep) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApprovalProcessHasSteps link between a given ApprovalProcessand a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalProcessHasSteps GetLink( global::Edom.CRR.ApprovalProcess source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasSteps> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasSteps>(source, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalProcessDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalProcessHasSteps link in links )
			{
				if ( target.Equals(link.ApprovalStep) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ApprovalProcessHasStart
	/// Description for Edom.CRR.ApprovalProcessHasStart
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasStart.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasStart.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5b21dd75-1d97-4bae-9b05-34c217997771")]
	public partial class ApprovalProcessHasStart : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApprovalProcessHasStart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b21dd75, 0x1d97, 0x4bae, 0x9b, 0x05, 0x34, 0xc2, 0x17, 0x99, 0x77, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApprovalProcessHasStart link in the same Partition as the given ApprovalProcess
		/// </summary>
		/// <param name="source">ApprovalProcess to use as the source of the relationship.</param>
		/// <param name="target">ApprovalStart to use as the target of the relationship.</param>
		public ApprovalProcessHasStart(ApprovalProcess source, ApprovalStart target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApprovalProcessHasStart.ApprovalProcessDomainRoleId, source), new DslModeling::RoleAssignment(ApprovalProcessHasStart.ApprovalStartDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalProcessHasStart(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalProcessHasStart(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalProcessHasStart(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalProcessHasStart(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0x243456c6, 0xbcea, 0x4a3c, 0xb6, 0x2a, 0xea, 0x08, 0xb0, 0x3a, 0xee, 0xfd);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.ApprovalProcessHasStart.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasStart/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasStart/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Start", PropertyDisplayNameKey="Edom.CRR.ApprovalProcessHasStart/ApprovalProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("243456c6-bcea-4a3c-b62a-ea08b03aeefd")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcess of a ApprovalStart
		/// <summary>
		/// Gets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalProcess GetApprovalProcess(ApprovalStart element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalStartDomainRoleId) as ApprovalProcess;
		}
		
		/// <summary>
		/// Sets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApprovalProcess(ApprovalStart element, ApprovalProcess newApprovalProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalStartDomainRoleId, newApprovalProcess);
		}
		#endregion
		#region ApprovalStart domain role code
		
		/// <summary>
		/// ApprovalStart domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalStartDomainRoleId = new global::System.Guid(0x8d188041, 0xdced, 0x4999, 0x9c, 0x08, 0x09, 0x5f, 0x43, 0xd7, 0x3c, 0xd1);
		
		/// <summary>
		/// DomainRole ApprovalStart
		/// Description for Edom.CRR.ApprovalProcessHasStart.ApprovalStart
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcessHasStart/ApprovalStart.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcessHasStart/ApprovalStart.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ApprovalProcess", PropertyDisplayNameKey="Edom.CRR.ApprovalProcessHasStart/ApprovalStart.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d188041-dced-4999-9c08-095f43d73cd1")]
		public virtual ApprovalStart ApprovalStart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStart)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalStartDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalStartDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Start of a ApprovalProcess
		/// <summary>
		/// Gets Start.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalStart GetStart(ApprovalProcess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalProcessDomainRoleId) as ApprovalStart;
		}
		
		/// <summary>
		/// Sets Start.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStart(ApprovalProcess element, ApprovalStart newApprovalStart)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalProcessDomainRoleId, newApprovalStart);
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the ApprovalProcessHasStart link to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalProcessHasStart GetLinkToStart (global::Edom.CRR.ApprovalProcess approvalProcessInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasStart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasStart>(approvalProcessInstance, global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalProcess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalStart link accessor
		/// <summary>
		/// Get the ApprovalProcessHasStart link to a ApprovalStart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalProcessHasStart GetLinkToApprovalProcess (global::Edom.CRR.ApprovalStart approvalStartInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasStart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasStart>(approvalStartInstance, global::Edom.CRR.ApprovalProcessHasStart.ApprovalStartDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalStart not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalProcessHasStart instance accessors
		
		/// <summary>
		/// Get any ApprovalProcessHasStart links between a given ApprovalProcess and a ApprovalStart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalProcessHasStart> GetLinks( global::Edom.CRR.ApprovalProcess source, global::Edom.CRR.ApprovalStart target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ApprovalProcessHasStart> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ApprovalProcessHasStart>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasStart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasStart>(source, global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalProcessHasStart link in links )
			{
				if ( target.Equals(link.ApprovalStart) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApprovalProcessHasStart link between a given ApprovalProcessand a ApprovalStart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalProcessHasStart GetLink( global::Edom.CRR.ApprovalProcess source, global::Edom.CRR.ApprovalStart target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalProcessHasStart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalProcessHasStart>(source, global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalProcessHasStart link in links )
			{
				if ( target.Equals(link.ApprovalStart) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship CommentReferencesApprovalProcess
	/// Description for Edom.CRR.CommentReferencesApprovalProcess
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("06a35acd-4861-486c-9280-d1399ea0f8f5")]
	public partial class CommentReferencesApprovalProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesApprovalProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06a35acd, 0x4861, 0x486c, 0x92, 0x80, 0xd1, 0x39, 0x9e, 0xa0, 0xf8, 0xf5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesApprovalProcess link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ApprovalProcess to use as the target of the relationship.</param>
		public CommentReferencesApprovalProcess(Comment source, ApprovalProcess target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesApprovalProcess.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesApprovalProcess.ApprovalProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesApprovalProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesApprovalProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesApprovalProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesApprovalProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x3a4c745f, 0x4946, 0x4b56, 0x82, 0xc6, 0xa3, 0x50, 0x13, 0x3a, 0x14, 0x04);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Edom.CRR.CommentReferencesApprovalProcess.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesApprovalProcess/Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesApprovalProcess/Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ApprovalProcess", PropertyDisplayNameKey="Edom.CRR.CommentReferencesApprovalProcess/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3a4c745f-4946-4b56-82c6-a350133a1404")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a ApprovalProcess
		/// <summary>
		/// Gets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetComment(ApprovalProcess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalProcessDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComment(ApprovalProcess element, Comment newComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalProcessDomainRoleId, newComment);
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0xcf837e6f, 0x5fbe, 0x43b1, 0xbb, 0xad, 0x91, 0x3a, 0x80, 0xab, 0x17, 0x0c);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.CommentReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.CommentReferencesApprovalProcess/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.CommentReferencesApprovalProcess/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="Edom.CRR.CommentReferencesApprovalProcess/ApprovalProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cf837e6f-5fbe-43b1-bbad-913a80ab170c")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcess of a Comment
		/// <summary>
		/// Gets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalProcess GetApprovalProcess(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ApprovalProcess;
		}
		
		/// <summary>
		/// Sets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApprovalProcess(Comment element, ApprovalProcess newApprovalProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newApprovalProcess);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the CommentReferencesApprovalProcess link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesApprovalProcess GetLinkToApprovalProcess (global::Edom.CRR.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesApprovalProcess>(commentInstance, global::Edom.CRR.CommentReferencesApprovalProcess.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the CommentReferencesApprovalProcess link to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesApprovalProcess GetLinkToComment (global::Edom.CRR.ApprovalProcess approvalProcessInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesApprovalProcess>(approvalProcessInstance, global::Edom.CRR.CommentReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalProcess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommentReferencesApprovalProcess instance accessors
		
		/// <summary>
		/// Get any CommentReferencesApprovalProcess links between a given Comment and a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.CommentReferencesApprovalProcess> GetLinks( global::Edom.CRR.Comment source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesApprovalProcess> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.CommentReferencesApprovalProcess>();
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesApprovalProcess>(source, global::Edom.CRR.CommentReferencesApprovalProcess.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesApprovalProcess link between a given Commentand a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.CommentReferencesApprovalProcess GetLink( global::Edom.CRR.Comment source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.CommentReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.CommentReferencesApprovalProcess>(source, global::Edom.CRR.CommentReferencesApprovalProcess.CommentDomainRoleId);
			foreach ( global::Edom.CRR.CommentReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship RateReferencesApprovalProcess
	/// Description for Edom.CRR.RateReferencesApprovalProcess
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.RateReferencesApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c022b342-ab5e-40b7-8cac-81e4de3d296e")]
	public partial class RateReferencesApprovalProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RateReferencesApprovalProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc022b342, 0xab5e, 0x40b7, 0x8c, 0xac, 0x81, 0xe4, 0xde, 0x3d, 0x29, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RateReferencesApprovalProcess link in the same Partition as the given Rate
		/// </summary>
		/// <param name="source">Rate to use as the source of the relationship.</param>
		/// <param name="target">ApprovalProcess to use as the target of the relationship.</param>
		public RateReferencesApprovalProcess(Rate source, ApprovalProcess target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RateReferencesApprovalProcess.RateDomainRoleId, source), new DslModeling::RoleAssignment(RateReferencesApprovalProcess.ApprovalProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesApprovalProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesApprovalProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RateReferencesApprovalProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RateReferencesApprovalProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Rate domain role code
		
		/// <summary>
		/// Rate domain role Id.
		/// </summary>
		public static readonly global::System.Guid RateDomainRoleId = new global::System.Guid(0x0d84e805, 0x61f3, 0x434b, 0x89, 0x6e, 0x56, 0x6e, 0xec, 0xaf, 0x94, 0x1c);
		
		/// <summary>
		/// DomainRole Rate
		/// Description for Edom.CRR.RateReferencesApprovalProcess.Rate
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesApprovalProcess/Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesApprovalProcess/Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ApprovalProcess", PropertyDisplayNameKey="Edom.CRR.RateReferencesApprovalProcess/Rate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0d84e805-61f3-434b-896e-566eecaf941c")]
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rate)DslModeling::DomainRoleInfo.GetRolePlayer(this, RateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a ApprovalProcess
		/// <summary>
		/// Gets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rate GetRate(ApprovalProcess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalProcessDomainRoleId) as Rate;
		}
		
		/// <summary>
		/// Sets Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRate(ApprovalProcess element, Rate newRate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalProcessDomainRoleId, newRate);
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0xd92363ba, 0x0aeb, 0x4724, 0x9c, 0x95, 0x19, 0xe4, 0xd7, 0xc2, 0x89, 0x8d);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.RateReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.RateReferencesApprovalProcess/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.RateReferencesApprovalProcess/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Rate", PropertyDisplayNameKey="Edom.CRR.RateReferencesApprovalProcess/ApprovalProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d92363ba-0aeb-4724-9c95-19e4d7c2898d")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcess of a Rate
		/// <summary>
		/// Gets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalProcess GetApprovalProcess(Rate element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RateDomainRoleId) as ApprovalProcess;
		}
		
		/// <summary>
		/// Sets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApprovalProcess(Rate element, ApprovalProcess newApprovalProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RateDomainRoleId, newApprovalProcess);
		}
		#endregion
		#region Rate link accessor
		/// <summary>
		/// Get the RateReferencesApprovalProcess link to a Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesApprovalProcess GetLinkToApprovalProcess (global::Edom.CRR.Rate rateInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesApprovalProcess>(rateInstance, global::Edom.CRR.RateReferencesApprovalProcess.RateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Rate not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the RateReferencesApprovalProcess link to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesApprovalProcess GetLinkToRate (global::Edom.CRR.ApprovalProcess approvalProcessInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesApprovalProcess>(approvalProcessInstance, global::Edom.CRR.RateReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalProcess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RateReferencesApprovalProcess instance accessors
		
		/// <summary>
		/// Get any RateReferencesApprovalProcess links between a given Rate and a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.RateReferencesApprovalProcess> GetLinks( global::Edom.CRR.Rate source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesApprovalProcess> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.RateReferencesApprovalProcess>();
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesApprovalProcess>(source, global::Edom.CRR.RateReferencesApprovalProcess.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RateReferencesApprovalProcess link between a given Rateand a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.RateReferencesApprovalProcess GetLink( global::Edom.CRR.Rate source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.RateReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.RateReferencesApprovalProcess>(source, global::Edom.CRR.RateReferencesApprovalProcess.RateDomainRoleId);
			foreach ( global::Edom.CRR.RateReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ReviewReferencesApprovalProcess
	/// Description for Edom.CRR.ReviewReferencesApprovalProcess
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8dd2c541-8c6f-4193-8517-4fdbee9692d1")]
	public partial class ReviewReferencesApprovalProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewReferencesApprovalProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8dd2c541, 0x8c6f, 0x4193, 0x85, 0x17, 0x4f, 0xdb, 0xee, 0x96, 0x92, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewReferencesApprovalProcess link in the same Partition as the given Review
		/// </summary>
		/// <param name="source">Review to use as the source of the relationship.</param>
		/// <param name="target">ApprovalProcess to use as the target of the relationship.</param>
		public ReviewReferencesApprovalProcess(Review source, ApprovalProcess target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewReferencesApprovalProcess.ReviewDomainRoleId, source), new DslModeling::RoleAssignment(ReviewReferencesApprovalProcess.ApprovalProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferencesApprovalProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferencesApprovalProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferencesApprovalProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferencesApprovalProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x48f6604a, 0x887c, 0x4ed5, 0x8a, 0x83, 0x62, 0xe4, 0xb1, 0x8b, 0x6c, 0x06);
		
		/// <summary>
		/// DomainRole Review
		/// Description for Edom.CRR.ReviewReferencesApprovalProcess.Review
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesApprovalProcess/Review.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesApprovalProcess/Review.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ApprovalProcess", PropertyDisplayNameKey="Edom.CRR.ReviewReferencesApprovalProcess/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("48f6604a-887c-4ed5-8a83-62e4b18b6c06")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a ApprovalProcess
		/// <summary>
		/// Gets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Review GetReview(ApprovalProcess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApprovalProcessDomainRoleId) as Review;
		}
		
		/// <summary>
		/// Sets Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReview(ApprovalProcess element, Review newReview)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApprovalProcessDomainRoleId, newReview);
		}
		#endregion
		#region ApprovalProcess domain role code
		
		/// <summary>
		/// ApprovalProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApprovalProcessDomainRoleId = new global::System.Guid(0x9d95cc5e, 0xd95a, 0x44f7, 0x93, 0xa4, 0xdf, 0xe5, 0x6e, 0xa9, 0x15, 0x23);
		
		/// <summary>
		/// DomainRole ApprovalProcess
		/// Description for Edom.CRR.ReviewReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ReviewReferencesApprovalProcess/ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ReviewReferencesApprovalProcess/ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Review", PropertyDisplayNameKey="Edom.CRR.ReviewReferencesApprovalProcess/ApprovalProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9d95cc5e-d95a-44f7-93a4-dfe56ea91523")]
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApprovalProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApprovalProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ApprovalProcess of a Review
		/// <summary>
		/// Gets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalProcess GetApprovalProcess(Review element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReviewDomainRoleId) as ApprovalProcess;
		}
		
		/// <summary>
		/// Sets ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApprovalProcess(Review element, ApprovalProcess newApprovalProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReviewDomainRoleId, newApprovalProcess);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the ReviewReferencesApprovalProcess link to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ReviewReferencesApprovalProcess GetLinkToApprovalProcess (global::Edom.CRR.Review reviewInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesApprovalProcess>(reviewInstance, global::Edom.CRR.ReviewReferencesApprovalProcess.ReviewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Review not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApprovalProcess link accessor
		/// <summary>
		/// Get the ReviewReferencesApprovalProcess link to a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ReviewReferencesApprovalProcess GetLinkToReview (global::Edom.CRR.ApprovalProcess approvalProcessInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesApprovalProcess>(approvalProcessInstance, global::Edom.CRR.ReviewReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ApprovalProcess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReviewReferencesApprovalProcess instance accessors
		
		/// <summary>
		/// Get any ReviewReferencesApprovalProcess links between a given Review and a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ReviewReferencesApprovalProcess> GetLinks( global::Edom.CRR.Review source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ReviewReferencesApprovalProcess> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ReviewReferencesApprovalProcess>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesApprovalProcess>(source, global::Edom.CRR.ReviewReferencesApprovalProcess.ReviewDomainRoleId);
			foreach ( global::Edom.CRR.ReviewReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewReferencesApprovalProcess link between a given Reviewand a ApprovalProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ReviewReferencesApprovalProcess GetLink( global::Edom.CRR.Review source, global::Edom.CRR.ApprovalProcess target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ReviewReferencesApprovalProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ReviewReferencesApprovalProcess>(source, global::Edom.CRR.ReviewReferencesApprovalProcess.ReviewDomainRoleId);
			foreach ( global::Edom.CRR.ReviewReferencesApprovalProcess link in links )
			{
				if ( target.Equals(link.ApprovalProcess) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainRelationship ApprovalStepReferencesTargetFailureStep
	/// Description for Edom.CRR.ApprovalStepReferencesTargetFailureStep
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e571d931-80e9-4b4b-8d82-eaef9131aace")]
	public partial class ApprovalStepReferencesTargetFailureStep : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApprovalStepReferencesTargetFailureStep domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe571d931, 0x80e9, 0x4b4b, 0x8d, 0x82, 0xea, 0xef, 0x91, 0x31, 0xaa, 0xce);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApprovalStepReferencesTargetFailureStep link in the same Partition as the given ApprovalStep
		/// </summary>
		/// <param name="source">ApprovalStep to use as the source of the relationship.</param>
		/// <param name="target">ApprovalStep to use as the target of the relationship.</param>
		public ApprovalStepReferencesTargetFailureStep(ApprovalStep source, ApprovalStep target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApprovalStepReferencesTargetFailureStep.SourceApprovalStepDomainRoleId, source), new DslModeling::RoleAssignment(ApprovalStepReferencesTargetFailureStep.TargetApprovalStepDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStepReferencesTargetFailureStep(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStepReferencesTargetFailureStep(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApprovalStepReferencesTargetFailureStep(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApprovalStepReferencesTargetFailureStep(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceApprovalStep domain role code
		
		/// <summary>
		/// SourceApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceApprovalStepDomainRoleId = new global::System.Guid(0x1bdabd31, 0x647e, 0x46a3, 0x8a, 0x44, 0xf3, 0xbb, 0xdf, 0xe3, 0x7a, 0xbc);
		
		/// <summary>
		/// DomainRole SourceApprovalStep
		/// Description for
		/// Edom.CRR.ApprovalStepReferencesTargetFailureStep.SourceApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep/SourceApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep/SourceApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetFailureStep", PropertyDisplayNameKey="Edom.CRR.ApprovalStepReferencesTargetFailureStep/SourceApprovalStep.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1bdabd31-647e-46a3-8a44-f3bbdfe37abc")]
		public virtual ApprovalStep SourceApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceApprovalStepped of a ApprovalStep
		/// <summary>
		/// Gets a list of SourceApprovalStepped.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ApprovalStep> GetSourceApprovalStepped(ApprovalStep element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(element, TargetApprovalStepDomainRoleId);
		}
		#endregion
		#region TargetApprovalStep domain role code
		
		/// <summary>
		/// TargetApprovalStep domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetApprovalStepDomainRoleId = new global::System.Guid(0x76b89358, 0x75c0, 0x4f97, 0x9b, 0x06, 0x6e, 0x46, 0x61, 0xbf, 0x95, 0xc4);
		
		/// <summary>
		/// DomainRole TargetApprovalStep
		/// Description for
		/// Edom.CRR.ApprovalStepReferencesTargetFailureStep.TargetApprovalStep
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep/TargetApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStepReferencesTargetFailureStep/TargetApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceApprovalStepped", PropertyDisplayNameKey="Edom.CRR.ApprovalStepReferencesTargetFailureStep/TargetApprovalStep.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("76b89358-75c0-4f97-9b06-6e4661bf95c4")]
		public virtual ApprovalStep TargetApprovalStep
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApprovalStep)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetApprovalStepDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetApprovalStepDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetFailureStep of a ApprovalStep
		/// <summary>
		/// Gets TargetFailureStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApprovalStep GetTargetFailureStep(ApprovalStep element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceApprovalStepDomainRoleId) as ApprovalStep;
		}
		
		/// <summary>
		/// Sets TargetFailureStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetFailureStep(ApprovalStep element, ApprovalStep newTargetApprovalStep)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceApprovalStepDomainRoleId, newTargetApprovalStep);
		}
		#endregion
		#region SourceApprovalStep link accessor
		/// <summary>
		/// Get the ApprovalStepReferencesTargetFailureStep link to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStepReferencesTargetFailureStep GetLinkToTargetFailureStep (global::Edom.CRR.ApprovalStep sourceApprovalStepInstance)
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep>(sourceApprovalStepInstance, global::Edom.CRR.ApprovalStepReferencesTargetFailureStep.SourceApprovalStepDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceApprovalStep not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetApprovalStep link accessor
		/// <summary>
		/// Get the list of ApprovalStepReferencesTargetFailureStep links to a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> GetLinksToSourceApprovalStepped ( global::Edom.CRR.ApprovalStep targetApprovalStepInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep>(targetApprovalStepInstance, global::Edom.CRR.ApprovalStepReferencesTargetFailureStep.TargetApprovalStepDomainRoleId);
		}
		#endregion
		#region ApprovalStepReferencesTargetFailureStep instance accessors
		
		/// <summary>
		/// Get any ApprovalStepReferencesTargetFailureStep links between a given ApprovalStep and a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> GetLinks( global::Edom.CRR.ApprovalStep source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> outLinks = new global::System.Collections.Generic.List<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep>();
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep>(source, global::Edom.CRR.ApprovalStepReferencesTargetFailureStep.SourceApprovalStepDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStepReferencesTargetFailureStep link in links )
			{
				if ( target.Equals(link.TargetApprovalStep) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApprovalStepReferencesTargetFailureStep link between a given ApprovalStepand a ApprovalStep.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Edom.CRR.ApprovalStepReferencesTargetFailureStep GetLink( global::Edom.CRR.ApprovalStep source, global::Edom.CRR.ApprovalStep target )
		{
			global::System.Collections.Generic.IList<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Edom.CRR.ApprovalStepReferencesTargetFailureStep>(source, global::Edom.CRR.ApprovalStepReferencesTargetFailureStep.SourceApprovalStepDomainRoleId);
			foreach ( global::Edom.CRR.ApprovalStepReferencesTargetFailureStep link in links )
			{
				if ( target.Equals(link.TargetApprovalStep) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
