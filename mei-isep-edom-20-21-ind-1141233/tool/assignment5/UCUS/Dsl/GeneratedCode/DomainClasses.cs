//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.UCUS
{
	/// <summary>
	/// DomainClass Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.Model.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.Model.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1cfa6cc0-a5c2-41f3-9bb7-119e2d96e73b")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1cfa6cc0, 0xa5c2, 0x41f3, 0x9b, 0xb7, 0x11, 0x9e, 0x2d, 0x96, 0xe7, 0x3b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region UseCases opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UseCases.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UseCase> UseCases
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(global::Company.UCUS.ModelHasUseCases.ModelDomainRoleId);
			}
		}
		#endregion
		#region Actors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actors.
		/// Description for Company.UCUS.ModelHasActors.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actor> Actors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(global::Company.UCUS.ModelHasActors.ModelDomainRoleId);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for Company.UCUS.ModelHasSubjects.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::Company.UCUS.ModelHasSubjects.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.UCUS.UseCase.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.UCUS.Actor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.UCUS.Subject.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.UCUS.UseCase sourceUseCase1 = sourceElement as global::Company.UCUS.UseCase;
			if (sourceUseCase1 != null)
			{
				// Create link for path ModelHasUseCases.UseCases
				this.UseCases.Add(sourceUseCase1);

				return;
			}
				
			global::Company.UCUS.Actor sourceActor2 = sourceElement as global::Company.UCUS.Actor;
			if (sourceActor2 != null)
			{
				// Create link for path ModelHasActors.Actors
				this.Actors.Add(sourceActor2);

				return;
			}
				
			global::Company.UCUS.Subject sourceSubject3 = sourceElement as global::Company.UCUS.Subject;
			if (sourceSubject3 != null)
			{
				// Create link for path ModelHasSubjects.Subjects
				this.Subjects.Add(sourceSubject3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.UCUS.UseCase sourceUseCase1 = sourceElement as global::Company.UCUS.UseCase;
			if (sourceUseCase1 != null)
			{
				// Delete link for path ModelHasUseCases.UseCases
				
				foreach (DslModeling::ElementLink link in global::Company.UCUS.ModelHasUseCases.GetLinks((global::Company.UCUS.Model)this, sourceUseCase1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.UCUS.ModelHasUseCases.ModelDomainRoleId, global::Company.UCUS.ModelHasUseCases.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.UCUS.Actor sourceActor2 = sourceElement as global::Company.UCUS.Actor;
			if (sourceActor2 != null)
			{
				// Delete link for path ModelHasActors.Actors
				
				foreach (DslModeling::ElementLink link in global::Company.UCUS.ModelHasActors.GetLinks((global::Company.UCUS.Model)this, sourceActor2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.UCUS.ModelHasActors.ModelDomainRoleId, global::Company.UCUS.ModelHasActors.ActorDomainRoleId);
				}

				return;
			}
				
			global::Company.UCUS.Subject sourceSubject3 = sourceElement as global::Company.UCUS.Subject;
			if (sourceSubject3 != null)
			{
				// Delete link for path ModelHasSubjects.Subjects
				
				foreach (DslModeling::ElementLink link in global::Company.UCUS.ModelHasSubjects.GetLinks((global::Company.UCUS.Model)this, sourceSubject3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.UCUS.ModelHasSubjects.ModelDomainRoleId, global::Company.UCUS.ModelHasSubjects.SubjectDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainClass UseCase
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.UseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.UseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4e13717a-040f-4d3b-a46d-fc93f2c27241")]
	public partial class UseCase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UseCase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e13717a, 0x040f, 0x4d3b, 0xa4, 0x6d, 0xfc, 0x93, 0xf2, 0xc2, 0x72, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UseCase(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UseCase(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0de8dd80, 0x7268, 0x4d9c, 0xb7, 0xad, 0x2c, 0xea, 0x0c, 0x0a, 0x5d, 0xad);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.UCUS.UseCase.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCase/Name.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCase/Name.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("0de8dd80-7268-4d9c-b7ad-2cea0c0a5dad")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UseCase.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<UseCase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UseCase.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UseCase.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(UseCase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UseCase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.ModelHasUseCases.ElementDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.ModelHasUseCases.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region TargetIncludedUseCases opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetIncludedUseCases.
		/// Description for Company.UCUS.UseCaseIncludesUseCase.SourceUseCase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UseCase> TargetIncludedUseCases
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(global::Company.UCUS.UseCaseIncludesUseCase.SourceUseCaseDomainRoleId);
			}
		}
		#endregion
		#region SourceIncludeUseCase opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceIncludeUseCase.
		/// Description for Company.UCUS.UseCaseIncludesUseCase.TargetUseCase
		/// </summary>
		public virtual UseCase SourceIncludeUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.UseCaseIncludesUseCase.TargetUseCaseDomainRoleId) as UseCase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.UseCaseIncludesUseCase.TargetUseCaseDomainRoleId, value);
			}
		}
		#endregion
		#region TargetExtendedUseCases opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetExtendedUseCases.
		/// Description for Company.UCUS.UseCaseExtendsUseCase.SourceUseCase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UseCase> TargetExtendedUseCases
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(global::Company.UCUS.UseCaseExtendsUseCase.SourceUseCaseDomainRoleId);
			}
		}
		#endregion
		#region SourceExtendUseCase opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceExtendUseCase.
		/// Description for Company.UCUS.UseCaseExtendsUseCase.TargetUseCase
		/// </summary>
		public virtual UseCase SourceExtendUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.UseCaseExtendsUseCase.TargetUseCaseDomainRoleId) as UseCase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.UseCaseExtendsUseCase.TargetUseCaseDomainRoleId, value);
			}
		}
		#endregion
		#region Actor opposite domain role accessor
		/// <summary>
		/// Gets or sets Actor.
		/// Description for Company.UCUS.ActorPerformsUseCase.UseCase
		/// </summary>
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.ActorPerformsUseCase.UseCaseDomainRoleId) as Actor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.ActorPerformsUseCase.UseCaseDomainRoleId, value);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		/// <summary>
		/// Gets or sets Subject.
		/// Description for Company.UCUS.SubjectReferencesUseCase.UseCase
		/// </summary>
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.SubjectReferencesUseCase.UseCaseDomainRoleId) as Subject;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.SubjectReferencesUseCase.UseCaseDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainClass Actor
	/// Description for Company.UCUS.Actor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.Actor.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.Actor.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4257d63c-ecfa-4317-8606-0eb92e48b45e")]
	public partial class Actor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4257d63c, 0xecfa, 0x4317, 0x86, 0x06, 0x0e, 0xb9, 0x2e, 0x48, 0xb4, 0x5e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x37a112dc, 0x8596, 0x474c, 0xa8, 0x17, 0x57, 0xf4, 0xed, 0xef, 0x95, 0x0e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.UCUS.Actor.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.Actor/Name.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.Actor/Name.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("37a112dc-8596-474c-a817-57f4edef950e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Actor.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Actor, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Actor.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Actor.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Actor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Actor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Company.UCUS.ModelHasActors.Actor
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.ModelHasActors.ActorDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.ModelHasActors.ActorDomainRoleId, value);
			}
		}
		#endregion
		#region UseCase opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UseCase.
		/// Description for Company.UCUS.ActorPerformsUseCase.Actor
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UseCase> UseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(global::Company.UCUS.ActorPerformsUseCase.ActorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainClass Subject
	/// Description for Company.UCUS.Subject
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.Subject.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.Subject.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("279244ab-a801-4261-84b3-2e65cbfa6ec2")]
	public partial class Subject : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Subject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x279244ab, 0xa801, 0x4261, 0x84, 0xb3, 0x2e, 0x65, 0xcb, 0xfa, 0x6e, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3954e602, 0x15aa, 0x4159, 0xb9, 0x1f, 0xc9, 0xb1, 0xdc, 0x00, 0x55, 0xd5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.UCUS.Subject.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.Subject/Name.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.Subject/Name.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3954e602-15aa-4159-b91f-c9b1dc0055d5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Subject.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Subject, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Subject.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Subject.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Subject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Subject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Company.UCUS.ModelHasSubjects.Subject
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.UCUS.ModelHasSubjects.SubjectDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.UCUS.ModelHasSubjects.SubjectDomainRoleId, value);
			}
		}
		#endregion
		#region UseCases opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UseCases.
		/// Description for Company.UCUS.SubjectReferencesUseCase.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UseCase> UseCases
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(global::Company.UCUS.SubjectReferencesUseCase.SubjectDomainRoleId);
			}
		}
		#endregion
	}
}
