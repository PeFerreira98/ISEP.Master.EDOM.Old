//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainClass Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7b15fa5-8dc4-4462-8378-a044261235d1")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7b15fa5, 0x8dc4, 0x4462, 0x83, 0x78, 0xa0, 0x44, 0x26, 0x12, 0x35, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
			}
		}
		#endregion
		#region Users opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Users.
		/// Description for EDOM.CommentReviewRate.ModelHasUsers.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> Users
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::EDOM.CommentReviewRate.ModelHasUsers.ModelDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EDOM.CommentReviewRate.Subject.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EDOM.CommentReviewRate.User.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EDOM.CommentReviewRate.Field.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EDOM.CommentReviewRate.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::EDOM.CommentReviewRate.Subject sourceSubject1 = sourceElement as global::EDOM.CommentReviewRate.Subject;
			if (sourceSubject1 != null)
			{
				// Create link for path ModelHasSubjects.Subjects
				this.Subjects.Add(sourceSubject1);

				return;
			}
				
			global::EDOM.CommentReviewRate.User sourceUser2 = sourceElement as global::EDOM.CommentReviewRate.User;
			if (sourceUser2 != null)
			{
				// Create link for path ModelHasUsers.Users
				this.Users.Add(sourceUser2);

				return;
			}
				
			global::EDOM.CommentReviewRate.Field sourceField3 = sourceElement as global::EDOM.CommentReviewRate.Field;
			if (sourceField3 != null)
			{
				// Create link for path ModelHasFields.Fields
				this.Fields.Add(sourceField3);

				return;
			}
				
			global::EDOM.CommentReviewRate.Comment sourceComment4 = sourceElement as global::EDOM.CommentReviewRate.Comment;
			if (sourceComment4 != null)
			{
				// Create link for path ModelHasComments.Comments
				this.Comments.Add(sourceComment4);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::EDOM.CommentReviewRate.Subject sourceSubject1 = sourceElement as global::EDOM.CommentReviewRate.Subject;
			if (sourceSubject1 != null)
			{
				// Delete link for path ModelHasSubjects.Subjects
				
				foreach (DslModeling::ElementLink link in global::EDOM.CommentReviewRate.ModelHasSubjects.GetLinks((global::EDOM.CommentReviewRate.Model)this, sourceSubject1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId, global::EDOM.CommentReviewRate.ModelHasSubjects.ElementDomainRoleId);
				}

				return;
			}
				
			global::EDOM.CommentReviewRate.User sourceUser2 = sourceElement as global::EDOM.CommentReviewRate.User;
			if (sourceUser2 != null)
			{
				// Delete link for path ModelHasUsers.Users
				
				foreach (DslModeling::ElementLink link in global::EDOM.CommentReviewRate.ModelHasUsers.GetLinks((global::EDOM.CommentReviewRate.Model)this, sourceUser2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EDOM.CommentReviewRate.ModelHasUsers.ModelDomainRoleId, global::EDOM.CommentReviewRate.ModelHasUsers.UserDomainRoleId);
				}

				return;
			}
				
			global::EDOM.CommentReviewRate.Field sourceField3 = sourceElement as global::EDOM.CommentReviewRate.Field;
			if (sourceField3 != null)
			{
				// Delete link for path ModelHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::EDOM.CommentReviewRate.ModelHasFields.GetLinks((global::EDOM.CommentReviewRate.Model)this, sourceField3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId, global::EDOM.CommentReviewRate.ModelHasFields.FieldDomainRoleId);
				}

				return;
			}
				
			global::EDOM.CommentReviewRate.Comment sourceComment4 = sourceElement as global::EDOM.CommentReviewRate.Comment;
			if (sourceComment4 != null)
			{
				// Delete link for path ModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::EDOM.CommentReviewRate.ModelHasComments.GetLinks((global::EDOM.CommentReviewRate.Model)this, sourceComment4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId, global::EDOM.CommentReviewRate.ModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainClass Subject
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Subject.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Subject.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("edc75acf-b8be-40b6-abd0-b9174dc6c565")]
	public partial class Subject : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Subject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xedc75acf, 0xb8be, 0x40b6, 0xab, 0xd0, 0xb9, 0x17, 0x4d, 0xc6, 0xc5, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9c6091ae, 0xf521, 0x4258, 0xbb, 0x57, 0x00, 0xe2, 0xb2, 0x59, 0x25, 0x10);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EDOM.CommentReviewRate.Subject.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Subject/Name.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Subject/Name.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9c6091ae-f521-4258-bb57-00e2b2592510")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Subject.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Subject, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Subject.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Subject.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Subject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Subject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasSubjects.ElementDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasSubjects.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
			}
		}
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainClass User
	/// Description for EDOM.CommentReviewRate.User
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.User.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.User.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("89048492-fba1-496b-ba01-c3d03427837d")]
	public partial class User : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// User domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89048492, 0xfba1, 0x496b, 0xba, 0x01, 0xc3, 0xd0, 0x34, 0x27, 0x83, 0x7d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf3779bf9, 0xa443, 0x45f5, 0xbd, 0x7d, 0xc7, 0x8d, 0x59, 0x01, 0x77, 0xd4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EDOM.CommentReviewRate.User.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.User/Name.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.User/Name.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f3779bf9-a443-45f5-bd7d-c78d590177d4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the User.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<User, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the User.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the User.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(User element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(User element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for EDOM.CommentReviewRate.ModelHasUsers.User
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasUsers.UserDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasUsers.UserDomainRoleId, value);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Description for EDOM.CommentReviewRate.CommentHasUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::EDOM.CommentReviewRate.CommentHasUser.UserDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for EDOM.CommentReviewRate.UserHasFields.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::EDOM.CommentReviewRate.UserHasFields.UserDomainRoleId);
			}
		}
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainClass Field
	/// Description for EDOM.CommentReviewRate.Field
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("58fd5d07-2b42-4745-9fe5-624bea20b21b")]
	public partial class Field : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x58fd5d07, 0x2b42, 0x4745, 0x9f, 0xe5, 0x62, 0x4b, 0xea, 0x20, 0xb2, 0x1b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6371dbf3, 0xf13a, 0x4753, 0xb9, 0x08, 0x9e, 0x58, 0x5b, 0x4d, 0x84, 0x07);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EDOM.CommentReviewRate.Field.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Field/Name.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Field/Name.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6371dbf3-f13a-4753-b908-9e585b4d8407")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region type domain property code
		
		/// <summary>
		/// type domain property Id.
		/// </summary>
		public static readonly global::System.Guid typeDomainPropertyId = new global::System.Guid(0x16b00cbb, 0xcd9f, 0x4c2b, 0xbd, 0x33, 0x8b, 0x8d, 0xc8, 0xb6, 0xb3, 0x6b);
		
		/// <summary>
		/// Storage for type
		/// </summary>
		private FieldTypesEnum typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of type domain property.
		/// Description for EDOM.CommentReviewRate.Field.Type
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Field/type.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Field/type.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("16b00cbb-cd9f-4c2b-bd33-8b8dc8b6b36b")]
		public FieldTypesEnum type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				typePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.type domain property.
		/// </summary>
		internal sealed partial class typePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, FieldTypesEnum>
		{
			private typePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.type domain property value handler.
			/// </summary>
			public static readonly typePropertyHandler Instance = new typePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return typeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed FieldTypesEnum GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, FieldTypesEnum newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				FieldTypesEnum oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Field
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasFields.FieldDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasFields.FieldDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::EDOM.CommentReviewRate.SubjectHasFields.FieldDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::EDOM.CommentReviewRate.CommentHasFields.FieldDomainRoleId);
			}
		}
		#endregion
		#region Users opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Users.
		/// Description for EDOM.CommentReviewRate.UserHasFields.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> Users
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::EDOM.CommentReviewRate.UserHasFields.FieldDomainRoleId);
			}
		}
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainClass Comment
	/// Description for EDOM.CommentReviewRate.Comment
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("243731a3-124f-404e-9df2-bff9854b5699")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x243731a3, 0x124f, 0x404e, 0x9d, 0xf2, 0xbf, 0xf9, 0x85, 0x4b, 0x56, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xeb89e202, 0xb4c5, 0x4957, 0xa3, 0xf6, 0x69, 0xa7, 0xa1, 0x61, 0xc0, 0x89);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EDOM.CommentReviewRate.Comment.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.Comment/Name.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.Comment/Name.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("eb89e202-b4c5-4957-a3f6-69a7a161c089")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Comment
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasComments.CommentDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.ModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		/// <summary>
		/// Gets or sets Subject.
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Comment
		/// </summary>
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.SubjectHasComments.CommentDomainRoleId) as Subject;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.SubjectHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Replies opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Replies.
		/// Description for EDOM.CommentReviewRate.CommentHasComments.SourceComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Replies
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
			}
		}
		#endregion
		#region ParentComment opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentComment.
		/// Description for EDOM.CommentReviewRate.CommentHasComments.TargetComment
		/// </summary>
		public virtual Comment ParentComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.CommentHasComments.TargetCommentDomainRoleId) as Comment;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.CommentHasComments.TargetCommentDomainRoleId, value);
			}
		}
		#endregion
		#region User opposite domain role accessor
		/// <summary>
		/// Gets or sets User.
		/// Description for EDOM.CommentReviewRate.CommentHasUser.Comment
		/// </summary>
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EDOM.CommentReviewRate.CommentHasUser.CommentDomainRoleId) as User;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EDOM.CommentReviewRate.CommentHasUser.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
