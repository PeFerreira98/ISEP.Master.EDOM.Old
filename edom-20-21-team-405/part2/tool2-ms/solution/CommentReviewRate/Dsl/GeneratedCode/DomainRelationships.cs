//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasSubjects
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("71ca2133-95c3-44d7-b954-e8758a332d60")]
	public partial class ModelHasSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71ca2133, 0x95c3, 0x44d7, 0xb9, 0x54, 0xe8, 0x75, 0x8a, 0x33, 0x2d, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSubjects link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Subject to use as the target of the relationship.</param>
		public ModelHasSubjects(Model source, Subject target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSubjects.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSubjects.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x6bb7b12b, 0x0af0, 0x4c1a, 0xa0, 0x7b, 0x70, 0x41, 0xcc, 0x6b, 0x1f, 0x89);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasSubjects/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6bb7b12b-0af0-4c1a-a07b-7041cc6b1f89")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Subject
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Subject element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Subject element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc839d946, 0xd58a, 0x4a78, 0x9e, 0xce, 0x75, 0xff, 0x4c, 0x6d, 0x0f, 0x16);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects/Element.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects/Element.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasSubjects/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c839d946-d58a-4a78-9ece-75ff4c6d0f16")]
		public virtual Subject Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Model
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubjects(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSubjects links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasSubjects> GetLinksToSubjects ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(modelInstance, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelHasSubjects link to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasSubjects GetLinkToModel (global::EDOM.CommentReviewRate.Subject elementInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(elementInstance, global::EDOM.CommentReviewRate.ModelHasSubjects.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSubjects instance accessors
		
		/// <summary>
		/// Get any ModelHasSubjects links between a given Model and a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasSubjects> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Subject target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasSubjects> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasSubjects>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(source, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSubjects link between a given Modeland a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasSubjects GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Subject target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(source, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasFields
	/// Description for EDOM.CommentReviewRate.ModelHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ec3c78ba-0610-47cd-8c46-0d1ca622d54d")]
	public partial class ModelHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xec3c78ba, 0x0610, 0x47cd, 0x8c, 0x46, 0x0d, 0x1c, 0xa6, 0x22, 0xd5, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasFields link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ModelHasFields(Model source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasFields.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xbc1a56b9, 0x3bb6, 0x4972, 0x8f, 0x5f, 0x8d, 0xa5, 0x04, 0xef, 0xa6, 0x61);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasFields/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bc1a56b9-3bb6-4972-8f5f-8da504efa661")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Field
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Field element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldDomainRoleId, newModel);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xdd60dfdb, 0x1f46, 0x4bee, 0xb1, 0x32, 0x41, 0x77, 0x3d, 0xa2, 0xc3, 0xc5);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasFields/Field.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dd60dfdb-1f46-4bee-b132-41773da2c3c5")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Model
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasFields links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(modelInstance, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the ModelHasFields link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasFields GetLinkToModel (global::EDOM.CommentReviewRate.Field fieldInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(fieldInstance, global::EDOM.CommentReviewRate.ModelHasFields.FieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Field not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasFields instance accessors
		
		/// <summary>
		/// Get any ModelHasFields links between a given Model and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasFields> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(source, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasFields link between a given Modeland a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasFields GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(source, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasComments
	/// Description for EDOM.CommentReviewRate.ModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ccb4fefc-aefa-495d-8299-adb5e2826ac9")]
	public partial class ModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xccb4fefc, 0xaefa, 0x495d, 0x82, 0x99, 0xad, 0xb5, 0xe2, 0x82, 0x6a, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasComments link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelHasComments(Model source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasComments.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x614cd0d0, 0xd457, 0x4571, 0xa3, 0x23, 0x25, 0xd2, 0xa0, 0x54, 0x78, 0x54);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasComments/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("614cd0d0-d457-4571-a323-25d2a0547854")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Comment
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Comment element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xbb77066b, 0x55ca, 0x48db, 0x8b, 0x9d, 0xf5, 0x88, 0xe6, 0x17, 0x7b, 0x54);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bb77066b-55ca-48db-8b9d-f588e6177b54")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Model
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasComments links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasComments> GetLinksToComments ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(modelInstance, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasComments GetLinkToModel (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(commentInstance, global::EDOM.CommentReviewRate.ModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasComments instance accessors
		
		/// <summary>
		/// Get any ModelHasComments links between a given Model and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasComments> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(source, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasComments link between a given Modeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasComments GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(source, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship SubjectHasComments
	/// Description for EDOM.CommentReviewRate.SubjectHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5e4557b-8743-4de3-adfd-2c03bfc7748d")]
	public partial class SubjectHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5e4557b, 0x8743, 0x4de3, 0xad, 0xfd, 0x2c, 0x03, 0xbf, 0xc7, 0x74, 0x8d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectHasComments link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public SubjectHasComments(Subject source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectHasComments.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xa37d4aad, 0xf791, 0x471d, 0x89, 0x61, 0x99, 0xfc, 0x5e, 0x1c, 0xe2, 0xc8);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments/Subject.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments/Subject.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasComments/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a37d4aad-f791-471d-8961-99fc5e1ce2c8")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a Comment
		/// <summary>
		/// Gets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Subject GetSubject(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Subject;
		}
		
		/// <summary>
		/// Sets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubject(Comment element, Subject newSubject)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newSubject);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x5bb5394d, 0x152c, 0x4163, 0xaf, 0xb7, 0x95, 0x68, 0x1d, 0x8d, 0xae, 0x09);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasComments/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5bb5394d-152c-4163-afb7-95681d8dae09")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Subject
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectHasComments links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasComments> GetLinksToComments ( global::EDOM.CommentReviewRate.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(subjectInstance, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the SubjectHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasComments GetLinkToSubject (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(commentInstance, global::EDOM.CommentReviewRate.SubjectHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubjectHasComments instance accessors
		
		/// <summary>
		/// Get any SubjectHasComments links between a given Subject and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasComments> GetLinks( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(source, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectHasComments link between a given Subjectand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasComments GetLink( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(source, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasComments
	/// Description for EDOM.CommentReviewRate.CommentHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("24a825bf-5822-45aa-af76-2bb7cd2eb1e0")]
	public partial class CommentHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24a825bf, 0x5822, 0x45aa, 0xaf, 0x76, 0x2b, 0xb7, 0xcd, 0x2e, 0xb1, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasComments link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public CommentHasComments(Comment source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasComments.SourceCommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasComments.TargetCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceComment domain role code
		
		/// <summary>
		/// SourceComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceCommentDomainRoleId = new global::System.Guid(0x0a9636a9, 0xc065, 0x42b2, 0x9f, 0xa9, 0x69, 0x86, 0x19, 0xd8, 0xfe, 0x4c);
		
		/// <summary>
		/// DomainRole SourceComment
		/// Description for EDOM.CommentReviewRate.CommentHasComments.SourceComment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments/SourceComment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments/SourceComment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Replies", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasComments/SourceComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a9636a9-c065-42b2-9fa9-698619d8fe4c")]
		public virtual Comment SourceComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentComment of a Comment
		/// <summary>
		/// Gets ParentComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetParentComment(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetCommentDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets ParentComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentComment(Comment element, Comment newSourceComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetCommentDomainRoleId, newSourceComment);
		}
		#endregion
		#region TargetComment domain role code
		
		/// <summary>
		/// TargetComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetCommentDomainRoleId = new global::System.Guid(0xf35f3e59, 0x0852, 0x49e6, 0x8f, 0x00, 0x01, 0x50, 0x83, 0xb1, 0x8f, 0xe1);
		
		/// <summary>
		/// DomainRole TargetComment
		/// Description for EDOM.CommentReviewRate.CommentHasComments.TargetComment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments/TargetComment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments/TargetComment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentComment", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasComments/TargetComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f35f3e59-0852-49e6-8f00-015083b18fe1")]
		public virtual Comment TargetComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Replies of a Comment
		/// <summary>
		/// Gets a list of Replies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetReplies(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SourceCommentDomainRoleId);
		}
		#endregion
		#region SourceComment link accessor
		/// <summary>
		/// Get the list of CommentHasComments links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasComments> GetLinksToReplies ( global::EDOM.CommentReviewRate.Comment sourceCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(sourceCommentInstance, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
		}
		#endregion
		#region TargetComment link accessor
		/// <summary>
		/// Get the CommentHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasComments GetLinkToParentComment (global::EDOM.CommentReviewRate.Comment targetCommentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(targetCommentInstance, global::EDOM.CommentReviewRate.CommentHasComments.TargetCommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetComment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommentHasComments instance accessors
		
		/// <summary>
		/// Get any CommentHasComments links between a given Comment and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasComments> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(source, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasComments link in links )
			{
				if ( target.Equals(link.TargetComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasComments link between a given Commentand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasComments GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(source, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasComments link in links )
			{
				if ( target.Equals(link.TargetComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship SubjectHasFields
	/// Description for EDOM.CommentReviewRate.SubjectHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c0053609-fd7b-4527-b9f4-8ab958c84a4f")]
	public partial class SubjectHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0053609, 0xfd7b, 0x4527, 0xb9, 0xf4, 0x8a, 0xb9, 0x58, 0xc8, 0x4a, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectHasFields link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public SubjectHasFields(Subject source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectHasFields.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xacdbf991, 0x792f, 0x43b4, 0xab, 0x0c, 0xa7, 0xf8, 0x8c, 0x6e, 0x56, 0x96);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields/Subject.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields/Subject.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasFields/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acdbf991-792f-43b4-ab0c-a7f88c6e5696")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Field
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubjects(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x2370ba87, 0xdb69, 0x44fd, 0xbd, 0xd2, 0x83, 0xf1, 0xe2, 0xc7, 0x9b, 0xd4);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subjects", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2370ba87-db69-44fd-bdd2-83f1e2c79bd4")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Subject
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectHasFields links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(subjectInstance, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of SubjectHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinksToSubjects ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(fieldInstance, global::EDOM.CommentReviewRate.SubjectHasFields.FieldDomainRoleId);
		}
		#endregion
		#region SubjectHasFields instance accessors
		
		/// <summary>
		/// Get any SubjectHasFields links between a given Subject and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinks( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(source, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectHasFields link between a given Subjectand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasFields GetLink( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(source, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasFields
	/// Description for EDOM.CommentReviewRate.CommentHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5c97fa83-f2c4-473f-88ca-27b762e53e1a")]
	public partial class CommentHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c97fa83, 0xf2c4, 0x473f, 0x88, 0xca, 0x27, 0xb7, 0x62, 0xe5, 0x3e, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasFields link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public CommentHasFields(Comment source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasFields.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x85dcb6ec, 0x35bb, 0x4aab, 0x8c, 0x37, 0xa5, 0xac, 0x88, 0xd6, 0x34, 0x44);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasFields/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("85dcb6ec-35bb-4aab-8c37-a5ac88d63444")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Field
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x0123145c, 0xac6a, 0x4f8a, 0x91, 0x23, 0x86, 0x4b, 0x10, 0x5e, 0x38, 0xd0);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0123145c-ac6a-4f8a-9123-864b105e38d0")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Comment
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentHasFields links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(commentInstance, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of CommentHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinksToComments ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(fieldInstance, global::EDOM.CommentReviewRate.CommentHasFields.FieldDomainRoleId);
		}
		#endregion
		#region CommentHasFields instance accessors
		
		/// <summary>
		/// Get any CommentHasFields links between a given Comment and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(source, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasFields link between a given Commentand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasFields GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(source, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasRatings
	/// Description for EDOM.CommentReviewRate.ModelHasRatings
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasRatings.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasRatings.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f938c3fb-854e-4bab-bb98-b07c20e8db84")]
	public partial class ModelHasRatings : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasRatings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf938c3fb, 0x854e, 0x4bab, 0xbb, 0x98, 0xb0, 0x7c, 0x20, 0xe8, 0xdb, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasRatings link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Rating to use as the target of the relationship.</param>
		public ModelHasRatings(Model source, Rating target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasRatings.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasRatings.RatingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRatings(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRatings(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRatings(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRatings(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xe2ec4aeb, 0xbe80, 0x489f, 0x9c, 0xba, 0xa6, 0x3a, 0xac, 0x3c, 0xfd, 0x84);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasRatings.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasRatings/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasRatings/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ratings", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasRatings/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e2ec4aeb-be80-489f-9cba-a63aac3cfd84")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Rating
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Rating element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RatingDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Rating element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RatingDomainRoleId, newModel);
		}
		#endregion
		#region Rating domain role code
		
		/// <summary>
		/// Rating domain role Id.
		/// </summary>
		public static readonly global::System.Guid RatingDomainRoleId = new global::System.Guid(0x1880610e, 0x13ab, 0x437a, 0xb0, 0xf6, 0xf1, 0xdd, 0xc8, 0x45, 0x9b, 0xa9);
		
		/// <summary>
		/// DomainRole Rating
		/// Description for EDOM.CommentReviewRate.ModelHasRatings.Rating
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasRatings/Rating.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasRatings/Rating.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasRatings/Rating.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1880610e-13ab-437a-b0f6-f1ddc8459ba9")]
		public virtual Rating Rating
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rating)DslModeling::DomainRoleInfo.GetRolePlayer(this, RatingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RatingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ratings of a Model
		/// <summary>
		/// Gets a list of Ratings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Rating> GetRatings(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Rating>, Rating>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasRatings links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasRatings> GetLinksToRatings ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasRatings>(modelInstance, global::EDOM.CommentReviewRate.ModelHasRatings.ModelDomainRoleId);
		}
		#endregion
		#region Rating link accessor
		/// <summary>
		/// Get the ModelHasRatings link to a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasRatings GetLinkToModel (global::EDOM.CommentReviewRate.Rating ratingInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasRatings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasRatings>(ratingInstance, global::EDOM.CommentReviewRate.ModelHasRatings.RatingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Rating not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasRatings instance accessors
		
		/// <summary>
		/// Get any ModelHasRatings links between a given Model and a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasRatings> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Rating target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasRatings> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasRatings>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasRatings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasRatings>(source, global::EDOM.CommentReviewRate.ModelHasRatings.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasRatings link in links )
			{
				if ( target.Equals(link.Rating) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasRatings link between a given Modeland a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasRatings GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Rating target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasRatings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasRatings>(source, global::EDOM.CommentReviewRate.ModelHasRatings.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasRatings link in links )
			{
				if ( target.Equals(link.Rating) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasRating
	/// Description for EDOM.CommentReviewRate.CommentHasRating
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasRating.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasRating.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("98251165-1df6-4166-ae71-fc61475781f0")]
	public partial class CommentHasRating : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasRating domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98251165, 0x1df6, 0x4166, 0xae, 0x71, 0xfc, 0x61, 0x47, 0x57, 0x81, 0xf0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasRating link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Rating to use as the target of the relationship.</param>
		public CommentHasRating(Comment source, Rating target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasRating.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasRating.RatingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasRating(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasRating(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasRating(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasRating(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x1768a0f1, 0xcf90, 0x43b8, 0x81, 0x86, 0x2f, 0x21, 0xb1, 0x7a, 0xce, 0xd8);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.CommentHasRating.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasRating/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasRating/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Rating", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasRating/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1768a0f1-cf90-43b8-8186-2f21b17aced8")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Commented of a Rating
		/// <summary>
		/// Gets a list of Commented.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetCommented(Rating element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, RatingDomainRoleId);
		}
		#endregion
		#region Rating domain role code
		
		/// <summary>
		/// Rating domain role Id.
		/// </summary>
		public static readonly global::System.Guid RatingDomainRoleId = new global::System.Guid(0x459d72f8, 0x79ab, 0x4399, 0xa9, 0x6e, 0xc6, 0x37, 0xe4, 0x31, 0x9a, 0xde);
		
		/// <summary>
		/// DomainRole Rating
		/// Description for EDOM.CommentReviewRate.CommentHasRating.Rating
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasRating/Rating.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasRating/Rating.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Commented", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasRating/Rating.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("459d72f8-79ab-4399-a96e-c637e4319ade")]
		public virtual Rating Rating
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rating)DslModeling::DomainRoleInfo.GetRolePlayer(this, RatingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RatingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rating of a Comment
		/// <summary>
		/// Gets Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Rating GetRating(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Rating;
		}
		
		/// <summary>
		/// Sets Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRating(Comment element, Rating newRating)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newRating);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the CommentHasRating link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasRating GetLinkToRating (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasRating> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasRating>(commentInstance, global::EDOM.CommentReviewRate.CommentHasRating.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Rating link accessor
		/// <summary>
		/// Get the list of CommentHasRating links to a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasRating> GetLinksToCommented ( global::EDOM.CommentReviewRate.Rating ratingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasRating>(ratingInstance, global::EDOM.CommentReviewRate.CommentHasRating.RatingDomainRoleId);
		}
		#endregion
		#region CommentHasRating instance accessors
		
		/// <summary>
		/// Get any CommentHasRating links between a given Comment and a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasRating> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Rating target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasRating> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasRating>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasRating> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasRating>(source, global::EDOM.CommentReviewRate.CommentHasRating.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasRating link in links )
			{
				if ( target.Equals(link.Rating) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasRating link between a given Commentand a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasRating GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Rating target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasRating> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasRating>(source, global::EDOM.CommentReviewRate.CommentHasRating.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasRating link in links )
			{
				if ( target.Equals(link.Rating) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasValidations
	/// Description for EDOM.CommentReviewRate.ModelHasValidations
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasValidations.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasValidations.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1ec4d78f-318d-4254-a6e6-f9623ba31c3a")]
	public partial class ModelHasValidations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasValidations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ec4d78f, 0x318d, 0x4254, 0xa6, 0xe6, 0xf9, 0x62, 0x3b, 0xa3, 0x1c, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasValidations link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Validation to use as the target of the relationship.</param>
		public ModelHasValidations(Model source, Validation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasValidations.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasValidations.ValidationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasValidations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasValidations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasValidations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasValidations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xc20a7212, 0x98ef, 0x4582, 0xa4, 0xd4, 0xe5, 0x29, 0xf8, 0x3e, 0x12, 0x7d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasValidations.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasValidations/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasValidations/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Validations", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasValidations/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c20a7212-98ef-4582-a4d4-e529f83e127d")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Validation
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Validation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValidationDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Validation element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValidationDomainRoleId, newModel);
		}
		#endregion
		#region Validation domain role code
		
		/// <summary>
		/// Validation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValidationDomainRoleId = new global::System.Guid(0xd7ab5320, 0xd1cd, 0x48be, 0x83, 0xe7, 0x59, 0x5e, 0x11, 0xc3, 0xd6, 0x03);
		
		/// <summary>
		/// DomainRole Validation
		/// Description for EDOM.CommentReviewRate.ModelHasValidations.Validation
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasValidations/Validation.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasValidations/Validation.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasValidations/Validation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d7ab5320-d1cd-48be-83e7-595e11c3d603")]
		public virtual Validation Validation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Validation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValidationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValidationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Validations of a Model
		/// <summary>
		/// Gets a list of Validations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Validation> GetValidations(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Validation>, Validation>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasValidations links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasValidations> GetLinksToValidations ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasValidations>(modelInstance, global::EDOM.CommentReviewRate.ModelHasValidations.ModelDomainRoleId);
		}
		#endregion
		#region Validation link accessor
		/// <summary>
		/// Get the ModelHasValidations link to a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasValidations GetLinkToModel (global::EDOM.CommentReviewRate.Validation validationInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasValidations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasValidations>(validationInstance, global::EDOM.CommentReviewRate.ModelHasValidations.ValidationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Validation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasValidations instance accessors
		
		/// <summary>
		/// Get any ModelHasValidations links between a given Model and a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasValidations> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Validation target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasValidations> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasValidations>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasValidations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasValidations>(source, global::EDOM.CommentReviewRate.ModelHasValidations.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasValidations link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasValidations link between a given Modeland a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasValidations GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Validation target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasValidations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasValidations>(source, global::EDOM.CommentReviewRate.ModelHasValidations.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasValidations link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasValidation
	/// Description for EDOM.CommentReviewRate.CommentHasValidation
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasValidation.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasValidation.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5618c94d-f519-443f-a5bb-f83acd2e1b26")]
	public partial class CommentHasValidation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasValidation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5618c94d, 0xf519, 0x443f, 0xa5, 0xbb, 0xf8, 0x3a, 0xcd, 0x2e, 0x1b, 0x26);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasValidation link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Validation to use as the target of the relationship.</param>
		public CommentHasValidation(Comment source, Validation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasValidation.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasValidation.ValidationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasValidation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasValidation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasValidation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasValidation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xd49eca21, 0xc971, 0x439a, 0xa7, 0xc7, 0x5d, 0x7c, 0xae, 0xdb, 0xad, 0xe6);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.CommentHasValidation.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasValidation/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasValidation/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Validation", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasValidation/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d49eca21-c971-439a-a7c7-5d7caedbade6")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Commented of a Validation
		/// <summary>
		/// Gets a list of Commented.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetCommented(Validation element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ValidationDomainRoleId);
		}
		#endregion
		#region Validation domain role code
		
		/// <summary>
		/// Validation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValidationDomainRoleId = new global::System.Guid(0xf833757e, 0xe85a, 0x4b3d, 0xbd, 0xa9, 0x38, 0xa2, 0x13, 0x01, 0x7a, 0xcb);
		
		/// <summary>
		/// DomainRole Validation
		/// Description for EDOM.CommentReviewRate.CommentHasValidation.Validation
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasValidation/Validation.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasValidation/Validation.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Commented", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasValidation/Validation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f833757e-e85a-4b3d-bda9-38a213017acb")]
		public virtual Validation Validation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Validation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValidationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValidationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Validation of a Comment
		/// <summary>
		/// Gets Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Validation GetValidation(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Validation;
		}
		
		/// <summary>
		/// Sets Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValidation(Comment element, Validation newValidation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newValidation);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the CommentHasValidation link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasValidation GetLinkToValidation (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasValidation>(commentInstance, global::EDOM.CommentReviewRate.CommentHasValidation.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Validation link accessor
		/// <summary>
		/// Get the list of CommentHasValidation links to a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasValidation> GetLinksToCommented ( global::EDOM.CommentReviewRate.Validation validationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasValidation>(validationInstance, global::EDOM.CommentReviewRate.CommentHasValidation.ValidationDomainRoleId);
		}
		#endregion
		#region CommentHasValidation instance accessors
		
		/// <summary>
		/// Get any CommentHasValidation links between a given Comment and a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasValidation> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Validation target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasValidation> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasValidation>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasValidation>(source, global::EDOM.CommentReviewRate.CommentHasValidation.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasValidation link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasValidation link between a given Commentand a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasValidation GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Validation target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasValidation>(source, global::EDOM.CommentReviewRate.CommentHasValidation.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasValidation link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship RatingHasFields
	/// Description for EDOM.CommentReviewRate.RatingHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.RatingHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.RatingHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("062887b1-8466-4053-8ccb-d0212851e5aa")]
	public partial class RatingHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RatingHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x062887b1, 0x8466, 0x4053, 0x8c, 0xcb, 0xd0, 0x21, 0x28, 0x51, 0xe5, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RatingHasFields link in the same Partition as the given Rating
		/// </summary>
		/// <param name="source">Rating to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public RatingHasFields(Rating source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RatingHasFields.RatingDomainRoleId, source), new DslModeling::RoleAssignment(RatingHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RatingHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RatingHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RatingHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RatingHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Rating domain role code
		
		/// <summary>
		/// Rating domain role Id.
		/// </summary>
		public static readonly global::System.Guid RatingDomainRoleId = new global::System.Guid(0xc87bc47a, 0x6a7f, 0x430f, 0x8f, 0x67, 0x61, 0x72, 0x95, 0xa9, 0x48, 0x0f);
		
		/// <summary>
		/// DomainRole Rating
		/// Description for EDOM.CommentReviewRate.RatingHasFields.Rating
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.RatingHasFields/Rating.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.RatingHasFields/Rating.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.RatingHasFields/Rating.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c87bc47a-6a7f-430f-8f67-617295a9480f")]
		public virtual Rating Rating
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Rating)DslModeling::DomainRoleInfo.GetRolePlayer(this, RatingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RatingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rate of a Field
		/// <summary>
		/// Gets a list of Rate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Rating> GetRate(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Rating>, Rating>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x4ea72a82, 0xebf2, 0x4cf4, 0xa5, 0x49, 0x4f, 0x77, 0x99, 0x4a, 0xfa, 0xd9);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.RatingHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.RatingHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.RatingHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Rate", PropertyDisplayNameKey="EDOM.CommentReviewRate.RatingHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4ea72a82-ebf2-4cf4-a549-4f77994afad9")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Rating
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Rating element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, RatingDomainRoleId);
		}
		#endregion
		#region Rating link accessor
		/// <summary>
		/// Get the list of RatingHasFields links to a Rating.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.RatingHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Rating ratingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.RatingHasFields>(ratingInstance, global::EDOM.CommentReviewRate.RatingHasFields.RatingDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of RatingHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.RatingHasFields> GetLinksToRate ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.RatingHasFields>(fieldInstance, global::EDOM.CommentReviewRate.RatingHasFields.FieldDomainRoleId);
		}
		#endregion
		#region RatingHasFields instance accessors
		
		/// <summary>
		/// Get any RatingHasFields links between a given Rating and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.RatingHasFields> GetLinks( global::EDOM.CommentReviewRate.Rating source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.RatingHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.RatingHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.RatingHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.RatingHasFields>(source, global::EDOM.CommentReviewRate.RatingHasFields.RatingDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.RatingHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RatingHasFields link between a given Ratingand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.RatingHasFields GetLink( global::EDOM.CommentReviewRate.Rating source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.RatingHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.RatingHasFields>(source, global::EDOM.CommentReviewRate.RatingHasFields.RatingDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.RatingHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
