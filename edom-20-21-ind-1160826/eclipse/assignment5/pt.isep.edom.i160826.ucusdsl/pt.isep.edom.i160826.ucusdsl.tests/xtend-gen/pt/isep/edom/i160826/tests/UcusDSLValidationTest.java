/**
 * generated by Xtext 2.22.0
 */
package pt.isep.edom.i160826.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import pt.isep.edom.i160826.tests.UcusDslInjectorProvider;
import pt.isep.edom.i160826.ucus.Model;

@ExtendWith(InjectionExtension.class)
@InjectWith(UcusDslInjectorProvider.class)
@SuppressWarnings("all")
public class UcusDSLValidationTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void validateModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model amazon {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("subject {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Subject Amazon {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("usecase {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("UseCase reviewProduct {}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actor { ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Actor User {\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      Diagnostic diag = null;
      Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(result.eResource().getAllContents()), Model.class);
      for (final Model m : _filter) {
        diag = Diagnostician.INSTANCE.validate(m);
      }
      int _severity = diag.getSeverity();
      boolean _equals = (_severity == Diagnostic.ERROR);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Should result in validation error!");
      Assertions.assertTrue(_equals, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
