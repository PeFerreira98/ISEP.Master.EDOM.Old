//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Model.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Model.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92805e38-ab50-4cf3-b3af-2e0a49cd3cf5")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92805e38, 0xab50, 0x4cf3, 0xb3, 0xaf, 0x2e, 0x0a, 0x49, 0xcd, 0x3c, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x72239093, 0x14af, 0x4018, 0x9c, 0xd0, 0xec, 0x80, 0xea, 0x2d, 0x9c, 0x6c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Model.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Model/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Model/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("72239093-14af-4018-9cd0-ec80ea2d9c6c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Model.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Model, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Model.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Model.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Model element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Model element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Items opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Items.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::Edom.CRR.ModelHasItems.ModelDomainRoleId);
			}
		}
		#endregion
		#region Users opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Users.
		/// Description for Edom.CRR.ModelHasUsers.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> Users
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::Edom.CRR.ModelHasUsers.ModelDomainRoleId);
			}
		}
		#endregion
		#region DataTypes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DataTypes.
		/// Description for Edom.CRR.ModelHasDataTypes.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataType> DataTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataType>, DataType>(global::Edom.CRR.ModelHasDataTypes.ModelDomainRoleId);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.ModelHasAttributes.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.ModelHasAttributes.ModelDomainRoleId);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		/// <summary>
		/// Gets or sets Comment.
		/// Description for Edom.CRR.ModelHasComment.Model
		/// </summary>
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasComment.ModelDomainRoleId) as Comment;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasComment.ModelDomainRoleId, value);
			}
		}
		#endregion
		#region Rate opposite domain role accessor
		/// <summary>
		/// Gets or sets Rate.
		/// Description for Edom.CRR.ModelHasRate.Model
		/// </summary>
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasRate.ModelDomainRoleId) as Rate;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasRate.ModelDomainRoleId, value);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		/// <summary>
		/// Gets or sets Review.
		/// Description for Edom.CRR.ModelHasReview.Model
		/// </summary>
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasReview.ModelDomainRoleId) as Review;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasReview.ModelDomainRoleId, value);
			}
		}
		#endregion
		#region ApprovalProcesses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ApprovalProcesses.
		/// Description for Edom.CRR.ModelHasApprovalProcesses.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalProcess> ApprovalProcesses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalProcess>, ApprovalProcess>(global::Edom.CRR.ModelHasApprovalProcesses.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.Item.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.User.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.DataType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.Attribute.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.Comment.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ModelHasComment.Comment
					if (this.Comment != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.Rate.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ModelHasRate.Rate
					if (this.Rate != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.Review.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ModelHasReview.Review
					if (this.Review != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.ApprovalProcess.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Edom.CRR.Item sourceItem1 = sourceElement as global::Edom.CRR.Item;
			if (sourceItem1 != null)
			{
				// Create link for path ModelHasItems.Items
				this.Items.Add(sourceItem1);

				return;
			}
				
			global::Edom.CRR.User sourceUser2 = sourceElement as global::Edom.CRR.User;
			if (sourceUser2 != null)
			{
				// Create link for path ModelHasUsers.Users
				this.Users.Add(sourceUser2);

				return;
			}
				
			global::Edom.CRR.DataType sourceDataType3 = sourceElement as global::Edom.CRR.DataType;
			if (sourceDataType3 != null)
			{
				// Create link for path ModelHasDataTypes.DataTypes
				this.DataTypes.Add(sourceDataType3);

				return;
			}
				
			global::Edom.CRR.Attribute sourceAttribute4 = sourceElement as global::Edom.CRR.Attribute;
			if (sourceAttribute4 != null)
			{
				// Create link for path ModelHasAttributes.Attributes
				this.Attributes.Add(sourceAttribute4);

				return;
			}
				
			global::Edom.CRR.Comment sourceComment5 = sourceElement as global::Edom.CRR.Comment;
			if (sourceComment5 != null)
			{
				// Create link for path ModelHasComment.Comment
				this.Comment = sourceComment5;

				return;
			}
				
			global::Edom.CRR.Rate sourceRate6 = sourceElement as global::Edom.CRR.Rate;
			if (sourceRate6 != null)
			{
				// Create link for path ModelHasRate.Rate
				this.Rate = sourceRate6;

				return;
			}
				
			global::Edom.CRR.Review sourceReview7 = sourceElement as global::Edom.CRR.Review;
			if (sourceReview7 != null)
			{
				// Create link for path ModelHasReview.Review
				this.Review = sourceReview7;

				return;
			}
				
			global::Edom.CRR.ApprovalProcess sourceApprovalProcess8 = sourceElement as global::Edom.CRR.ApprovalProcess;
			if (sourceApprovalProcess8 != null)
			{
				// Create link for path ModelHasApprovalProcesses.ApprovalProcesses
				this.ApprovalProcesses.Add(sourceApprovalProcess8);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Edom.CRR.Item sourceItem1 = sourceElement as global::Edom.CRR.Item;
			if (sourceItem1 != null)
			{
				// Delete link for path ModelHasItems.Items
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasItems.GetLinks((global::Edom.CRR.Model)this, sourceItem1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasItems.ModelDomainRoleId, global::Edom.CRR.ModelHasItems.ElementDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.User sourceUser2 = sourceElement as global::Edom.CRR.User;
			if (sourceUser2 != null)
			{
				// Delete link for path ModelHasUsers.Users
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasUsers.GetLinks((global::Edom.CRR.Model)this, sourceUser2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasUsers.ModelDomainRoleId, global::Edom.CRR.ModelHasUsers.UserDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.DataType sourceDataType3 = sourceElement as global::Edom.CRR.DataType;
			if (sourceDataType3 != null)
			{
				// Delete link for path ModelHasDataTypes.DataTypes
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasDataTypes.GetLinks((global::Edom.CRR.Model)this, sourceDataType3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasDataTypes.ModelDomainRoleId, global::Edom.CRR.ModelHasDataTypes.DataTypeDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.Attribute sourceAttribute4 = sourceElement as global::Edom.CRR.Attribute;
			if (sourceAttribute4 != null)
			{
				// Delete link for path ModelHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasAttributes.GetLinks((global::Edom.CRR.Model)this, sourceAttribute4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasAttributes.ModelDomainRoleId, global::Edom.CRR.ModelHasAttributes.AttributeDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.Comment sourceComment5 = sourceElement as global::Edom.CRR.Comment;
			if (sourceComment5 != null)
			{
				// Delete link for path ModelHasComment.Comment
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasComment.GetLinks((global::Edom.CRR.Model)this, sourceComment5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasComment.ModelDomainRoleId, global::Edom.CRR.ModelHasComment.CommentDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.Rate sourceRate6 = sourceElement as global::Edom.CRR.Rate;
			if (sourceRate6 != null)
			{
				// Delete link for path ModelHasRate.Rate
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasRate.GetLinks((global::Edom.CRR.Model)this, sourceRate6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasRate.ModelDomainRoleId, global::Edom.CRR.ModelHasRate.RateDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.Review sourceReview7 = sourceElement as global::Edom.CRR.Review;
			if (sourceReview7 != null)
			{
				// Delete link for path ModelHasReview.Review
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasReview.GetLinks((global::Edom.CRR.Model)this, sourceReview7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasReview.ModelDomainRoleId, global::Edom.CRR.ModelHasReview.ReviewDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.ApprovalProcess sourceApprovalProcess8 = sourceElement as global::Edom.CRR.ApprovalProcess;
			if (sourceApprovalProcess8 != null)
			{
				// Delete link for path ModelHasApprovalProcesses.ApprovalProcesses
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ModelHasApprovalProcesses.GetLinks((global::Edom.CRR.Model)this, sourceApprovalProcess8))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ModelHasApprovalProcesses.ModelDomainRoleId, global::Edom.CRR.ModelHasApprovalProcesses.ApprovalProcessDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Item
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Item.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Item.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0bc48c70-f754-4042-9ed0-f4907e54fda2")]
	public partial class Item : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Item domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0bc48c70, 0xf754, 0x4042, 0x9e, 0xd0, 0xf4, 0x90, 0x7e, 0x54, 0xfd, 0xa2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xad94a55b, 0x0900, 0x4c56, 0xaf, 0xdb, 0x4b, 0x79, 0x04, 0xf2, 0x82, 0x90);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Item";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Item.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Item/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Item/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Item")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ad94a55b-0900-4c56-afdb-4b7904f28290")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Item.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Item, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Item.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Item.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Item element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Item element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasItems.ElementDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasItems.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.ItemReferencesAttributes.Item
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.ItemReferencesAttributes.ItemDomainRoleId);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		/// <summary>
		/// Gets or sets Comment.
		/// Description for Edom.CRR.ItemReferencesComment.Item
		/// </summary>
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ItemReferencesComment.ItemDomainRoleId) as Comment;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ItemReferencesComment.ItemDomainRoleId, value);
			}
		}
		#endregion
		#region Rate opposite domain role accessor
		/// <summary>
		/// Gets or sets Rate.
		/// Description for Edom.CRR.ItemReferencesRate.Item
		/// </summary>
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ItemReferencesRate.ItemDomainRoleId) as Rate;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ItemReferencesRate.ItemDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass User
	/// Description for Edom.CRR.User
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.User.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.User.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1a0fcfa5-614a-467a-a83c-924016a97496")]
	public partial class User : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// User domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1a0fcfa5, 0x614a, 0x467a, 0xa8, 0x3c, 0x92, 0x40, 0x16, 0xa9, 0x74, 0x96);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xdeb33c5f, 0x13e4, 0x4229, 0xb7, 0xe2, 0x0c, 0x44, 0xdc, 0xd5, 0xb3, 0x5d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "User";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.User.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.User/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.User/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("User")]
		[DslModeling::DomainObjectId("deb33c5f-13e4-4229-b7e2-0c44dcd5b35d")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the User.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<User, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the User.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the User.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(User element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(User element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasUsers.User
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasUsers.UserDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasUsers.UserDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.UserReferencesAttributes.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.UserReferencesAttributes.UserDomainRoleId);
			}
		}
		#endregion
		#region Rates opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Rates.
		/// Description for Edom.CRR.RateReferencesUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Rate> Rates
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Rate>, Rate>(global::Edom.CRR.RateReferencesUser.UserDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Edom.CRR.CommentReferencesUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Edom.CRR.CommentReferencesUser.UserDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass DataType
	/// Description for Edom.CRR.DataType
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.DataType.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.DataType.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d468e409-2daf-4049-baeb-f4b77538d966")]
	public partial class DataType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd468e409, 0x2daf, 0x4049, 0xba, 0xeb, 0xf4, 0xb7, 0x75, 0x38, 0xd9, 0x66);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x72d06922, 0x68ce, 0x49a0, 0xa7, 0x31, 0x8d, 0xcc, 0x48, 0x8c, 0xd8, 0x4c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "String";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.DataType.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.DataType/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.DataType/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("String")]
		[DslModeling::DomainObjectId("72d06922-68ce-49a0-a731-8dcc488cd84c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DataType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasDataTypes.DataType
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasDataTypes.DataTypeDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasDataTypes.DataTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.AttributeReferencesDataType.DataType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.AttributeReferencesDataType.DataTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Attribute
	/// Description for Edom.CRR.Attribute
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Attribute.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Attribute.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6c0210af-e8c5-45ab-8ef9-0a2d2003ddff")]
	public partial class Attribute : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Attribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c0210af, 0xe8c5, 0x45ab, 0x8e, 0xf9, 0x0a, 0x2d, 0x20, 0x03, 0xdd, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Attribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Attribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xdbaa8579, 0x36de, 0x4223, 0xa0, 0x79, 0xd4, 0xb9, 0xbe, 0xca, 0xc7, 0xd5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Attribute";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Attribute.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Attribute/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Attribute/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Attribute")]
		[DslModeling::DomainObjectId("dbaa8579-36de-4223-a079-d4b9becac7d5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Attribute.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Attribute, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Attribute.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Attribute.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Attribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Attribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasAttributes.Attribute
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasAttributes.AttributeDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasAttributes.AttributeDomainRoleId, value);
			}
		}
		#endregion
		#region Items opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Items.
		/// Description for Edom.CRR.ItemReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::Edom.CRR.ItemReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Edom.CRR.CommentReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Edom.CRR.CommentReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region Rates opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Rates.
		/// Description for Edom.CRR.RateReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Rate> Rates
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Rate>, Rate>(global::Edom.CRR.RateReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region DataType opposite domain role accessor
		/// <summary>
		/// Gets or sets DataType.
		/// Description for Edom.CRR.AttributeReferencesDataType.Attribute
		/// </summary>
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.AttributeReferencesDataType.AttributeDomainRoleId) as DataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.AttributeReferencesDataType.AttributeDomainRoleId, value);
			}
		}
		#endregion
		#region Reviews opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Reviews.
		/// Description for Edom.CRR.ReviewReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Reviews
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::Edom.CRR.ReviewReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region Users opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Users.
		/// Description for Edom.CRR.UserReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> Users
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::Edom.CRR.UserReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region ApprovalProcesses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ApprovalProcesses.
		/// Description for Edom.CRR.ApprovalProcessReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalProcess> ApprovalProcesses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalProcess>, ApprovalProcess>(global::Edom.CRR.ApprovalProcessReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
		#region Steps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Steps.
		/// Description for Edom.CRR.ApprovalStepReferencesAttributes.Attribute
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalStep> Steps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(global::Edom.CRR.ApprovalStepReferencesAttributes.AttributeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Comment
	/// Description for Edom.CRR.Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Comment.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Comment.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5a542e79-1611-4919-a2a3-32dfb4b81f22")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a542e79, 0x1611, 0x4919, 0xa2, 0xa3, 0x32, 0xdf, 0xb4, 0xb8, 0x1f, 0x22);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5ab14b88, 0xdcb9, 0x427d, 0xbc, 0x55, 0xb6, 0x4e, 0x80, 0x1b, 0xac, 0x21);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Comment";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Comment.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Comment/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Comment/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Comment")]
		[DslModeling::DomainObjectId("5ab14b88-dcb9-427d-bc55-b64e801bac21")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.CommentReferencesAttributes.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.CommentReferencesAttributes.CommentDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasComment.Comment
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasComment.CommentDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasComment.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Items opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Items.
		/// Description for Edom.CRR.ItemReferencesComment.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::Edom.CRR.ItemReferencesComment.CommentDomainRoleId);
			}
		}
		#endregion
		#region User opposite domain role accessor
		/// <summary>
		/// Gets or sets User.
		/// Description for Edom.CRR.CommentReferencesUser.Comment
		/// </summary>
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.CommentReferencesUser.CommentDomainRoleId) as User;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.CommentReferencesUser.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.CommentReferencesApprovalProcess.Comment
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.CommentReferencesApprovalProcess.CommentDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.CommentReferencesApprovalProcess.CommentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Rate
	/// Description for Edom.CRR.Rate
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Rate.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Rate.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("684d89ae-a42f-4f1f-bbf4-eeacd732b75b")]
	public partial class Rate : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Rate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x684d89ae, 0xa42f, 0x4f1f, 0xbb, 0xf4, 0xee, 0xac, 0xd7, 0x32, 0xb7, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Rate(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Rate(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1daf42a1, 0x8c0b, 0x4990, 0xbe, 0x8a, 0xb1, 0x67, 0x7a, 0xce, 0x80, 0xad);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Rate";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Rate.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Rate/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Rate/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Rate")]
		[DslModeling::DomainObjectId("1daf42a1-8c0b-4990-be8a-b1677ace80ad")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Rate.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Rate, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Rate.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Rate.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Rate element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Rate element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.RateReferencesAttributes.Rate
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.RateReferencesAttributes.RateDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasRate.Rate
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasRate.RateDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasRate.RateDomainRoleId, value);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		/// <summary>
		/// Gets or sets Review.
		/// Description for Edom.CRR.RateReferencesReview.Rate
		/// </summary>
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.RateReferencesReview.RateDomainRoleId) as Review;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.RateReferencesReview.RateDomainRoleId, value);
			}
		}
		#endregion
		#region Items opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Items.
		/// Description for Edom.CRR.ItemReferencesRate.Rate
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::Edom.CRR.ItemReferencesRate.RateDomainRoleId);
			}
		}
		#endregion
		#region User opposite domain role accessor
		/// <summary>
		/// Gets or sets User.
		/// Description for Edom.CRR.RateReferencesUser.Rate
		/// </summary>
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.RateReferencesUser.RateDomainRoleId) as User;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.RateReferencesUser.RateDomainRoleId, value);
			}
		}
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.RateReferencesApprovalProcess.Rate
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.RateReferencesApprovalProcess.RateDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.RateReferencesApprovalProcess.RateDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass Review
	/// Description for Edom.CRR.Review
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.Review.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.Review.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a80acf1-7174-44ff-a039-cc93b41ae682")]
	public partial class Review : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Review domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a80acf1, 0x7174, 0x44ff, 0xa0, 0x39, 0xcc, 0x93, 0xb4, 0x1a, 0xe6, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Review(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Review(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x056c0030, 0x4e69, 0x48d5, 0x95, 0xa5, 0xc9, 0x89, 0x7d, 0xf9, 0xd1, 0xf5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Review";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.Review.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.Review/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.Review/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Review")]
		[DslModeling::DomainObjectId("056c0030-4e69-48d5-95a5-c9897df9d1f5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Review.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Review, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Review.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Review.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Review element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Review element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasReview.Review
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasReview.ReviewDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasReview.ReviewDomainRoleId, value);
			}
		}
		#endregion
		#region Rate opposite domain role accessor
		/// <summary>
		/// Gets or sets Rate.
		/// Description for Edom.CRR.RateReferencesReview.Review
		/// </summary>
		public virtual Rate Rate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.RateReferencesReview.ReviewDomainRoleId) as Rate;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.RateReferencesReview.ReviewDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.ReviewReferencesAttributes.Review
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.ReviewReferencesAttributes.ReviewDomainRoleId);
			}
		}
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.ReviewReferencesApprovalProcess.Review
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ReviewReferencesApprovalProcess.ReviewDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ReviewReferencesApprovalProcess.ReviewDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass ApprovalProcess
	/// Description for Edom.CRR.ApprovalProcess
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcess.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcess.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2d9de15b-262b-4470-bd8a-3e884e75590e")]
	public partial class ApprovalProcess : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ApprovalProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2d9de15b, 0x262b, 0x4470, 0xbd, 0x8a, 0x3e, 0x88, 0x4e, 0x75, 0x59, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalProcess(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalProcess(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc6e2a26b, 0x9328, 0x47ca, 0x93, 0x4a, 0xef, 0xd8, 0xee, 0x07, 0xc0, 0x25);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Process";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.ApprovalProcess.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalProcess/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalProcess/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Process")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c6e2a26b-9328-47ca-934a-efd8ee07c025")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ApprovalProcess.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ApprovalProcess, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ApprovalProcess.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ApprovalProcess.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ApprovalProcess element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ApprovalProcess element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Edom.CRR.ModelHasApprovalProcesses.ApprovalProcess
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ModelHasApprovalProcesses.ApprovalProcessDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ModelHasApprovalProcesses.ApprovalProcessDomainRoleId, value);
			}
		}
		#endregion
		#region Steps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Steps.
		/// Description for Edom.CRR.ApprovalProcessHasSteps.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalStep> Steps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(global::Edom.CRR.ApprovalProcessHasSteps.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region Start opposite domain role accessor
		/// <summary>
		/// Gets or sets Start.
		/// Description for Edom.CRR.ApprovalProcessHasStart.ApprovalProcess
		/// </summary>
		public virtual ApprovalStart Start
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId) as ApprovalStart;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId, value);
			}
		}
		#endregion
		#region Outcomes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Outcomes.
		/// Description for Edom.CRR.ApprovalProcessHasOutcomes.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalOutcome> Outcomes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalOutcome>, ApprovalOutcome>(global::Edom.CRR.ApprovalProcessHasOutcomes.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.ApprovalProcessReferencesAttributes.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.ApprovalProcessReferencesAttributes.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Edom.CRR.CommentReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Edom.CRR.CommentReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region Rates opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Rates.
		/// Description for Edom.CRR.RateReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Rate> Rates
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Rate>, Rate>(global::Edom.CRR.RateReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region Reviews opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Reviews.
		/// Description for Edom.CRR.ReviewReferencesApprovalProcess.ApprovalProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Reviews
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::Edom.CRR.ReviewReferencesApprovalProcess.ApprovalProcessDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.ApprovalStep.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.ApprovalStart.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ApprovalProcessHasStart.Start
					if (this.Start != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Edom.CRR.ApprovalOutcome.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Edom.CRR.ApprovalStep sourceApprovalStep1 = sourceElement as global::Edom.CRR.ApprovalStep;
			if (sourceApprovalStep1 != null)
			{
				// Create link for path ApprovalProcessHasSteps.Steps
				this.Steps.Add(sourceApprovalStep1);

				return;
			}
				
			global::Edom.CRR.ApprovalStart sourceApprovalStart2 = sourceElement as global::Edom.CRR.ApprovalStart;
			if (sourceApprovalStart2 != null)
			{
				// Create link for path ApprovalProcessHasStart.Start
				this.Start = sourceApprovalStart2;

				return;
			}
				
			global::Edom.CRR.ApprovalOutcome sourceApprovalOutcome3 = sourceElement as global::Edom.CRR.ApprovalOutcome;
			if (sourceApprovalOutcome3 != null)
			{
				// Create link for path ApprovalProcessHasOutcomes.Outcomes
				this.Outcomes.Add(sourceApprovalOutcome3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Edom.CRR.ApprovalStep sourceApprovalStep1 = sourceElement as global::Edom.CRR.ApprovalStep;
			if (sourceApprovalStep1 != null)
			{
				// Delete link for path ApprovalProcessHasSteps.Steps
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ApprovalProcessHasSteps.GetLinks((global::Edom.CRR.ApprovalProcess)this, sourceApprovalStep1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ApprovalProcessHasSteps.ApprovalProcessDomainRoleId, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalStepDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.ApprovalStart sourceApprovalStart2 = sourceElement as global::Edom.CRR.ApprovalStart;
			if (sourceApprovalStart2 != null)
			{
				// Delete link for path ApprovalProcessHasStart.Start
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ApprovalProcessHasStart.GetLinks((global::Edom.CRR.ApprovalProcess)this, sourceApprovalStart2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ApprovalProcessHasStart.ApprovalProcessDomainRoleId, global::Edom.CRR.ApprovalProcessHasStart.ApprovalStartDomainRoleId);
				}

				return;
			}
				
			global::Edom.CRR.ApprovalOutcome sourceApprovalOutcome3 = sourceElement as global::Edom.CRR.ApprovalOutcome;
			if (sourceApprovalOutcome3 != null)
			{
				// Delete link for path ApprovalProcessHasOutcomes.Outcomes
				
				foreach (DslModeling::ElementLink link in global::Edom.CRR.ApprovalProcessHasOutcomes.GetLinks((global::Edom.CRR.ApprovalProcess)this, sourceApprovalOutcome3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Edom.CRR.ApprovalProcessHasOutcomes.ApprovalProcessDomainRoleId, global::Edom.CRR.ApprovalProcessHasOutcomes.ApprovalOutcomeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass ApprovalStep
	/// Description for Edom.CRR.ApprovalStep
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStep.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalStep.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("e1042703-6229-4009-a31a-2f580446f66c")]
	public partial class ApprovalStep : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ApprovalStep domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1042703, 0x6229, 0x4009, 0xa3, 0x1a, 0x2f, 0x58, 0x04, 0x46, 0xf6, 0x6c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalStep(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalStep(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xcb6cde77, 0xd6a1, 0x48fd, 0xab, 0x6e, 0x82, 0x09, 0x42, 0x67, 0xfd, 0x78);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Step";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.ApprovalStep.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStep/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStep/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Step")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("cb6cde77-d6a1-48fd-ab6e-82094267fd78")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ApprovalStep.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ApprovalStep, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ApprovalStep.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ApprovalStep.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ApprovalStep element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ApprovalStep element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Start opposite domain role accessor
		/// <summary>
		/// Gets or sets Start.
		/// Description for Edom.CRR.ApprovalStartReferencesStep.ApprovalStep
		/// </summary>
		public virtual ApprovalStart Start
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStepDomainRoleId) as ApprovalStart;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStepDomainRoleId, value);
			}
		}
		#endregion
		#region TargetSteps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetSteps.
		/// Description for Edom.CRR.ApprovalStepReferencesTargetSteps.SourceApprovalStep
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalStep> TargetSteps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(global::Edom.CRR.ApprovalStepReferencesTargetSteps.SourceApprovalStepDomainRoleId);
			}
		}
		#endregion
		#region SourceSteps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceSteps.
		/// Description for Edom.CRR.ApprovalStepReferencesTargetSteps.TargetApprovalStep
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalStep> SourceSteps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(global::Edom.CRR.ApprovalStepReferencesTargetSteps.TargetApprovalStepDomainRoleId);
			}
		}
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.ApprovalProcessHasSteps.ApprovalStep
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalStepDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasSteps.ApprovalStepDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Edom.CRR.ApprovalStepReferencesAttributes.ApprovalStep
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::Edom.CRR.ApprovalStepReferencesAttributes.ApprovalStepDomainRoleId);
			}
		}
		#endregion
		#region Outcomes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Outcomes.
		/// Description for Edom.CRR.ApprovalStepReferencesOutcomes.ApprovalStep
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalOutcome> Outcomes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalOutcome>, ApprovalOutcome>(global::Edom.CRR.ApprovalStepReferencesOutcomes.ApprovalStepDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass ApprovalStart
	/// Description for Edom.CRR.ApprovalStart
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStart.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalStart.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("68435be2-6b80-4019-bfa5-1a4221519b49")]
	public partial class ApprovalStart : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ApprovalStart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68435be2, 0x6b80, 0x4019, 0xbf, 0xa5, 0x1a, 0x42, 0x21, 0x51, 0x9b, 0x49);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalStart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalStart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xde12cabd, 0xac77, 0x4225, 0xa5, 0x4e, 0xef, 0x8b, 0x60, 0x31, 0x34, 0x4e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Start";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.ApprovalStart.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalStart/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalStart/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Start")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("de12cabd-ac77-4225-a54e-ef8b6031344e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ApprovalStart.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ApprovalStart, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ApprovalStart.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ApprovalStart.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ApprovalStart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ApprovalStart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Step opposite domain role accessor
		/// <summary>
		/// Gets or sets Step.
		/// Description for Edom.CRR.ApprovalStartReferencesStep.ApprovalStart
		/// </summary>
		public virtual ApprovalStep Step
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStartDomainRoleId) as ApprovalStep;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalStartReferencesStep.ApprovalStartDomainRoleId, value);
			}
		}
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.ApprovalProcessHasStart.ApprovalStart
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasStart.ApprovalStartDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasStart.ApprovalStartDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Edom.CRR
{
	/// <summary>
	/// DomainClass ApprovalOutcome
	/// Description for Edom.CRR.ApprovalOutcome
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.ApprovalOutcome.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.ApprovalOutcome.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("7e274c12-d4bc-444e-9dc8-1f5567c787db")]
	public partial class ApprovalOutcome : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ApprovalOutcome domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e274c12, 0xd4bc, 0x444e, 0x9d, 0xc8, 0x1f, 0x55, 0x67, 0xc7, 0x87, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalOutcome(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApprovalOutcome(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x332e383c, 0x2bbd, 0x46d0, 0x8d, 0x0f, 0x32, 0x84, 0x2f, 0x72, 0x0b, 0x57);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Outcome";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Edom.CRR.ApprovalOutcome.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Edom.CRR.ApprovalOutcome/Name.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Edom.CRR.ApprovalOutcome/Name.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Outcome")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("332e383c-2bbd-46d0-8d0f-32842f720b57")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ApprovalOutcome.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ApprovalOutcome, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ApprovalOutcome.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ApprovalOutcome.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ApprovalOutcome element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ApprovalOutcome element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ApprovalProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets ApprovalProcess.
		/// Description for Edom.CRR.ApprovalProcessHasOutcomes.ApprovalOutcome
		/// </summary>
		public virtual ApprovalProcess ApprovalProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasOutcomes.ApprovalOutcomeDomainRoleId) as ApprovalProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Edom.CRR.ApprovalProcessHasOutcomes.ApprovalOutcomeDomainRoleId, value);
			}
		}
		#endregion
		#region Steps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Steps.
		/// Description for Edom.CRR.ApprovalStepReferencesOutcomes.ApprovalOutcome
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ApprovalStep> Steps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ApprovalStep>, ApprovalStep>(global::Edom.CRR.ApprovalStepReferencesOutcomes.ApprovalOutcomeDomainRoleId);
			}
		}
		#endregion
	}
}
