//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Edom.CRR.CRRDiagram")]

namespace Edom.CRR
{
	/// <summary>
	/// DomainClass CRRDiagram
	/// Description for Edom.CRR.CRRDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Edom.CRR.CRRDiagram.DisplayName", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Edom.CRR.CRRDiagram.Description", typeof(global::Edom.CRR.CRRDomainModel), "Edom.CRR.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Edom.CRR.CRRDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7cde767-8322-4ff6-9c6e-cb601cbfa683")]
	public partial class CRRDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Edom.CRR.CRRToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Edom.CRR.Item)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.User)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.DataType)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.Attribute)
			{
				global::Edom.CRR.AttributesShape newShape = new global::Edom.CRR.AttributesShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.Comment)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.Rate)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.Review)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalProcess)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStart)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalOutcome)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStep)
			{
				global::Edom.CRR.NamedElementShape newShape = new global::Edom.CRR.NamedElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Edom.CRR.ItemReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.UserReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.CommentReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.RateReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ReviewReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ItemReferencesComment)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ItemReferencesRate)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.AttributeReferencesDataType)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.CommentReferencesUser)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.RateReferencesReview)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.RateReferencesUser)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalProcessHasStart)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStartReferencesStep)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalProcessHasOutcomes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalProcessHasSteps)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStepReferencesTargetSteps)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStepReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalProcessReferencesAttributes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ApprovalStepReferencesOutcomes)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.CommentReferencesApprovalProcess)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.ReviewReferencesApprovalProcess)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			if(element is global::Edom.CRR.RateReferencesApprovalProcess)
			{
				global::Edom.CRR.AttributesConnector newShape = new global::Edom.CRR.AttributesConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Edom.CRR.NamedElementShape.DecoratorsInitialized += NamedElementShapeDecoratorMap.OnDecoratorsInitialized;
			global::Edom.CRR.AttributesShape.DecoratorsInitialized += AttributesShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for NamedElementShape.
		/// </summary>
		internal static partial class NamedElementShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for NamedElementShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.Item.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.User.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.User.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.DataType.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.DataType.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.Comment.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.Comment.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.Rate.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.Rate.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.Review.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.Review.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.ApprovalProcess.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.ApprovalProcess.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.ApprovalStart.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.ApprovalStart.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.ApprovalOutcome.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.ApprovalOutcome.DomainClassId, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.ApprovalStep.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, global::Edom.CRR.ApprovalStep.DomainClassId, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AttributesShape.
		/// </summary>
		internal static partial class AttributesShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AttributesShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Edom.CRR.Attribute.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::Edom.CRR.ItemHasAttributeConnectAction itemHasAttributeConnectAction;
		private global::Edom.CRR.AttributeHasDataTypeConnectAction attributeHasDataTypeConnectAction;
		private global::Edom.CRR.UserHasAttributeConnectAction userHasAttributeConnectAction;
		private global::Edom.CRR.CommentHasAttributeConnectAction commentHasAttributeConnectAction;
		private global::Edom.CRR.ItemHasCommentConnectAction itemHasCommentConnectAction;
		private global::Edom.CRR.RateHasAttributesConnectAction rateHasAttributesConnectAction;
		private global::Edom.CRR.ItemHasRateConnectAction itemHasRateConnectAction;
		private global::Edom.CRR.RateHasReviewConnectAction rateHasReviewConnectAction;
		private global::Edom.CRR.RateHasUserConnectAction rateHasUserConnectAction;
		private global::Edom.CRR.CommentHasUserConnectAction commentHasUserConnectAction;
		private global::Edom.CRR.ReviewHasAttributesConnectAction reviewHasAttributesConnectAction;
		private global::Edom.CRR.ApprovalProcessHasAttributesConnectAction approvalProcessHasAttributesConnectAction;
		private global::Edom.CRR.ApprovalStepHasOutcomeConnectAction approvalStepHasOutcomeConnectAction;
		private global::Edom.CRR.ApprovalStepHasAttributesConnectAction approvalStepHasAttributesConnectAction;
		private global::Edom.CRR.ApprovalStepHasNextStepConnectAction approvalStepHasNextStepConnectAction;
		private global::Edom.CRR.ApprovalStartHasStepConnectAction approvalStartHasStepConnectAction;
		private global::Edom.CRR.CommentHasApprovalProcessConnectAction commentHasApprovalProcessConnectAction;
		private global::Edom.CRR.ReviewHasApprovalProcessConnectAction reviewHasApprovalProcessConnectAction;
		private global::Edom.CRR.RateHasApprovalProcessConnectAction rateHasApprovalProcessConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ItemHasAttributeFilterString))
				{
					if (this.itemHasAttributeConnectAction == null)
					{
						this.itemHasAttributeConnectAction = new global::Edom.CRR.ItemHasAttributeConnectAction(this);
						this.itemHasAttributeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.itemHasAttributeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.AttributeHasDataTypeFilterString))
				{
					if (this.attributeHasDataTypeConnectAction == null)
					{
						this.attributeHasDataTypeConnectAction = new global::Edom.CRR.AttributeHasDataTypeConnectAction(this);
						this.attributeHasDataTypeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.attributeHasDataTypeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.UserHasAttributeFilterString))
				{
					if (this.userHasAttributeConnectAction == null)
					{
						this.userHasAttributeConnectAction = new global::Edom.CRR.UserHasAttributeConnectAction(this);
						this.userHasAttributeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.userHasAttributeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.CommentHasAttributeFilterString))
				{
					if (this.commentHasAttributeConnectAction == null)
					{
						this.commentHasAttributeConnectAction = new global::Edom.CRR.CommentHasAttributeConnectAction(this);
						this.commentHasAttributeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentHasAttributeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ItemHasCommentFilterString))
				{
					if (this.itemHasCommentConnectAction == null)
					{
						this.itemHasCommentConnectAction = new global::Edom.CRR.ItemHasCommentConnectAction(this);
						this.itemHasCommentConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.itemHasCommentConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.RateHasAttributesFilterString))
				{
					if (this.rateHasAttributesConnectAction == null)
					{
						this.rateHasAttributesConnectAction = new global::Edom.CRR.RateHasAttributesConnectAction(this);
						this.rateHasAttributesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.rateHasAttributesConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ItemHasRateFilterString))
				{
					if (this.itemHasRateConnectAction == null)
					{
						this.itemHasRateConnectAction = new global::Edom.CRR.ItemHasRateConnectAction(this);
						this.itemHasRateConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.itemHasRateConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.RateHasReviewFilterString))
				{
					if (this.rateHasReviewConnectAction == null)
					{
						this.rateHasReviewConnectAction = new global::Edom.CRR.RateHasReviewConnectAction(this);
						this.rateHasReviewConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.rateHasReviewConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.RateHasUserFilterString))
				{
					if (this.rateHasUserConnectAction == null)
					{
						this.rateHasUserConnectAction = new global::Edom.CRR.RateHasUserConnectAction(this);
						this.rateHasUserConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.rateHasUserConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.CommentHasUserFilterString))
				{
					if (this.commentHasUserConnectAction == null)
					{
						this.commentHasUserConnectAction = new global::Edom.CRR.CommentHasUserConnectAction(this);
						this.commentHasUserConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentHasUserConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ReviewHasAttributesFilterString))
				{
					if (this.reviewHasAttributesConnectAction == null)
					{
						this.reviewHasAttributesConnectAction = new global::Edom.CRR.ReviewHasAttributesConnectAction(this);
						this.reviewHasAttributesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.reviewHasAttributesConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ApprovalProcessHasAttributesFilterString))
				{
					if (this.approvalProcessHasAttributesConnectAction == null)
					{
						this.approvalProcessHasAttributesConnectAction = new global::Edom.CRR.ApprovalProcessHasAttributesConnectAction(this);
						this.approvalProcessHasAttributesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.approvalProcessHasAttributesConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ApprovalStepHasOutcomeFilterString))
				{
					if (this.approvalStepHasOutcomeConnectAction == null)
					{
						this.approvalStepHasOutcomeConnectAction = new global::Edom.CRR.ApprovalStepHasOutcomeConnectAction(this);
						this.approvalStepHasOutcomeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.approvalStepHasOutcomeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ApprovalStepHasAttributesFilterString))
				{
					if (this.approvalStepHasAttributesConnectAction == null)
					{
						this.approvalStepHasAttributesConnectAction = new global::Edom.CRR.ApprovalStepHasAttributesConnectAction(this);
						this.approvalStepHasAttributesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.approvalStepHasAttributesConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ApprovalStepHasNextStepFilterString))
				{
					if (this.approvalStepHasNextStepConnectAction == null)
					{
						this.approvalStepHasNextStepConnectAction = new global::Edom.CRR.ApprovalStepHasNextStepConnectAction(this);
						this.approvalStepHasNextStepConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.approvalStepHasNextStepConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ApprovalStartHasStepFilterString))
				{
					if (this.approvalStartHasStepConnectAction == null)
					{
						this.approvalStartHasStepConnectAction = new global::Edom.CRR.ApprovalStartHasStepConnectAction(this);
						this.approvalStartHasStepConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.approvalStartHasStepConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.CommentHasApprovalProcessFilterString))
				{
					if (this.commentHasApprovalProcessConnectAction == null)
					{
						this.commentHasApprovalProcessConnectAction = new global::Edom.CRR.CommentHasApprovalProcessConnectAction(this);
						this.commentHasApprovalProcessConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentHasApprovalProcessConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.ReviewHasApprovalProcessFilterString))
				{
					if (this.reviewHasApprovalProcessConnectAction == null)
					{
						this.reviewHasApprovalProcessConnectAction = new global::Edom.CRR.ReviewHasApprovalProcessConnectAction(this);
						this.reviewHasApprovalProcessConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.reviewHasApprovalProcessConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Edom.CRR.CRRToolboxHelper.RateHasApprovalProcessFilterString))
				{
					if (this.rateHasApprovalProcessConnectAction == null)
					{
						this.rateHasApprovalProcessConnectAction = new global::Edom.CRR.RateHasApprovalProcessConnectAction(this);
						this.rateHasApprovalProcessConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.rateHasApprovalProcessConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.itemHasAttributeConnectAction != null)
					{
						this.itemHasAttributeConnectAction.Dispose();
						this.itemHasAttributeConnectAction = null;
					}
					if(this.attributeHasDataTypeConnectAction != null)
					{
						this.attributeHasDataTypeConnectAction.Dispose();
						this.attributeHasDataTypeConnectAction = null;
					}
					if(this.userHasAttributeConnectAction != null)
					{
						this.userHasAttributeConnectAction.Dispose();
						this.userHasAttributeConnectAction = null;
					}
					if(this.commentHasAttributeConnectAction != null)
					{
						this.commentHasAttributeConnectAction.Dispose();
						this.commentHasAttributeConnectAction = null;
					}
					if(this.itemHasCommentConnectAction != null)
					{
						this.itemHasCommentConnectAction.Dispose();
						this.itemHasCommentConnectAction = null;
					}
					if(this.rateHasAttributesConnectAction != null)
					{
						this.rateHasAttributesConnectAction.Dispose();
						this.rateHasAttributesConnectAction = null;
					}
					if(this.itemHasRateConnectAction != null)
					{
						this.itemHasRateConnectAction.Dispose();
						this.itemHasRateConnectAction = null;
					}
					if(this.rateHasReviewConnectAction != null)
					{
						this.rateHasReviewConnectAction.Dispose();
						this.rateHasReviewConnectAction = null;
					}
					if(this.rateHasUserConnectAction != null)
					{
						this.rateHasUserConnectAction.Dispose();
						this.rateHasUserConnectAction = null;
					}
					if(this.commentHasUserConnectAction != null)
					{
						this.commentHasUserConnectAction.Dispose();
						this.commentHasUserConnectAction = null;
					}
					if(this.reviewHasAttributesConnectAction != null)
					{
						this.reviewHasAttributesConnectAction.Dispose();
						this.reviewHasAttributesConnectAction = null;
					}
					if(this.approvalProcessHasAttributesConnectAction != null)
					{
						this.approvalProcessHasAttributesConnectAction.Dispose();
						this.approvalProcessHasAttributesConnectAction = null;
					}
					if(this.approvalStepHasOutcomeConnectAction != null)
					{
						this.approvalStepHasOutcomeConnectAction.Dispose();
						this.approvalStepHasOutcomeConnectAction = null;
					}
					if(this.approvalStepHasAttributesConnectAction != null)
					{
						this.approvalStepHasAttributesConnectAction.Dispose();
						this.approvalStepHasAttributesConnectAction = null;
					}
					if(this.approvalStepHasNextStepConnectAction != null)
					{
						this.approvalStepHasNextStepConnectAction.Dispose();
						this.approvalStepHasNextStepConnectAction = null;
					}
					if(this.approvalStartHasStepConnectAction != null)
					{
						this.approvalStartHasStepConnectAction.Dispose();
						this.approvalStartHasStepConnectAction = null;
					}
					if(this.commentHasApprovalProcessConnectAction != null)
					{
						this.commentHasApprovalProcessConnectAction.Dispose();
						this.commentHasApprovalProcessConnectAction = null;
					}
					if(this.reviewHasApprovalProcessConnectAction != null)
					{
						this.reviewHasApprovalProcessConnectAction.Dispose();
						this.reviewHasApprovalProcessConnectAction = null;
					}
					if(this.rateHasApprovalProcessConnectAction != null)
					{
						this.rateHasApprovalProcessConnectAction.Dispose();
						this.rateHasApprovalProcessConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CRRDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7cde767, 0x8322, 0x4ff6, 0x9c, 0x6e, 0xcb, 0x60, 0x1c, 0xbf, 0xa6, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CRRDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CRRDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Edom.CRR
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Edom.CRR.Item), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesOutcomes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesTargetSteps), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasSteps), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasOutcomes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStartReferencesStep), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasStart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesReview), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.AttributeReferencesDataType), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesRate), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ReviewReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.UserReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStep), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalOutcome), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.Review), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.Rate), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.Comment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.Attribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.DataType), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.User), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ReviewReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::Edom.CRR.Item)
				{
					parentElement = GetParentForItem((global::Edom.CRR.Item)childElement);
				} else
				if(childElement is global::Edom.CRR.ApprovalStep)
				{
					parentElement = GetParentForApprovalStep((global::Edom.CRR.ApprovalStep)childElement);
				} else
				if(childElement is global::Edom.CRR.ApprovalOutcome)
				{
					parentElement = GetParentForApprovalOutcome((global::Edom.CRR.ApprovalOutcome)childElement);
				} else
				if(childElement is global::Edom.CRR.ApprovalStart)
				{
					parentElement = GetParentForApprovalStart((global::Edom.CRR.ApprovalStart)childElement);
				} else
				if(childElement is global::Edom.CRR.ApprovalProcess)
				{
					parentElement = GetParentForApprovalProcess((global::Edom.CRR.ApprovalProcess)childElement);
				} else
				if(childElement is global::Edom.CRR.Review)
				{
					parentElement = GetParentForReview((global::Edom.CRR.Review)childElement);
				} else
				if(childElement is global::Edom.CRR.Rate)
				{
					parentElement = GetParentForRate((global::Edom.CRR.Rate)childElement);
				} else
				if(childElement is global::Edom.CRR.Comment)
				{
					parentElement = GetParentForComment((global::Edom.CRR.Comment)childElement);
				} else
				if(childElement is global::Edom.CRR.Attribute)
				{
					parentElement = GetParentForAttribute((global::Edom.CRR.Attribute)childElement);
				} else
				if(childElement is global::Edom.CRR.DataType)
				{
					parentElement = GetParentForDataType((global::Edom.CRR.DataType)childElement);
				} else
				if(childElement is global::Edom.CRR.User)
				{
					parentElement = GetParentForUser((global::Edom.CRR.User)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Edom.CRR.Model GetParentForItem( global::Edom.CRR.Item root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForUser( global::Edom.CRR.User root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForDataType( global::Edom.CRR.DataType root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForAttribute( global::Edom.CRR.Attribute root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForComment( global::Edom.CRR.Comment root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForRate( global::Edom.CRR.Rate root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForReview( global::Edom.CRR.Review root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForApprovalProcess( global::Edom.CRR.ApprovalProcess root )
			{
				// Segments 0 and 1
				global::Edom.CRR.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForApprovalStart( global::Edom.CRR.ApprovalStart root )
			{
				// Segments 0 and 1
				global::Edom.CRR.ApprovalProcess root2 = root.ApprovalProcess;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Edom.CRR.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForApprovalOutcome( global::Edom.CRR.ApprovalOutcome root )
			{
				// Segments 0 and 1
				global::Edom.CRR.ApprovalProcess root2 = root.ApprovalProcess;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Edom.CRR.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Edom.CRR.Model GetParentForApprovalStep( global::Edom.CRR.ApprovalStep root )
			{
				// Segments 0 and 1
				global::Edom.CRR.ApprovalProcess root2 = root.ApprovalProcess;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Edom.CRR.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.UserReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ReviewReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ItemReferencesRate), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.AttributeReferencesDataType), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesReview), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasStart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStartReferencesStep), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasOutcomes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessHasSteps), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesTargetSteps), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalProcessReferencesAttributes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ApprovalStepReferencesOutcomes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.CommentReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.ReviewReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Edom.CRR.RateReferencesApprovalProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::Edom.CRR.CRRDiagram diagram = linkShape.Diagram as global::Edom.CRR.CRRDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
