//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship ModelHasUseCases
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.ModelHasUseCases.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.ModelHasUseCases.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1b955da3-b074-45c1-913c-fffd74c49458")]
	public partial class ModelHasUseCases : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasUseCases domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b955da3, 0xb074, 0x45c1, 0x91, 0x3c, 0xff, 0xfd, 0x74, 0xc4, 0x94, 0x58);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasUseCases link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">UseCase to use as the target of the relationship.</param>
		public ModelHasUseCases(Model source, UseCase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasUseCases.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasUseCases.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUseCases(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUseCases(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUseCases(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUseCases(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xdd982751, 0x8ffc, 0x4e5e, 0x86, 0xbf, 0x38, 0x45, 0xc1, 0xd0, 0x04, 0x16);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasUseCases/Model.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasUseCases/Model.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UseCases", PropertyDisplayNameKey="Company.UCUS.ModelHasUseCases/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("dd982751-8ffc-4e5e-86bf-3845c1d00416")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a UseCase
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(UseCase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(UseCase element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x1bd42a1c, 0x1e67, 0x40af, 0xb9, 0x43, 0x5a, 0x53, 0x19, 0x31, 0x77, 0x23);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasUseCases/Element.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasUseCases/Element.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Company.UCUS.ModelHasUseCases/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1bd42a1c-1e67-40af-b943-5a5319317723")]
		public virtual UseCase Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UseCases of a Model
		/// <summary>
		/// Gets a list of UseCases.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UseCase> GetUseCases(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasUseCases links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasUseCases> GetLinksToUseCases ( global::Company.UCUS.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasUseCases>(modelInstance, global::Company.UCUS.ModelHasUseCases.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelHasUseCases link to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasUseCases GetLinkToModel (global::Company.UCUS.UseCase elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasUseCases> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasUseCases>(elementInstance, global::Company.UCUS.ModelHasUseCases.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasUseCases instance accessors
		
		/// <summary>
		/// Get any ModelHasUseCases links between a given Model and a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasUseCases> GetLinks( global::Company.UCUS.Model source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.ModelHasUseCases> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.ModelHasUseCases>();
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasUseCases> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasUseCases>(source, global::Company.UCUS.ModelHasUseCases.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasUseCases link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasUseCases link between a given Modeland a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasUseCases GetLink( global::Company.UCUS.Model source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasUseCases> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasUseCases>(source, global::Company.UCUS.ModelHasUseCases.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasUseCases link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship ModelHasActors
	/// Description for Company.UCUS.ModelHasActors
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.ModelHasActors.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.ModelHasActors.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("13e0c700-cc97-4979-b618-2c9a1e08830b")]
	public partial class ModelHasActors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasActors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13e0c700, 0xcc97, 0x4979, 0xb6, 0x18, 0x2c, 0x9a, 0x1e, 0x08, 0x83, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasActors link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Actor to use as the target of the relationship.</param>
		public ModelHasActors(Model source, Actor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasActors.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasActors.ActorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasActors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasActors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasActors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasActors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x88e422ab, 0x269d, 0x4821, 0xb2, 0x46, 0x16, 0xc7, 0xea, 0x32, 0x2a, 0xad);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Company.UCUS.ModelHasActors.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasActors/Model.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasActors/Model.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actors", PropertyDisplayNameKey="Company.UCUS.ModelHasActors/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("88e422ab-269d-4821-b246-16c7ea322aad")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Actor
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Actor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActorDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Actor element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActorDomainRoleId, newModel);
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0x233135c0, 0x98bf, 0x4b01, 0x8e, 0x21, 0x89, 0xee, 0x3d, 0xb8, 0x0e, 0x56);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for Company.UCUS.ModelHasActors.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasActors/Actor.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasActors/Actor.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Company.UCUS.ModelHasActors/Actor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("233135c0-98bf-4b01-8e21-89ee3db80e56")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actors of a Model
		/// <summary>
		/// Gets a list of Actors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actor> GetActors(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasActors links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasActors> GetLinksToActors ( global::Company.UCUS.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasActors>(modelInstance, global::Company.UCUS.ModelHasActors.ModelDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the ModelHasActors link to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasActors GetLinkToModel (global::Company.UCUS.Actor actorInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasActors>(actorInstance, global::Company.UCUS.ModelHasActors.ActorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasActors instance accessors
		
		/// <summary>
		/// Get any ModelHasActors links between a given Model and a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasActors> GetLinks( global::Company.UCUS.Model source, global::Company.UCUS.Actor target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.ModelHasActors> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.ModelHasActors>();
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasActors>(source, global::Company.UCUS.ModelHasActors.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasActors link between a given Modeland a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasActors GetLink( global::Company.UCUS.Model source, global::Company.UCUS.Actor target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasActors>(source, global::Company.UCUS.ModelHasActors.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship UseCaseIncludesUseCase
	/// Description for Company.UCUS.UseCaseIncludesUseCase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.UseCaseIncludesUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.UseCaseIncludesUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f51de5c2-76cc-4e34-bb0b-50dcf5817552")]
	public partial class UseCaseIncludesUseCase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UseCaseIncludesUseCase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf51de5c2, 0x76cc, 0x4e34, 0xbb, 0x0b, 0x50, 0xdc, 0xf5, 0x81, 0x75, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UseCaseIncludesUseCase link in the same Partition as the given UseCase
		/// </summary>
		/// <param name="source">UseCase to use as the source of the relationship.</param>
		/// <param name="target">UseCase to use as the target of the relationship.</param>
		public UseCaseIncludesUseCase(UseCase source, UseCase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UseCaseIncludesUseCase.SourceUseCaseDomainRoleId, source), new DslModeling::RoleAssignment(UseCaseIncludesUseCase.TargetUseCaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UseCaseIncludesUseCase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UseCaseIncludesUseCase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UseCaseIncludesUseCase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UseCaseIncludesUseCase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceUseCase domain role code
		
		/// <summary>
		/// SourceUseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceUseCaseDomainRoleId = new global::System.Guid(0x78bc1d77, 0x849a, 0x4140, 0xbc, 0xa8, 0x74, 0x56, 0x52, 0x09, 0xad, 0xff);
		
		/// <summary>
		/// DomainRole SourceUseCase
		/// Description for Company.UCUS.UseCaseIncludesUseCase.SourceUseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCaseIncludesUseCase/SourceUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCaseIncludesUseCase/SourceUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetIncludedUseCases", PropertyDisplayNameKey="Company.UCUS.UseCaseIncludesUseCase/SourceUseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78bc1d77-849a-4140-bca8-74565209adff")]
		public virtual UseCase SourceUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceUseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceUseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceIncludeUseCase of a UseCase
		/// <summary>
		/// Gets SourceIncludeUseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UseCase GetSourceIncludeUseCase(UseCase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetUseCaseDomainRoleId) as UseCase;
		}
		
		/// <summary>
		/// Sets SourceIncludeUseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceIncludeUseCase(UseCase element, UseCase newSourceUseCase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetUseCaseDomainRoleId, newSourceUseCase);
		}
		#endregion
		#region TargetUseCase domain role code
		
		/// <summary>
		/// TargetUseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetUseCaseDomainRoleId = new global::System.Guid(0x20fca338, 0xbecb, 0x44fe, 0xa9, 0x83, 0xad, 0x8f, 0x1c, 0xad, 0x53, 0x0a);
		
		/// <summary>
		/// DomainRole TargetUseCase
		/// Description for Company.UCUS.UseCaseIncludesUseCase.TargetUseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCaseIncludesUseCase/TargetUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCaseIncludesUseCase/TargetUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceIncludeUseCase", PropertyDisplayNameKey="Company.UCUS.UseCaseIncludesUseCase/TargetUseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("20fca338-becb-44fe-a983-ad8f1cad530a")]
		public virtual UseCase TargetUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetUseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetUseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetIncludedUseCases of a UseCase
		/// <summary>
		/// Gets a list of TargetIncludedUseCases.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UseCase> GetTargetIncludedUseCases(UseCase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(element, SourceUseCaseDomainRoleId);
		}
		#endregion
		#region SourceUseCase link accessor
		/// <summary>
		/// Get the list of UseCaseIncludesUseCase links to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.UseCaseIncludesUseCase> GetLinksToTargetIncludedUseCases ( global::Company.UCUS.UseCase sourceUseCaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseIncludesUseCase>(sourceUseCaseInstance, global::Company.UCUS.UseCaseIncludesUseCase.SourceUseCaseDomainRoleId);
		}
		#endregion
		#region TargetUseCase link accessor
		/// <summary>
		/// Get the UseCaseIncludesUseCase link to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.UseCaseIncludesUseCase GetLinkToSourceIncludeUseCase (global::Company.UCUS.UseCase targetUseCaseInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseIncludesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseIncludesUseCase>(targetUseCaseInstance, global::Company.UCUS.UseCaseIncludesUseCase.TargetUseCaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetUseCase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UseCaseIncludesUseCase instance accessors
		
		/// <summary>
		/// Get any UseCaseIncludesUseCase links between a given UseCase and a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.UseCaseIncludesUseCase> GetLinks( global::Company.UCUS.UseCase source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.UseCaseIncludesUseCase> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.UseCaseIncludesUseCase>();
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseIncludesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseIncludesUseCase>(source, global::Company.UCUS.UseCaseIncludesUseCase.SourceUseCaseDomainRoleId);
			foreach ( global::Company.UCUS.UseCaseIncludesUseCase link in links )
			{
				if ( target.Equals(link.TargetUseCase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UseCaseIncludesUseCase link between a given UseCaseand a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.UseCaseIncludesUseCase GetLink( global::Company.UCUS.UseCase source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseIncludesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseIncludesUseCase>(source, global::Company.UCUS.UseCaseIncludesUseCase.SourceUseCaseDomainRoleId);
			foreach ( global::Company.UCUS.UseCaseIncludesUseCase link in links )
			{
				if ( target.Equals(link.TargetUseCase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship UseCaseExtendsUseCase
	/// Description for Company.UCUS.UseCaseExtendsUseCase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.UseCaseExtendsUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.UseCaseExtendsUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("091042e3-5da9-4f42-9e3c-5528d646913b")]
	public partial class UseCaseExtendsUseCase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UseCaseExtendsUseCase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x091042e3, 0x5da9, 0x4f42, 0x9e, 0x3c, 0x55, 0x28, 0xd6, 0x46, 0x91, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UseCaseExtendsUseCase link in the same Partition as the given UseCase
		/// </summary>
		/// <param name="source">UseCase to use as the source of the relationship.</param>
		/// <param name="target">UseCase to use as the target of the relationship.</param>
		public UseCaseExtendsUseCase(UseCase source, UseCase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UseCaseExtendsUseCase.SourceUseCaseDomainRoleId, source), new DslModeling::RoleAssignment(UseCaseExtendsUseCase.TargetUseCaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UseCaseExtendsUseCase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UseCaseExtendsUseCase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UseCaseExtendsUseCase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UseCaseExtendsUseCase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceUseCase domain role code
		
		/// <summary>
		/// SourceUseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceUseCaseDomainRoleId = new global::System.Guid(0xdf0cd1bf, 0x5d9a, 0x4620, 0x89, 0x87, 0xa9, 0x2f, 0xb7, 0xf7, 0x7e, 0xc6);
		
		/// <summary>
		/// DomainRole SourceUseCase
		/// Description for Company.UCUS.UseCaseExtendsUseCase.SourceUseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCaseExtendsUseCase/SourceUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCaseExtendsUseCase/SourceUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetExtendedUseCases", PropertyDisplayNameKey="Company.UCUS.UseCaseExtendsUseCase/SourceUseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("df0cd1bf-5d9a-4620-8987-a92fb7f77ec6")]
		public virtual UseCase SourceUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceUseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceUseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceExtendUseCase of a UseCase
		/// <summary>
		/// Gets SourceExtendUseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UseCase GetSourceExtendUseCase(UseCase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetUseCaseDomainRoleId) as UseCase;
		}
		
		/// <summary>
		/// Sets SourceExtendUseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceExtendUseCase(UseCase element, UseCase newSourceUseCase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetUseCaseDomainRoleId, newSourceUseCase);
		}
		#endregion
		#region TargetUseCase domain role code
		
		/// <summary>
		/// TargetUseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetUseCaseDomainRoleId = new global::System.Guid(0x3f388b55, 0x2d00, 0x4c69, 0x95, 0x4d, 0x02, 0xd1, 0xcc, 0xa0, 0x63, 0xbe);
		
		/// <summary>
		/// DomainRole TargetUseCase
		/// Description for Company.UCUS.UseCaseExtendsUseCase.TargetUseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCaseExtendsUseCase/TargetUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCaseExtendsUseCase/TargetUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceExtendUseCase", PropertyDisplayNameKey="Company.UCUS.UseCaseExtendsUseCase/TargetUseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3f388b55-2d00-4c69-954d-02d1cca063be")]
		public virtual UseCase TargetUseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetUseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetUseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetExtendedUseCases of a UseCase
		/// <summary>
		/// Gets a list of TargetExtendedUseCases.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UseCase> GetTargetExtendedUseCases(UseCase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(element, SourceUseCaseDomainRoleId);
		}
		#endregion
		#region Constraint domain property code
		
		/// <summary>
		/// Constraint domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainPropertyId = new global::System.Guid(0xffe0c5c8, 0xbbbc, 0x4d20, 0xa3, 0xb3, 0x63, 0x72, 0x3f, 0xb8, 0x93, 0x76);
		
		/// <summary>
		/// Storage for Constraint
		/// </summary>
		private global::System.String constraintPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Constraint domain property.
		/// Description for Company.UCUS.UseCaseExtendsUseCase.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.UseCaseExtendsUseCase/Constraint.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.UseCaseExtendsUseCase/Constraint.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ffe0c5c8-bbbc-4d20-a3b3-63723fb89376")]
		public global::System.String Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return constraintPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConstraintPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UseCaseExtendsUseCase.Constraint domain property.
		/// </summary>
		internal sealed partial class ConstraintPropertyHandler : DslModeling::DomainPropertyValueHandler<UseCaseExtendsUseCase, global::System.String>
		{
			private ConstraintPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UseCaseExtendsUseCase.Constraint domain property value handler.
			/// </summary>
			public static readonly ConstraintPropertyHandler Instance = new ConstraintPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UseCaseExtendsUseCase.Constraint domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConstraintDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(UseCaseExtendsUseCase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.constraintPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UseCaseExtendsUseCase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.constraintPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceUseCase link accessor
		/// <summary>
		/// Get the list of UseCaseExtendsUseCase links to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.UseCaseExtendsUseCase> GetLinksToTargetExtendedUseCases ( global::Company.UCUS.UseCase sourceUseCaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseExtendsUseCase>(sourceUseCaseInstance, global::Company.UCUS.UseCaseExtendsUseCase.SourceUseCaseDomainRoleId);
		}
		#endregion
		#region TargetUseCase link accessor
		/// <summary>
		/// Get the UseCaseExtendsUseCase link to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.UseCaseExtendsUseCase GetLinkToSourceExtendUseCase (global::Company.UCUS.UseCase targetUseCaseInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseExtendsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseExtendsUseCase>(targetUseCaseInstance, global::Company.UCUS.UseCaseExtendsUseCase.TargetUseCaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetUseCase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UseCaseExtendsUseCase instance accessors
		
		/// <summary>
		/// Get any UseCaseExtendsUseCase links between a given UseCase and a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.UseCaseExtendsUseCase> GetLinks( global::Company.UCUS.UseCase source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.UseCaseExtendsUseCase> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.UseCaseExtendsUseCase>();
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseExtendsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseExtendsUseCase>(source, global::Company.UCUS.UseCaseExtendsUseCase.SourceUseCaseDomainRoleId);
			foreach ( global::Company.UCUS.UseCaseExtendsUseCase link in links )
			{
				if ( target.Equals(link.TargetUseCase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UseCaseExtendsUseCase link between a given UseCaseand a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.UseCaseExtendsUseCase GetLink( global::Company.UCUS.UseCase source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.UseCaseExtendsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.UseCaseExtendsUseCase>(source, global::Company.UCUS.UseCaseExtendsUseCase.SourceUseCaseDomainRoleId);
			foreach ( global::Company.UCUS.UseCaseExtendsUseCase link in links )
			{
				if ( target.Equals(link.TargetUseCase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship ActorPerformsUseCase
	/// Description for Company.UCUS.ActorPerformsUseCase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.ActorPerformsUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.ActorPerformsUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e5ae5a0f-a851-473d-98b9-9dedef55538f")]
	public partial class ActorPerformsUseCase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ActorPerformsUseCase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe5ae5a0f, 0xa851, 0x473d, 0x98, 0xb9, 0x9d, 0xed, 0xef, 0x55, 0x53, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ActorPerformsUseCase link in the same Partition as the given Actor
		/// </summary>
		/// <param name="source">Actor to use as the source of the relationship.</param>
		/// <param name="target">UseCase to use as the target of the relationship.</param>
		public ActorPerformsUseCase(Actor source, UseCase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ActorPerformsUseCase.ActorDomainRoleId, source), new DslModeling::RoleAssignment(ActorPerformsUseCase.UseCaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorPerformsUseCase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorPerformsUseCase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorPerformsUseCase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorPerformsUseCase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0xeddb3d51, 0x2352, 0x4f47, 0x87, 0x77, 0x7d, 0x6e, 0xa9, 0xf3, 0xdf, 0x26);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for Company.UCUS.ActorPerformsUseCase.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ActorPerformsUseCase/Actor.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ActorPerformsUseCase/Actor.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UseCase", PropertyDisplayNameKey="Company.UCUS.ActorPerformsUseCase/Actor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("eddb3d51-2352-4f47-8777-7d6ea9f3df26")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actor of a UseCase
		/// <summary>
		/// Gets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Actor GetActor(UseCase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UseCaseDomainRoleId) as Actor;
		}
		
		/// <summary>
		/// Sets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActor(UseCase element, Actor newActor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UseCaseDomainRoleId, newActor);
		}
		#endregion
		#region UseCase domain role code
		
		/// <summary>
		/// UseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid UseCaseDomainRoleId = new global::System.Guid(0x84443a48, 0x9ab3, 0x4822, 0x97, 0x68, 0x5d, 0x03, 0x54, 0x41, 0x2a, 0xef);
		
		/// <summary>
		/// DomainRole UseCase
		/// Description for Company.UCUS.ActorPerformsUseCase.UseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ActorPerformsUseCase/UseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ActorPerformsUseCase/UseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Actor", PropertyDisplayNameKey="Company.UCUS.ActorPerformsUseCase/UseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("84443a48-9ab3-4822-9768-5d0354412aef")]
		public virtual UseCase UseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, UseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UseCase of a Actor
		/// <summary>
		/// Gets a list of UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UseCase> GetUseCase(Actor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(element, ActorDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the list of ActorPerformsUseCase links to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ActorPerformsUseCase> GetLinksToUseCase ( global::Company.UCUS.Actor actorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ActorPerformsUseCase>(actorInstance, global::Company.UCUS.ActorPerformsUseCase.ActorDomainRoleId);
		}
		#endregion
		#region UseCase link accessor
		/// <summary>
		/// Get the ActorPerformsUseCase link to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ActorPerformsUseCase GetLinkToActor (global::Company.UCUS.UseCase useCaseInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ActorPerformsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ActorPerformsUseCase>(useCaseInstance, global::Company.UCUS.ActorPerformsUseCase.UseCaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UseCase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ActorPerformsUseCase instance accessors
		
		/// <summary>
		/// Get any ActorPerformsUseCase links between a given Actor and a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ActorPerformsUseCase> GetLinks( global::Company.UCUS.Actor source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.ActorPerformsUseCase> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.ActorPerformsUseCase>();
			global::System.Collections.Generic.IList<global::Company.UCUS.ActorPerformsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ActorPerformsUseCase>(source, global::Company.UCUS.ActorPerformsUseCase.ActorDomainRoleId);
			foreach ( global::Company.UCUS.ActorPerformsUseCase link in links )
			{
				if ( target.Equals(link.UseCase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ActorPerformsUseCase link between a given Actorand a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ActorPerformsUseCase GetLink( global::Company.UCUS.Actor source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ActorPerformsUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ActorPerformsUseCase>(source, global::Company.UCUS.ActorPerformsUseCase.ActorDomainRoleId);
			foreach ( global::Company.UCUS.ActorPerformsUseCase link in links )
			{
				if ( target.Equals(link.UseCase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship ModelHasSubjects
	/// Description for Company.UCUS.ModelHasSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.ModelHasSubjects.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.ModelHasSubjects.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3d82f91b-2830-4d6b-ae28-655ec8cfca6c")]
	public partial class ModelHasSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d82f91b, 0x2830, 0x4d6b, 0xae, 0x28, 0x65, 0x5e, 0xc8, 0xcf, 0xca, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSubjects link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Subject to use as the target of the relationship.</param>
		public ModelHasSubjects(Model source, Subject target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSubjects.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x42575bf9, 0x378b, 0x464a, 0x83, 0x08, 0xcb, 0x55, 0xc4, 0x3f, 0x51, 0xa9);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Company.UCUS.ModelHasSubjects.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasSubjects/Model.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasSubjects/Model.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Company.UCUS.ModelHasSubjects/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("42575bf9-378b-464a-8308-cb55c43f51a9")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Subject
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Subject element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubjectDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Subject element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubjectDomainRoleId, newModel);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x8efacb18, 0xb799, 0x411a, 0x9d, 0x5d, 0xdd, 0x2a, 0xfd, 0xa3, 0xc9, 0x83);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for Company.UCUS.ModelHasSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.ModelHasSubjects/Subject.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.ModelHasSubjects/Subject.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Company.UCUS.ModelHasSubjects/Subject.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8efacb18-b799-411a-9d5d-dd2afda3c983")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Model
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubjects(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSubjects links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasSubjects> GetLinksToSubjects ( global::Company.UCUS.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasSubjects>(modelInstance, global::Company.UCUS.ModelHasSubjects.ModelDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the ModelHasSubjects link to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasSubjects GetLinkToModel (global::Company.UCUS.Subject subjectInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasSubjects>(subjectInstance, global::Company.UCUS.ModelHasSubjects.SubjectDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subject not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSubjects instance accessors
		
		/// <summary>
		/// Get any ModelHasSubjects links between a given Model and a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.ModelHasSubjects> GetLinks( global::Company.UCUS.Model source, global::Company.UCUS.Subject target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.ModelHasSubjects> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.ModelHasSubjects>();
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasSubjects>(source, global::Company.UCUS.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSubjects link between a given Modeland a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.ModelHasSubjects GetLink( global::Company.UCUS.Model source, global::Company.UCUS.Subject target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.ModelHasSubjects>(source, global::Company.UCUS.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::Company.UCUS.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.UCUS
{
	/// <summary>
	/// DomainRelationship SubjectReferencesUseCase
	/// Description for Company.UCUS.SubjectReferencesUseCase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.UCUS.SubjectReferencesUseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.UCUS.SubjectReferencesUseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.UCUS.UCUSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0c0a9d93-42fb-4dcf-9e45-8592547de7e7")]
	public partial class SubjectReferencesUseCase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectReferencesUseCase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c0a9d93, 0x42fb, 0x4dcf, 0x9e, 0x45, 0x85, 0x92, 0x54, 0x7d, 0xe7, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectReferencesUseCase link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">UseCase to use as the target of the relationship.</param>
		public SubjectReferencesUseCase(Subject source, UseCase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectReferencesUseCase.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectReferencesUseCase.UseCaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferencesUseCase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferencesUseCase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferencesUseCase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferencesUseCase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x00b1c868, 0xa53c, 0x4c3a, 0xa4, 0x7d, 0xff, 0x76, 0x63, 0x98, 0xe2, 0x33);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for Company.UCUS.SubjectReferencesUseCase.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.SubjectReferencesUseCase/Subject.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.SubjectReferencesUseCase/Subject.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UseCases", PropertyDisplayNameKey="Company.UCUS.SubjectReferencesUseCase/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("00b1c868-a53c-4c3a-a47d-ff766398e233")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a UseCase
		/// <summary>
		/// Gets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Subject GetSubject(UseCase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UseCaseDomainRoleId) as Subject;
		}
		
		/// <summary>
		/// Sets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubject(UseCase element, Subject newSubject)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UseCaseDomainRoleId, newSubject);
		}
		#endregion
		#region UseCase domain role code
		
		/// <summary>
		/// UseCase domain role Id.
		/// </summary>
		public static readonly global::System.Guid UseCaseDomainRoleId = new global::System.Guid(0x37eff4d4, 0x55a9, 0x475c, 0x9e, 0x08, 0x1e, 0x33, 0x95, 0x3d, 0x7f, 0x51);
		
		/// <summary>
		/// DomainRole UseCase
		/// Description for Company.UCUS.SubjectReferencesUseCase.UseCase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.UCUS.SubjectReferencesUseCase/UseCase.DisplayName", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.UCUS.SubjectReferencesUseCase/UseCase.Description", typeof(global::Company.UCUS.UCUSDomainModel), "Company.UCUS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="Company.UCUS.SubjectReferencesUseCase/UseCase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("37eff4d4-55a9-475c-9e08-1e33953d7f51")]
		public virtual UseCase UseCase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UseCase)DslModeling::DomainRoleInfo.GetRolePlayer(this, UseCaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UseCaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UseCases of a Subject
		/// <summary>
		/// Gets a list of UseCases.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UseCase> GetUseCases(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UseCase>, UseCase>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectReferencesUseCase links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.SubjectReferencesUseCase> GetLinksToUseCases ( global::Company.UCUS.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.SubjectReferencesUseCase>(subjectInstance, global::Company.UCUS.SubjectReferencesUseCase.SubjectDomainRoleId);
		}
		#endregion
		#region UseCase link accessor
		/// <summary>
		/// Get the SubjectReferencesUseCase link to a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.SubjectReferencesUseCase GetLinkToSubject (global::Company.UCUS.UseCase useCaseInstance)
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.SubjectReferencesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.SubjectReferencesUseCase>(useCaseInstance, global::Company.UCUS.SubjectReferencesUseCase.UseCaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UseCase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubjectReferencesUseCase instance accessors
		
		/// <summary>
		/// Get any SubjectReferencesUseCase links between a given Subject and a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.UCUS.SubjectReferencesUseCase> GetLinks( global::Company.UCUS.Subject source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.List<global::Company.UCUS.SubjectReferencesUseCase> outLinks = new global::System.Collections.Generic.List<global::Company.UCUS.SubjectReferencesUseCase>();
			global::System.Collections.Generic.IList<global::Company.UCUS.SubjectReferencesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.SubjectReferencesUseCase>(source, global::Company.UCUS.SubjectReferencesUseCase.SubjectDomainRoleId);
			foreach ( global::Company.UCUS.SubjectReferencesUseCase link in links )
			{
				if ( target.Equals(link.UseCase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectReferencesUseCase link between a given Subjectand a UseCase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.UCUS.SubjectReferencesUseCase GetLink( global::Company.UCUS.Subject source, global::Company.UCUS.UseCase target )
		{
			global::System.Collections.Generic.IList<global::Company.UCUS.SubjectReferencesUseCase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.UCUS.SubjectReferencesUseCase>(source, global::Company.UCUS.SubjectReferencesUseCase.SubjectDomainRoleId);
			foreach ( global::Company.UCUS.SubjectReferencesUseCase link in links )
			{
				if ( target.Equals(link.UseCase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
