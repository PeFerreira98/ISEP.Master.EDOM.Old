/*
 * generated by Xtext 2.22.0
 */
package pt.isep.edom.i160826.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import pt.isep.edom.i160826.services.UcusDslGrammarAccess;
import pt.isep.edom.i160826.ucus.Actor;
import pt.isep.edom.i160826.ucus.Association;
import pt.isep.edom.i160826.ucus.Extend;
import pt.isep.edom.i160826.ucus.Include;
import pt.isep.edom.i160826.ucus.Model;
import pt.isep.edom.i160826.ucus.Subject;
import pt.isep.edom.i160826.ucus.UcusPackage;
import pt.isep.edom.i160826.ucus.UseCase;

@SuppressWarnings("all")
public class UcusDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UcusDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UcusPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UcusPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case UcusPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case UcusPackage.EXTEND:
				sequence_Extend(context, (Extend) semanticObject); 
				return; 
			case UcusPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case UcusPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UcusPackage.SUBJECT:
				sequence_Subject(context, (Subject) semanticObject); 
				return; 
			case UcusPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (name=EString (association+=[Association|EString] association+=[Association|EString]*)?)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (name=EString actor=[Actor|EString] usecase=[UseCase|EString])
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.ASSOCIATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.ASSOCIATION__NAME));
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.ASSOCIATION__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.ASSOCIATION__ACTOR));
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.ASSOCIATION__USECASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.ASSOCIATION__USECASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationAccess().getActorActorEStringParserRuleCall_4_0_1(), semanticObject.eGet(UcusPackage.Literals.ASSOCIATION__ACTOR, false));
		feeder.accept(grammarAccess.getAssociationAccess().getUsecaseUseCaseEStringParserRuleCall_6_0_1(), semanticObject.eGet(UcusPackage.Literals.ASSOCIATION__USECASE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Extend returns Extend
	 *
	 * Constraint:
	 *     (name=EString extendedCase=[UseCase|EString])
	 */
	protected void sequence_Extend(ISerializationContext context, Extend semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.EXTEND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.EXTEND__NAME));
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.EXTEND__EXTENDED_CASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.EXTEND__EXTENDED_CASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtendAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExtendAccess().getExtendedCaseUseCaseEStringParserRuleCall_4_0_1(), semanticObject.eGet(UcusPackage.Literals.EXTEND__EXTENDED_CASE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     (name=EString addition=[UseCase|EString])
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.INCLUDE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.INCLUDE__NAME));
			if (transientValues.isValueTransient(semanticObject, UcusPackage.Literals.INCLUDE__ADDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UcusPackage.Literals.INCLUDE__ADDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIncludeAccess().getAdditionUseCaseEStringParserRuleCall_4_0_1(), semanticObject.eGet(UcusPackage.Literals.INCLUDE__ADDITION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=EString (subject+=Subject subject+=Subject*)? (actor+=Actor actor+=Actor*)? (association+=Association association+=Association*)?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subject returns Subject
	 *
	 * Constraint:
	 *     (name=EString (usecase+=UseCase usecase+=UseCase*)?)
	 */
	protected void sequence_Subject(ISerializationContext context, Subject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (include+=[Include|EString] include+=[Include|EString]*)? 
	 *         (extend+=[Extend|EString] extend+=[Extend|EString]*)? 
	 *         (association+=[Association|EString] association+=[Association|EString]*)? 
	 *         (includes+=Include includes+=Include*)? 
	 *         (extends+=Extend extends+=Extend*)?
	 *     )
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
