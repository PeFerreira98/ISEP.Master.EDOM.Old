/**
 * generated by Xtext 2.22.0
 */
package pt.isep.edom.i160826.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import pt.isep.edom.i160826.services.UcusDslGrammarAccess;
import pt.isep.edom.i160826.ucus.Actor;
import pt.isep.edom.i160826.ucus.Association;
import pt.isep.edom.i160826.ucus.Model;
import pt.isep.edom.i160826.ucus.Subject;
import pt.isep.edom.i160826.ucus.UseCase;

@SuppressWarnings("all")
public class UcusDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private UcusDslGrammarAccess _ucusDslGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Subject> _subject = model.getSubject();
    for (final Subject subject : _subject) {
      document.<Subject>format(subject);
    }
    EList<Actor> _actor = model.getActor();
    for (final Actor actor : _actor) {
      document.<Actor>format(actor);
    }
    EList<Association> _association = model.getAssociation();
    for (final Association association : _association) {
      document.<Association>format(association);
    }
  }
  
  protected void _format(final Subject subject, @Extension final IFormattableDocument document) {
    EList<UseCase> _usecase = subject.getUsecase();
    for (final UseCase useCase : _usecase) {
      document.<UseCase>format(useCase);
    }
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof Subject) {
      _format((Subject)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
