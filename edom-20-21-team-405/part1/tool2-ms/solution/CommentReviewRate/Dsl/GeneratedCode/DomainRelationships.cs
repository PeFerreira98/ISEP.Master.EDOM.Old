//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasSubjects
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("71ca2133-95c3-44d7-b954-e8758a332d60")]
	public partial class ModelHasSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71ca2133, 0x95c3, 0x44d7, 0xb9, 0x54, 0xe8, 0x75, 0x8a, 0x33, 0x2d, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSubjects link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Subject to use as the target of the relationship.</param>
		public ModelHasSubjects(Model source, Subject target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSubjects.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSubjects.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x6bb7b12b, 0x0af0, 0x4c1a, 0xa0, 0x7b, 0x70, 0x41, 0xcc, 0x6b, 0x1f, 0x89);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasSubjects/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6bb7b12b-0af0-4c1a-a07b-7041cc6b1f89")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Subject
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Subject element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Subject element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc839d946, 0xd58a, 0x4a78, 0x9e, 0xce, 0x75, 0xff, 0x4c, 0x6d, 0x0f, 0x16);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasSubjects/Element.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasSubjects/Element.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasSubjects/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c839d946-d58a-4a78-9ece-75ff4c6d0f16")]
		public virtual Subject Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Model
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubjects(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSubjects links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasSubjects> GetLinksToSubjects ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(modelInstance, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelHasSubjects link to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasSubjects GetLinkToModel (global::EDOM.CommentReviewRate.Subject elementInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(elementInstance, global::EDOM.CommentReviewRate.ModelHasSubjects.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSubjects instance accessors
		
		/// <summary>
		/// Get any ModelHasSubjects links between a given Model and a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasSubjects> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Subject target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasSubjects> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasSubjects>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(source, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSubjects link between a given Modeland a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasSubjects GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Subject target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasSubjects>(source, global::EDOM.CommentReviewRate.ModelHasSubjects.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasSubjects link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasUsers
	/// Description for EDOM.CommentReviewRate.ModelHasUsers
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasUsers.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasUsers.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7669c5e4-7283-487f-bca6-269b4b11b39f")]
	public partial class ModelHasUsers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasUsers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7669c5e4, 0x7283, 0x487f, 0xbc, 0xa6, 0x26, 0x9b, 0x4b, 0x11, 0xb3, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasUsers link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public ModelHasUsers(Model source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasUsers.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasUsers.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUsers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUsers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUsers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUsers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x2bbdffc4, 0xd8b4, 0x466d, 0xbe, 0xa8, 0x07, 0xf4, 0x6f, 0x2f, 0x8d, 0x0e);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasUsers.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasUsers/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasUsers/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Users", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasUsers/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2bbdffc4-d8b4-466d-bea8-07f46f2f8d0e")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a User
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(User element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(User element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserDomainRoleId, newModel);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xee5a6895, 0x6d12, 0x4cdb, 0xaa, 0xf2, 0xf5, 0xd1, 0x7f, 0x6e, 0x05, 0xaa);
		
		/// <summary>
		/// DomainRole User
		/// Description for EDOM.CommentReviewRate.ModelHasUsers.User
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasUsers/User.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasUsers/User.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasUsers/User.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ee5a6895-6d12-4cdb-aaf2-f5d17f6e05aa")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Model
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasUsers links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasUsers> GetLinksToUsers ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasUsers>(modelInstance, global::EDOM.CommentReviewRate.ModelHasUsers.ModelDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the ModelHasUsers link to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasUsers GetLinkToModel (global::EDOM.CommentReviewRate.User userInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasUsers>(userInstance, global::EDOM.CommentReviewRate.ModelHasUsers.UserDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of User not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasUsers instance accessors
		
		/// <summary>
		/// Get any ModelHasUsers links between a given Model and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasUsers> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.User target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasUsers> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasUsers>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasUsers>(source, global::EDOM.CommentReviewRate.ModelHasUsers.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasUsers link between a given Modeland a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasUsers GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.User target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasUsers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasUsers>(source, global::EDOM.CommentReviewRate.ModelHasUsers.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasUsers link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasFields
	/// Description for EDOM.CommentReviewRate.ModelHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ec3c78ba-0610-47cd-8c46-0d1ca622d54d")]
	public partial class ModelHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xec3c78ba, 0x0610, 0x47cd, 0x8c, 0x46, 0x0d, 0x1c, 0xa6, 0x22, 0xd5, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasFields link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ModelHasFields(Model source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasFields.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xbc1a56b9, 0x3bb6, 0x4972, 0x8f, 0x5f, 0x8d, 0xa5, 0x04, 0xef, 0xa6, 0x61);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasFields/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bc1a56b9-3bb6-4972-8f5f-8da504efa661")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Field
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Field element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldDomainRoleId, newModel);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xdd60dfdb, 0x1f46, 0x4bee, 0xb1, 0x32, 0x41, 0x77, 0x3d, 0xa2, 0xc3, 0xc5);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.ModelHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasFields/Field.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dd60dfdb-1f46-4bee-b132-41773da2c3c5")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Model
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasFields links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(modelInstance, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the ModelHasFields link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasFields GetLinkToModel (global::EDOM.CommentReviewRate.Field fieldInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(fieldInstance, global::EDOM.CommentReviewRate.ModelHasFields.FieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Field not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasFields instance accessors
		
		/// <summary>
		/// Get any ModelHasFields links between a given Model and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasFields> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(source, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasFields link between a given Modeland a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasFields GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasFields>(source, global::EDOM.CommentReviewRate.ModelHasFields.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship ModelHasComments
	/// Description for EDOM.CommentReviewRate.ModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ccb4fefc-aefa-495d-8299-adb5e2826ac9")]
	public partial class ModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xccb4fefc, 0xaefa, 0x495d, 0x82, 0x99, 0xad, 0xb5, 0xe2, 0x82, 0x6a, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasComments link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelHasComments(Model source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasComments.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x614cd0d0, 0xd457, 0x4571, 0xa3, 0x23, 0x25, 0xd2, 0xa0, 0x54, 0x78, 0x54);
		
		/// <summary>
		/// DomainRole Model
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Model
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments/Model.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments/Model.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasComments/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("614cd0d0-d457-4571-a323-25d2a0547854")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Comment
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Comment element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xbb77066b, 0x55ca, 0x48db, 0x8b, 0x9d, 0xf5, 0x88, 0xe6, 0x17, 0x7b, 0x54);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.ModelHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.ModelHasComments/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.ModelHasComments/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="EDOM.CommentReviewRate.ModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bb77066b-55ca-48db-8b9d-f588e6177b54")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Model
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasComments links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasComments> GetLinksToComments ( global::EDOM.CommentReviewRate.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(modelInstance, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasComments GetLinkToModel (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(commentInstance, global::EDOM.CommentReviewRate.ModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasComments instance accessors
		
		/// <summary>
		/// Get any ModelHasComments links between a given Model and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.ModelHasComments> GetLinks( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.ModelHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(source, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasComments link between a given Modeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.ModelHasComments GetLink( global::EDOM.CommentReviewRate.Model source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.ModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.ModelHasComments>(source, global::EDOM.CommentReviewRate.ModelHasComments.ModelDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.ModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship SubjectHasComments
	/// Description for EDOM.CommentReviewRate.SubjectHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5e4557b-8743-4de3-adfd-2c03bfc7748d")]
	public partial class SubjectHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5e4557b, 0x8743, 0x4de3, 0xad, 0xfd, 0x2c, 0x03, 0xbf, 0xc7, 0x74, 0x8d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectHasComments link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public SubjectHasComments(Subject source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectHasComments.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xa37d4aad, 0xf791, 0x471d, 0x89, 0x61, 0x99, 0xfc, 0x5e, 0x1c, 0xe2, 0xc8);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments/Subject.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments/Subject.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasComments/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a37d4aad-f791-471d-8961-99fc5e1ce2c8")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a Comment
		/// <summary>
		/// Gets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Subject GetSubject(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Subject;
		}
		
		/// <summary>
		/// Sets Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubject(Comment element, Subject newSubject)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newSubject);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x5bb5394d, 0x152c, 0x4163, 0xaf, 0xb7, 0x95, 0x68, 0x1d, 0x8d, 0xae, 0x09);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.SubjectHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasComments/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasComments/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasComments/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5bb5394d-152c-4163-afb7-95681d8dae09")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Subject
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectHasComments links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasComments> GetLinksToComments ( global::EDOM.CommentReviewRate.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(subjectInstance, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the SubjectHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasComments GetLinkToSubject (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(commentInstance, global::EDOM.CommentReviewRate.SubjectHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubjectHasComments instance accessors
		
		/// <summary>
		/// Get any SubjectHasComments links between a given Subject and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasComments> GetLinks( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(source, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectHasComments link between a given Subjectand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasComments GetLink( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasComments>(source, global::EDOM.CommentReviewRate.SubjectHasComments.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasComments
	/// Description for EDOM.CommentReviewRate.CommentHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("24a825bf-5822-45aa-af76-2bb7cd2eb1e0")]
	public partial class CommentHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24a825bf, 0x5822, 0x45aa, 0xaf, 0x76, 0x2b, 0xb7, 0xcd, 0x2e, 0xb1, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasComments link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public CommentHasComments(Comment source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasComments.SourceCommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasComments.TargetCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceComment domain role code
		
		/// <summary>
		/// SourceComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceCommentDomainRoleId = new global::System.Guid(0x0a9636a9, 0xc065, 0x42b2, 0x9f, 0xa9, 0x69, 0x86, 0x19, 0xd8, 0xfe, 0x4c);
		
		/// <summary>
		/// DomainRole SourceComment
		/// Description for EDOM.CommentReviewRate.CommentHasComments.SourceComment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments/SourceComment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments/SourceComment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Replies", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasComments/SourceComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a9636a9-c065-42b2-9fa9-698619d8fe4c")]
		public virtual Comment SourceComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentComment of a Comment
		/// <summary>
		/// Gets ParentComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Comment GetParentComment(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetCommentDomainRoleId) as Comment;
		}
		
		/// <summary>
		/// Sets ParentComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentComment(Comment element, Comment newSourceComment)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetCommentDomainRoleId, newSourceComment);
		}
		#endregion
		#region TargetComment domain role code
		
		/// <summary>
		/// TargetComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetCommentDomainRoleId = new global::System.Guid(0xf35f3e59, 0x0852, 0x49e6, 0x8f, 0x00, 0x01, 0x50, 0x83, 0xb1, 0x8f, 0xe1);
		
		/// <summary>
		/// DomainRole TargetComment
		/// Description for EDOM.CommentReviewRate.CommentHasComments.TargetComment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasComments/TargetComment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasComments/TargetComment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentComment", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasComments/TargetComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f35f3e59-0852-49e6-8f00-015083b18fe1")]
		public virtual Comment TargetComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Replies of a Comment
		/// <summary>
		/// Gets a list of Replies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetReplies(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SourceCommentDomainRoleId);
		}
		#endregion
		#region SourceComment link accessor
		/// <summary>
		/// Get the list of CommentHasComments links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasComments> GetLinksToReplies ( global::EDOM.CommentReviewRate.Comment sourceCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(sourceCommentInstance, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
		}
		#endregion
		#region TargetComment link accessor
		/// <summary>
		/// Get the CommentHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasComments GetLinkToParentComment (global::EDOM.CommentReviewRate.Comment targetCommentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(targetCommentInstance, global::EDOM.CommentReviewRate.CommentHasComments.TargetCommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetComment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommentHasComments instance accessors
		
		/// <summary>
		/// Get any CommentHasComments links between a given Comment and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasComments> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasComments> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasComments>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(source, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasComments link in links )
			{
				if ( target.Equals(link.TargetComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasComments link between a given Commentand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasComments GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Comment target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasComments>(source, global::EDOM.CommentReviewRate.CommentHasComments.SourceCommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasComments link in links )
			{
				if ( target.Equals(link.TargetComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasUser
	/// Description for EDOM.CommentReviewRate.CommentHasUser
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasUser.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasUser.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("88d32992-6258-4e66-b77d-5c44892f1b63")]
	public partial class CommentHasUser : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x88d32992, 0x6258, 0x4e66, 0xb7, 0x7d, 0x5c, 0x44, 0x89, 0x2f, 0x1b, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasUser link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public CommentHasUser(Comment source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasUser.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasUser.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasUser(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasUser(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasUser(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasUser(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x19175c60, 0x7105, 0x4baa, 0xa7, 0x81, 0x2a, 0x63, 0xc0, 0xb3, 0x95, 0xf8);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.CommentHasUser.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasUser/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasUser/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "User", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasUser/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("19175c60-7105-4baa-a781-2a63c0b395f8")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a User
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, UserDomainRoleId);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0x5b94bf7b, 0xb01c, 0x4739, 0x83, 0xf9, 0xb7, 0x98, 0x67, 0xd0, 0x59, 0x6b);
		
		/// <summary>
		/// DomainRole User
		/// Description for EDOM.CommentReviewRate.CommentHasUser.User
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasUser/User.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasUser/User.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasUser/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5b94bf7b-b01c-4739-83f9-b79867d0596b")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Comment
		/// <summary>
		/// Gets User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static User GetUser(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as User;
		}
		
		/// <summary>
		/// Sets User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUser(Comment element, User newUser)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newUser);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the CommentHasUser link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasUser GetLinkToUser (global::EDOM.CommentReviewRate.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasUser>(commentInstance, global::EDOM.CommentReviewRate.CommentHasUser.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of CommentHasUser links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasUser> GetLinksToComment ( global::EDOM.CommentReviewRate.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasUser>(userInstance, global::EDOM.CommentReviewRate.CommentHasUser.UserDomainRoleId);
		}
		#endregion
		#region CommentHasUser instance accessors
		
		/// <summary>
		/// Get any CommentHasUser links between a given Comment and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasUser> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.User target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasUser> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasUser>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasUser>(source, global::EDOM.CommentReviewRate.CommentHasUser.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasUser link between a given Commentand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasUser GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.User target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasUser>(source, global::EDOM.CommentReviewRate.CommentHasUser.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship SubjectHasFields
	/// Description for EDOM.CommentReviewRate.SubjectHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c0053609-fd7b-4527-b9f4-8ab958c84a4f")]
	public partial class SubjectHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0053609, 0xfd7b, 0x4527, 0xb9, 0xf4, 0x8a, 0xb9, 0x58, 0xc8, 0x4a, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectHasFields link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public SubjectHasFields(Subject source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectHasFields.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xacdbf991, 0x792f, 0x43b4, 0xab, 0x0c, 0xa7, 0xf8, 0x8c, 0x6e, 0x56, 0x96);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields/Subject.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields/Subject.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasFields/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acdbf991-792f-43b4-ab0c-a7f88c6e5696")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Field
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubjects(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x2370ba87, 0xdb69, 0x44fd, 0xbd, 0xd2, 0x83, 0xf1, 0xe2, 0xc7, 0x9b, 0xd4);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.SubjectHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.SubjectHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.SubjectHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subjects", PropertyDisplayNameKey="EDOM.CommentReviewRate.SubjectHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2370ba87-db69-44fd-bdd2-83f1e2c79bd4")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Subject
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectHasFields links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(subjectInstance, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of SubjectHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinksToSubjects ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(fieldInstance, global::EDOM.CommentReviewRate.SubjectHasFields.FieldDomainRoleId);
		}
		#endregion
		#region SubjectHasFields instance accessors
		
		/// <summary>
		/// Get any SubjectHasFields links between a given Subject and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.SubjectHasFields> GetLinks( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.SubjectHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(source, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectHasFields link between a given Subjectand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.SubjectHasFields GetLink( global::EDOM.CommentReviewRate.Subject source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.SubjectHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.SubjectHasFields>(source, global::EDOM.CommentReviewRate.SubjectHasFields.SubjectDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.SubjectHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship CommentHasFields
	/// Description for EDOM.CommentReviewRate.CommentHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5c97fa83-f2c4-473f-88ca-27b762e53e1a")]
	public partial class CommentHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c97fa83, 0xf2c4, 0x473f, 0x88, 0xca, 0x27, 0xb7, 0x62, 0xe5, 0x3e, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentHasFields link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public CommentHasFields(Comment source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentHasFields.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x85dcb6ec, 0x35bb, 0x4aab, 0x8c, 0x37, 0xa5, 0xac, 0x88, 0xd6, 0x34, 0x44);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields/Comment.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields/Comment.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasFields/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("85dcb6ec-35bb-4aab-8c37-a5ac88d63444")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Field
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x0123145c, 0xac6a, 0x4f8a, 0x91, 0x23, 0x86, 0x4b, 0x10, 0x5e, 0x38, 0xd0);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.CommentHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.CommentHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.CommentHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="EDOM.CommentReviewRate.CommentHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0123145c-ac6a-4f8a-9123-864b105e38d0")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Comment
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentHasFields links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(commentInstance, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of CommentHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinksToComments ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(fieldInstance, global::EDOM.CommentReviewRate.CommentHasFields.FieldDomainRoleId);
		}
		#endregion
		#region CommentHasFields instance accessors
		
		/// <summary>
		/// Get any CommentHasFields links between a given Comment and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.CommentHasFields> GetLinks( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.CommentHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(source, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentHasFields link between a given Commentand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.CommentHasFields GetLink( global::EDOM.CommentReviewRate.Comment source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.CommentHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.CommentHasFields>(source, global::EDOM.CommentReviewRate.CommentHasFields.CommentDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.CommentHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EDOM.CommentReviewRate
{
	/// <summary>
	/// DomainRelationship UserHasFields
	/// Description for EDOM.CommentReviewRate.UserHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.UserHasFields.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EDOM.CommentReviewRate.UserHasFields.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d44d722-ae64-47d3-b692-3f39994f0ae9")]
	public partial class UserHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d44d722, 0xae64, 0x47d3, 0xb6, 0x92, 0x3f, 0x39, 0x99, 0x4f, 0x0a, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserHasFields link in the same Partition as the given User
		/// </summary>
		/// <param name="source">User to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public UserHasFields(User source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserHasFields.UserDomainRoleId, source), new DslModeling::RoleAssignment(UserHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xa30fad25, 0x5840, 0x44b9, 0xac, 0xd8, 0xb6, 0x5f, 0xda, 0xaa, 0x94, 0x6a);
		
		/// <summary>
		/// DomainRole User
		/// Description for EDOM.CommentReviewRate.UserHasFields.User
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.UserHasFields/User.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.UserHasFields/User.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="EDOM.CommentReviewRate.UserHasFields/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a30fad25-5840-44b9-acd8-b65fdaaa946a")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Users of a Field
		/// <summary>
		/// Gets a list of Users.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUsers(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xa7ab3338, 0x9892, 0x439d, 0x97, 0xb1, 0xef, 0xa3, 0xf9, 0x10, 0x4c, 0x8f);
		
		/// <summary>
		/// DomainRole Field
		/// Description for EDOM.CommentReviewRate.UserHasFields.Field
		/// </summary>
		[DslDesign::DisplayNameResource("EDOM.CommentReviewRate.UserHasFields/Field.DisplayName", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EDOM.CommentReviewRate.UserHasFields/Field.Description", typeof(global::EDOM.CommentReviewRate.CommentReviewRateDomainModel), "EDOM.CommentReviewRate.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Users", PropertyDisplayNameKey="EDOM.CommentReviewRate.UserHasFields/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a7ab3338-9892-439d-97b1-efa3f9104c8f")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a User
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, UserDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of UserHasFields links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.UserHasFields> GetLinksToFields ( global::EDOM.CommentReviewRate.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.UserHasFields>(userInstance, global::EDOM.CommentReviewRate.UserHasFields.UserDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of UserHasFields links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.UserHasFields> GetLinksToUsers ( global::EDOM.CommentReviewRate.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.UserHasFields>(fieldInstance, global::EDOM.CommentReviewRate.UserHasFields.FieldDomainRoleId);
		}
		#endregion
		#region UserHasFields instance accessors
		
		/// <summary>
		/// Get any UserHasFields links between a given User and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EDOM.CommentReviewRate.UserHasFields> GetLinks( global::EDOM.CommentReviewRate.User source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.UserHasFields> outLinks = new global::System.Collections.Generic.List<global::EDOM.CommentReviewRate.UserHasFields>();
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.UserHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.UserHasFields>(source, global::EDOM.CommentReviewRate.UserHasFields.UserDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.UserHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserHasFields link between a given Userand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EDOM.CommentReviewRate.UserHasFields GetLink( global::EDOM.CommentReviewRate.User source, global::EDOM.CommentReviewRate.Field target )
		{
			global::System.Collections.Generic.IList<global::EDOM.CommentReviewRate.UserHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EDOM.CommentReviewRate.UserHasFields>(source, global::EDOM.CommentReviewRate.UserHasFields.UserDomainRoleId);
			foreach ( global::EDOM.CommentReviewRate.UserHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
