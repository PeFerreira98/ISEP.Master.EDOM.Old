package ecommerceRating.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ApprovalOutcome;
  private ConceptPresentation props_ApprovalOutcomeReference;
  private ConceptPresentation props_ApprovalProcess;
  private ConceptPresentation props_ApprovalStart;
  private ConceptPresentation props_ApprovalStep;
  private ConceptPresentation props_ApprovalStepListItem;
  private ConceptPresentation props_ApprovalStepReference;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_AttributeListItem;
  private ConceptPresentation props_AttributeReference;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_DataType;
  private ConceptPresentation props_IntType;
  private ConceptPresentation props_Item;
  private ConceptPresentation props_ItemListItem;
  private ConceptPresentation props_ItemReference;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_Rate;
  private ConceptPresentation props_Review;
  private ConceptPresentation props_StringType;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ApprovalOutcome:
        if (props_ApprovalOutcome == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalOutcome = cpb.create();
        }
        return props_ApprovalOutcome;
      case LanguageConceptSwitch.ApprovalOutcomeReference:
        if (props_ApprovalOutcomeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalOutcomeReference = cpb.create();
        }
        return props_ApprovalOutcomeReference;
      case LanguageConceptSwitch.ApprovalProcess:
        if (props_ApprovalProcess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalProcess = cpb.create();
        }
        return props_ApprovalProcess;
      case LanguageConceptSwitch.ApprovalStart:
        if (props_ApprovalStart == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalStart = cpb.create();
        }
        return props_ApprovalStart;
      case LanguageConceptSwitch.ApprovalStep:
        if (props_ApprovalStep == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalStep = cpb.create();
        }
        return props_ApprovalStep;
      case LanguageConceptSwitch.ApprovalStepListItem:
        if (props_ApprovalStepListItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ApprovalStepListItem = cpb.create();
        }
        return props_ApprovalStepListItem;
      case LanguageConceptSwitch.ApprovalStepReference:
        if (props_ApprovalStepReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ApprovalStepReference = cpb.create();
        }
        return props_ApprovalStepReference;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.AttributeListItem:
        if (props_AttributeListItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AttributeListItem = cpb.create();
        }
        return props_AttributeListItem;
      case LanguageConceptSwitch.AttributeReference:
        if (props_AttributeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeReference = cpb.create();
        }
        return props_AttributeReference;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.DataType:
        if (props_DataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataType = cpb.create();
        }
        return props_DataType;
      case LanguageConceptSwitch.IntType:
        if (props_IntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntType = cpb.create();
        }
        return props_IntType;
      case LanguageConceptSwitch.Item:
        if (props_Item == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Item = cpb.create();
        }
        return props_Item;
      case LanguageConceptSwitch.ItemListItem:
        if (props_ItemListItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ItemListItem = cpb.create();
        }
        return props_ItemListItem;
      case LanguageConceptSwitch.ItemReference:
        if (props_ItemReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ItemReference = cpb.create();
        }
        return props_ItemReference;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.Rate:
        if (props_Rate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rate = cpb.create();
        }
        return props_Rate;
      case LanguageConceptSwitch.Review:
        if (props_Review == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Review = cpb.create();
        }
        return props_Review;
      case LanguageConceptSwitch.StringType:
        if (props_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StringType = cpb.create();
        }
        return props_StringType;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
