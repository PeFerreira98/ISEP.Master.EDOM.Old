package Ucus.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.language.SConcept;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class UseCase__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xda81cb8675194951L, 0xaf8e5ee2ae47bbdfL, 0x53db45f88144b6e5L, "Ucus.structure.UseCase");

  public static final SMethod<String> getDescription_idpSUp9_2Mpq = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getDescription").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("pSUp9_2Mpq").build();
  public static final SMethod<List<SConcept>> getAllDirectlyAndIndirectlyIncludedUsecases_idpSUp9_2Opw = new SMethodBuilder<List<SConcept>>(new SJavaCompoundTypeImpl((Class<List<SConcept>>) ((Class) Object.class))).name("getAllDirectlyAndIndirectlyIncludedUsecases").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("pSUp9_2Opw").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getDescription_idpSUp9_2Mpq, getAllDirectlyAndIndirectlyIncludedUsecases_idpSUp9_2Opw);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getDescription_idpSUp9_2Mpq(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(__thisNode__, PROPS.description$70zM);
  }
  /*package*/ static List<SConcept> getAllDirectlyAndIndirectlyIncludedUsecases_idpSUp9_2Opw(@NotNull SNode __thisNode__) {
    List<SConcept> usecasesList = ListSequence.fromList(new ArrayList<SConcept>());
    for (SNode uc : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.includes$oDil))) {
      if ((SLinkOperations.getTarget(uc, LINKS.usecase$eghv) != null)) {
        ListSequence.fromList(usecasesList).addElement(SNodeOperations.getConcept(SLinkOperations.getTarget(uc, LINKS.usecase$eghv)));

        for (SNode includedUc : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(uc, LINKS.usecase$eghv), LINKS.includes$oDil))) {
          if (!(ListSequence.fromList(usecasesList).contains(SNodeOperations.getConcept(SLinkOperations.getTarget(includedUc, LINKS.usecase$eghv))))) {
            ListSequence.fromList(usecasesList).addElement(SNodeOperations.getConcept(SLinkOperations.getTarget(includedUc, LINKS.usecase$eghv)));
          }
        }
      }
    }
    return usecasesList;
  }

  /*package*/ UseCase__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getDescription_idpSUp9_2Mpq(node));
      case 1:
        return (T) ((List<SConcept>) getAllDirectlyAndIndirectlyIncludedUsecases_idpSUp9_2Opw(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty description$70zM = MetaAdapterFactory.getProperty(0xda81cb8675194951L, 0xaf8e5ee2ae47bbdfL, 0x53db45f88144b6e5L, 0x672adb1aec82f611L, "description");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink usecase$eghv = MetaAdapterFactory.getReferenceLink(0xda81cb8675194951L, 0xaf8e5ee2ae47bbdfL, 0x672adb1aec820a00L, 0x672adb1aec820a35L, "usecase");
    /*package*/ static final SContainmentLink includes$oDil = MetaAdapterFactory.getContainmentLink(0xda81cb8675194951L, 0xaf8e5ee2ae47bbdfL, 0x53db45f88144b6e5L, 0x672adb1aec820a5aL, "includes");
  }
}
